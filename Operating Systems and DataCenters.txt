Once there was a King of the Universe (or King of Kings), he had zero and one ...

As time passed alphabets, words and languages got created ...

Do you know there is a language called Toki Pona (The Language of Good)
	Which has 120 words, or headwords. 
	Check	https://en.wikipedia.org/wiki/List_of_dictionaries_by_number_of_words
	
For now, Lets define a New Language which has 7 Words:
	1.	OPERATING SYSTEM
	2.	NETWORK
	3.	DATA CENTER
	4.	DATA (DATA put into context is INFORMATION)
	5.	STATIC
	6.	DYNAMIC
	7.	LOAD(computing) or LOAD BALANCING(computing)

The King is coming back soon ...

Ellipsis (...)	-->	there's something left unsaid








As I told earlier in one of my LinkedIn post
	The whole Software Industry is running on INTERNET, Wired or Wireless.

Do you think
	Most of the Software Engineers or Almost all Software Engineers are doing Copy - Paste work?

We know 
		-	The Binary Language is two-symbol system : 0 and 1
		-	Most of the INTERNET or All of the INTERNET is running on Binary 0 and 1
		-	The INTERNET has STATIC DATA/INFORMATION, DYNAMIC DATA/INFORMATION stored in DATA CENTERS or any other Device
			-	STATIC can become DYNAMIC for SOME_TIME or LONG_TIME
			- 	DYNAMIC can become STATIC for SOME_TIME or LONG_TIME
		-	Most of the time or All of the time, The INTERNET is running on LOAD BALANCING



IMPORTANT NOTE:		While viewing this Document on any editor, disable/remove Soft Wrap or Word Wrap or Hard Wrap
					Please spend some time setting Any Text Editor you are using so that Diagrams and Text appear in the right format.
					So, It will be easy to Read or Glance faster.
				
					1.	I created this Document on 'BBEdit'
						1.	BBEdit -> Preferences -> Editor Defaults -> Spaces per tab: 4
						2.	BBEdit -> Preferences -> Sidebar -> Automatically show sidebar: Always
							Open all Files in BBEdit and use Multi-File Search, since few of the words are inter-related between this documents.

							The application contains multi-file text searching capabilities including support for Perl-compatible regular expressions.

							Search -> Multi-File Search -> Find All

							Search in:

								My Files & Folders
								Saved Search Sets
								Frontmost Project
								Open Editing Windows
								Open Text Documents
								Recent Folders
								Results Browsers
								Paths Files

					2.	While using 'Sublime Text' 
						Go To 'View' ->	uncheck 'Word Wrap'

					3.	While using 'IntelliJ IDEA', once you open text file
						Go To 'Right bottom corner' and click 'EditorConfig' -> 'Open Current File'
						Set 'indent_size = 4'
						
					4.	If you want to view the contents in Browser (https://github.com/)
						Then Select or Click on any .txt file
						Edit file --> Edit in place
						Indent mode --> Tabs
						Indent size --> 4
						Line wrap mode --> No wrap


 ================================================ 
||	<==> OPERATING SYSTEMS & DATA CENTERS <==>	||
 ================================================
					||
					||
				   -  -
				   \  /
					\/
 ------------------------------------------------------------------------------------
||	OPERATING SYSTEM ==interacts_with==> NETWORK ==interacts_with==> DATA CENTER	||
 ------------------------------------------------------------------------------------

You can see LINUX and ANDROID in below Image:
https://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timeline.svg
https://en.wikipedia.org/wiki/List_of_Linux_distributions

You can see UNIX and MAC OS in below Image:
https://en.wikipedia.org/wiki/File:Unix_history-simple.svg
https://en.wikipedia.org/wiki/Operating_system

You can see WINDOWS in below Image:
https://eylenburg.github.io/os_familytree.htm
	NOTE: I got this image from a random Youtube video, Provided Youtube Video URL in the bottom of the page. (The 50 Most Popular Linux & Terminal Commands - Full Course for Beginners)




The whole Software Industry is running on Internet, Wired or Wireless.

=============
<=> Wired <=>
=============

	https://www.submarinecablemap.com

================
<=> Wireless <=>
================

	https://www.starlink.com
		RESIDENTIAL								Connect at home
		ROAM									Connect on the go
		BOATS									Connect on the water
		CONNECTIVITY WHERE YOU LEAST EXPECT IT	Streaming, video calls, online gaming, remote working and more are now possible in even the most remote locations thanks to the world’s most advanced internet system.
		
	Starlink
		Starlink is a satellite internet constellation operated by American aerospace company SpaceX, 
		providing coverage to over 70 countries. It also aims for global mobile phone service after 2023.
		
		SpaceX started launching Starlink satellites in 2019. As of early January 2024, 
		it consists of over 5,289 mass-produced small satellites in low Earth orbit (LEO) that communicate with designated ground transceivers.

 ====================================================================
||	JUST WANT TO MAKE SURE FROM LINE 140 TO 806; WE ARE ASSUMING.	||
 ====================================================================
  ------- ========================== -------
<| Start |	For now let's assume	| Start |>
  ------- ========================== -------



						OPERATING SYSTEM (Laptop/Desktop/Phone/AnyDevice)
								|
								|
				 -------------------------------
				|		|						|
				|		|						|
			 NETWORK NETWORK	.	.	.	 NETWORK (Wired or Wireless)			-->	Load balancing (computing)	https://en.wikipedia.org/wiki/Load_balancing_(computing)
				|		|						|
				|		|						|
				 -------------------------------
								|
								|
							DATA CENTER (One or More) (Designed to Store, Process, Manage, and distribute DATA/INFORMATION and applications for businesses, organizations, and individuals)



OPERATING SYSTEM ==interacts_with==> NETWORK ==interacts_with==> DATA CENTER

All the Global Internet Users/Software Engineers use OPERATING SYSTEM(Laptop/Desktop/Phone/AnyDevice) to interact with DATA/INFORMATION which is stored in DATA CENTER or any other Device via NETWORK.




OPERATING SYSTEM 	--> Laptop/Desktop/Phone/AnyDevice

NETWORK 			--> Wired (Also Known as Guided media) 
						or 
						Wireless (Also Known as Unguided media)

DATA CENTER 		--> Designed to Store, Process, Manage, and distribute DATA/INFORMATION and applications for businesses, organizations, and individuals



DATA				-->	can be a number, symbol, character, word, codes, graphs, etc.
INFORMATION			-->	DATA put into context




OPERATING SYSTEM	-->	has something like STATIC , DYNAMIC
NETWORK				-->	has something like STATIC , DYNAMIC
DATA CENTER			-->	has something like STATIC , DYNAMIC


STATIC				--> Not Changing for a long time or Not changing for some time
DYNAMIC				--> Changing frequently


OPERATING SYSTEM	-->	
						1.	STATIC
							May be Files (Text Files, Audio Files, Video Files) saved/stored in Laptop/Desktop/Phone/AnyDevice
							Static Components: These are components in a laptop that do not typically change or move during operation.
							Examples include the laptop's chassis, keyboard, touchpad, and certain structural components.
						2.	DYNAMIC
							Dynamic Components: These are components that are more variable or actively involved in the operation of the laptop.
							Examples include the CPU (Central Processing Unit), GPU (Graphics Processing Unit), RAM (Random Access Memory), storage drives (HDDs or SSDs), fans, 
							and other components that are involved in processing data, storing data, or facilitating the laptop's operation.
						
						More details in:	Static vs. Dynamic Operating
											https://chat.openai.com/share/73d83de9-67c3-4025-afe5-d56739d8f20d

NETWORK				-->
						1.	STATIC
							In the context of computer networking, "static" typically refers to configurations or settings that remain fixed and unchanged unless manually modified by an administrator.
							For example: Static IP address, Static routing, Static DNS
						2.	DYNAMIC
							In contrast, "dynamic" refers to configurations or settings that are automatically assigned or updated by the network infrastructure itself without manual intervention.
							Some examples include: Dynamic IP address, Dynamic routing, Dynamic DNS
						
						More details in:	Dynamic vs Static Networking
											https://chat.openai.com/share/f6138f24-97d4-4208-a01e-edfe3afee940

DATA CENTER			-->	
						1.	STATIC (DATA/INFORMATION stored in DATA CENTER): 
							-	like photos, videos, movies, Soft copy of books across world, wikipedia, Audio files, video files, text files, Websites, database, Artifactories ...
						2.	DYNAMIC (DATA CENTER has something like Servers which will process this DATA/INFORMATION):
							-	like Processors(CPU, GPU), Cloud, Server, Software, Applications or Apps, Mobile Apps, Programming Language, Operating Systems, Networks, Web Applications ...
			
						More details in:	Data Center Components Overview
											https://chat.openai.com/share/8b7d5c0b-287e-4533-8ff0-3ec6f68371c5


LOAD(computing) 			Most of the time or All of the time, The INTERNET is running on LOAD BALANCING, So lets include everything.
or 					-->		ChatGPT listed 100+ (https://chat.openai.com/share/4e461046-dbef-48e7-86ef-45bcca6a320b)
LOAD BALANCING				Listing few here.
(computing)					Network Load Balancing, Server Load Balancing, Application Load Balancing, Database Load Balancing, Content Delivery Network (CDN) Load Balancing
							DNS Load Balancing, Firewall Load Balancing, Storage Load Balancing, Virtual Machine Load Balancing, API Gateway Load Balancing
							Container Orchestration Load Balancing, Real-Time Communication Load Balancing, Hybrid Cloud Load Balancing, Multi-Tier Application Load Balancing
	

==========================
<==> OPERATING SYSTEM <==>
==========================

1.	Number of alphabets in English = 26, Most of them are English-based programming Languages
	Non-English-based programming languages : https://en.wikipedia.org/wiki/Non-English-based_programming_languages
	Udemy Course: Cryptography and Hashing Fundamentals in Python and Java (15+ Hours) Explains encryption/decryption using 26 ENGLISH ALPHABETS.

	As of February 2024 'most of them are' or 'almost everything widely used' is English-based programming Languages
	Supporting 
	localization (l10n) / internationalization (i18n) / globalization (g11n) / native language support (NLS)	
	Adaptation to language, etc. --> 
		-	Language localization : translating a product into different languages or adapting a product to a country or region
		-	Internationalization and localization : the adaptation of computer software for non-native environments, especially other nations and cultures
		-	Video game localization : preparation of video games for other locales
		-	Dub localization : the adaptation of a movie or television series for another audience

	A Typeface (or Font Family) is a design of letters, numbers and other symbols, to be used in printing or for electronic display.
	There are thousands of different Typefaces (or Font Family) in existence, with new ones being developed constantly.
	https://en.wikipedia.org/wiki/List_of_typefaces

	In Conclusion:
	Since most of them are English Based, lets assume all below points are for English.

2.	There are 8 to 9+ Million Mobile Apps, 1 to 2 billion Websites(STATIC) or Web Applications(DYNAMIC), 5000 to 10000+ Data Centers
3.	There are 1000 to 10000+ programming languages.

	Syntax (programming languages)	https://en.wikipedia.org/wiki/Syntax_(programming_languages)
	Computer language syntax is generally distinguished into three levels: Words, Phrases, Context
		
		1.	Words – the lexical level, determining how characters form tokens;
		2.	Phrases – the grammar level, narrowly speaking, determining how tokens form phrases;
		3.	Context – determining what objects or variables names refer to, if types are valid, etc.

	Ideally if you learn one Programming Language, it should be easy to get the rest, since most of them are English based (26 alphabets)
	Its even easy if Microservices 
		(Services can be implemented using different programming languages, databases, hardware and software environments, depending on what fits best.
		 https://en.wikipedia.org/wiki/Microservices)
	are used compared to Monolithic system.

	Of the more than 7,000 existing languages, only a few hundred are recognized as being in use for Web pages on the World Wide Web.
	(https://en.wikipedia.org/wiki/Languages_used_on_the_Internet)

4.	Currently, the OS family tree includes between around 1,120 different operating systems (including some renamings)(https://eylenburg.github.io/os_familytree.htm)
5.	For now lets assume there are 10+ Operating System that are widely used across World.
	And this Operating systems are written in 10 or 20 + programming languages. 
6.	All this programming languages we run either in 
	Laptop/Desktop/Mobile/Some_Other_Device using one of the Operating System Windows/macOS/Linux/iOS/Android/Unix/Any_Other
	Since some Operating Systems are written in C, C++, Assembly; your programming language(any one) will always interact with Operating Systems code.

=================
<==> NETWORK <==>
=================

7.	Technically Speaking all the User Interfaces like Mobile Apps, Web Applications should work most of the time or all the time.
	Unless there is some Glitch (Network Glitch or any Other Glitch)
8.	Speed of Wired communication media (Also Known as Guided media) is optimized over period of time.
 	Wired	
 		Twisted pair, Coaxial cable, Optical fiber, ....
9.	I am not sure whether Speed of Wireless communication media (Also Known as Unguided media) keeps changing over Time. (If we Exclude Transmission medium)
	Wireless
		Speed of light, Speed of Sound , Speed of electromagnetic radiation (organized by frequency or wavelength), Radio ...
 

=====================
<==> DATA CENTER <==>
=====================
Internet's DATA/INFORMATION is stored in DATA CENTERS
Software Companies might have its own DATA CENTERS or might be using external DATA CENTERS to store DATA/INFORMATION.


10.	Lets assume that All this Mobile Apps and Web Applications can be divided in to 2 parts

	1.	PROGRAMS/ANY_OTHER_WORD_THAT_CORRECTLY_DESCRIBE_THE_MEANING --> Lets include Operating Systems, Programming Languages, Network, Data Centers, All Hardware devices, 
		Everything that is required to run User Interfaces like Mobile Apps, Websites including Internet, Electricity .... 

		ANY_OTHER_WORD_THAT_CORRECTLY_DESCRIBE_THE_MEANING --> May be TECHNOLOGY/SOFTWARE TECHNOLOGY/HARDWARE TECHNOLOGY (EXCLUDE DATA/INFORMATION FROM THIS WORDS)

	2.	DATA/INFORMATION --> What ever Humans can understand and utilise in some significant way
		In a nutshell, DATA can be a number, symbol, character, word, codes, graphs, etc. On the other hand, INFORMATION is DATA put into context. 
		INFORMATION is utilised by humans in some significant way (such as to make decisions, forecasts etc.
		A basic example of INFORMATION would be a computer. A computer uses programming scripts, formulas, or software applications to turn data into INFORMATION.

11.	Once you learn PROGRAMS/ANY_OTHER_WORD_THAT_CORRECTLY_DESCRIBE_THE_MEANING
	You can join any Software Company to learn DATA/INFORMATION
	Like 
		- Bank related Companies to learn Bank Technology.
		- Space related Companies to learn Space Technology.
		- Game related Companies to learn Game Technology.
		- Biology related Companies to learn Biology. (Includes Human Biology)


================================================
<==> Software Industry / Software Engineers <==>
================================================
Everyone who works to run the Internet

12.	Once we set this context from above points 1 to 11 then:

	Do you think Most of the Software Engineers are doing Copy - Paste work?
	Using few Efficient Algorithms which are part of Operating System Code or Programming Language Libraries or Programming Language Frameworks or Toolkit or Any Other.

	Engineers who maintain OPERATING SYSTEM or NETWORK or DATA CENTER or PROGRAMMING LANGUAGE
	keep adding/updating New Changes, New Enhancements, Security fixes and lot of other things ... ; 

	rest will be using those.

	Since Most of the PROGRAMMING LANGUAGES, OPERATING SYSTEM are built using English language(26 characters)
	and considering the second point(2. There are 8 to 9+ Million Mobile Apps, 1 to 2 billion Websites(STATIC) or Web Applications(DYNAMIC), 5000 to 10000+ Data Centers)
	Do you think Most of the Software Engineers are doing Copy - Paste work.
	I am not Sure.


13.	Most of the Software Engineers or Almost all Software Engineers 
	-	Work on Laptop/Desktop/Phone/AnyDevice which has OPERATING SYSTEM.
	-	Deploy there Applications (Web Applications, Mobile Application, or Any Other) in to DATA CENTER.
	-	If there is any issue in the Application which is deployed in DATA CENTER, 
		they will try to replicate DATA CENTER configuration in there local device (Laptop/Desktop/Phone/AnyDevice which has OPERATING SYSTEM)
		and then fix the issue by debugging in there local device (Laptop/Desktop/Phone/AnyDevice which has OPERATING SYSTEM).
		Once fixed, they apply/deploy the Application changes to DATA CENTER.
	-	Also if there is any issue in the NETWORK which is in between OPERATING SYSTEM and DATA CENTER.
		They will debug, find a fix and apply/deploy the changes to avoid downtime/interruption.

14.	While working on Cloud, 
	Either in Client Specific DATA CENTERS
	or
	External Providers like AWS, GCP, Azure

	Most of the Software Engineers or Almost all Software Engineers
	connect using SSH (Secure Shell) or UI (User Interface)
	from there Laptop/Desktop/Phone/AnyDevice which has OPERATING SYTEM

	List of clouds
	--------------
	https://en.wikipedia.org/wiki/Cloud_computing#List_of_clouds
		Amazon Web Services
		Google Cloud
		Microsoft Azure
		OpenStack
		IBM Cloud
		Oracle Cloud
		Adobe Creative Cloud


15.	So Most of the Software Engineers or Almost all Software Engineers 
	have Most of there work experience or Almost all of there work experience
	using Laptop/Desktop/Phone/AnyDevice which has OPERATING SYSTEM connecting to DATA CENTERS.


16.	If you connect your Laptop/Desktop/Phone/AnyDevice (Operating System) to Internet,
	Most of the time you see the DATA/INFORMATION coming from any of the Data Centers unless its Cached somewhere in between.

	When you work in any team of a Software Company 
	Most of the time you see the DATA/INFORMATION coming from any of the Data Centers unless its Cached somewhere in between.


	I was part of DevOps team. 
		Application code is stored in github/gitlab which is in Data Center.
		Continuous Integration tool like Jenkins is installed/deployed/saved/stored in Data Center, which in-turn connects/interacts to github/gitlab to fetch Application Code; build and store/save Artifacts in to Data Center.
		Continuous Delivery tool like Ansible is installed/deployed/saved/stored in Data Center, which in-turn connects/interacts to deploy/install/save/store Applications in to Data Center.
		Applications connect_to/interacts with Database to read/write data. Database is in Data Center.



17.	If you don't connect your Laptop/Desktop/Phone/AnyDevice (Operating System) to Internet/any external network,
	then you see the DATA/INFORMATION stored in your local device (Laptop/Desktop/Phone/AnyDevice which has Operating System).

18.	Most of the devices has something called Bootstrap (for Laptop/Desktop) or Firmware (for Phone); when you switch on the device, 
	it will load the part of the operating system know as KERNEL (SYSTEM PROGRAM) to RAM/MEMORY to provide user interface
	where APPLICATION PROGRAMS are loaded and runs as PROCESSES (One or More PROCESSES)
	Each PROCESS might have One or More THREADS).


Note: 	1.	I would like to mention 'Integrated development environment'(IDE) like IntelliJ IDEA (https://en.wikipedia.org/wiki/IntelliJ_IDEA)
			which is a software application that supports multiple Programming Languages.
			For example, Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs 24 with support for 39 languages.
			Another example is JDoodle, an online cloud-based IDE that supports over 76 languages.

			RAM						2 GB RAM minimum; 8 GB RAM recommended
			Disk space				3.5 GB required; a solid-state drive with at least 5 GB of free space is recommended

		2.	Packet Tracer	

			https://en.wikipedia.org/wiki/Packet_Tracer

		3.	Wireshark

			https://en.wikipedia.org/wiki/Wireshark

		4.	BBEdit

			https://en.wikipedia.org/wiki/BBEdit

				1.	It has native support for many programming languages and custom modules can be created by users to support any language.

				2.	The application contains multi-file text searching capabilities including support for Perl-compatible regular expressions.

					Search -> Multi-File Search -> Find All

					Search in:
 
						 My Files & Folders
						 Saved Search Sets
						 Frontmost Project
						 Open Editing Windows
						 Open Text Documents
						 Recent Folders
						 Results Browsers
						 Paths Files


		5.	Notepad++

			https://en.wikipedia.org/wiki/Notepad%2B%2B










																	
				OS	  		  OS			OS	.	.	.	.	.	OS (Laptop/Desktop/Phone/AnyDevice)
				|			  |				|						|
				|			  |				|						|
				|			  |				|						|
				 ------------- ------------- ----------------------- 
				|			  |				|						|
				|			  |				|						|
			Processor	  Processor		Processor	.	.	.	Processor 						-->	Load (computing)	https://en.wikipedia.org/wiki/Load_(computing)
				|			  |				|						|
				|			  |				|						|
			 	 ------------- ------------- ----------------------- 
				|			  |				|						|
				|			  |				|						|
			 Network	   Network		 Network	.	.	.	 Network (Wired or Wireless) 	-->	Load balancing (computing)	https://en.wikipedia.org/wiki/Load_balancing_(computing)
				|			  |				|						|
				|			  |				|						|
			 	 ------------- ------------- ----------------------- 
			 	|			  |				|						|
			 	|			  |				|						|
		   Data Center   Data Center   Data Center	.	.	.  Data Center (Designed to Store, Process, Manage, and distribute DATA/INFORMATION and applications for businesses, organizations, and individuals)
				|			  |				|						|
				|			  |				|						|
				 ------------- ------------- ----------------------- 
				|			  |				|						|
				|			  |				|						|
			Processor	  Processor		Processor	.	.	.	Processor 						-->	Load (computing)	https://en.wikipedia.org/wiki/Load_(computing)



Lets take any Search Engine like Google Search Engine to relate above diagram.
All the INTERNET Users across Globe use Laptop/Desktop/Phone/AnyDevice to interact with DATA/INFORMATION stored in DATA CENTERS.
And we know there are lot of different Laptop/Desktop/Phone/AnyDevice across Globe running different OPERATING SYSTEMS.
And we know The whole Software Industry is running on INTERNET, Wired or Wireless.
All USERS across world get the DATA/INFORMATION they are looking for through LOAD BALANCING.
INTERNET acting as a HOMOGENEOUS NETWORKING STANDARD, running across HETEROGENEOUS HARDWARE(https://en.wikipedia.org/wiki/Internet)



----------------------------
OS and Programming Languages
----------------------------
	More in the link https://chat.openai.com/share/2e4df6f2-c4cb-4e55-a622-f0d5969567e7
	These are general associations, and many operating systems support multiple programming languages.
	1.	Windows:
			Programming Languages: C, C++, C#, Assembly
	2.	macOS:
			Programming Languages: Objective-C, Swift, C, C++
	3.	Linux:
			Programming Languages: C, C++, Assembly
	4.	iOS (Apple mobile devices):
			Programming Languages: Swift, Objective-C
	5.	Android:
			Programming Languages: Java, Kotlin
	6.	Unix:
			Programming Languages: C, Assembly
	7.	Solaris:
			Programming Languages: C
	8.	FreeBSD:
			Programming Languages: C, C++





Recently I completed below courses in Udemy.

=====================================================================================================================================================
Udemy Courses (Playback Speed 0.5x to 2x)
1.	Adding SUBTITLES(which ever language it support) of each video as PDF/Word document in "Resource section" will help to glance faster.
		1.	Udemy Course: BIG-IP Local Traffic Manager(LTM) V13 Training (20+ Hours) ==> 73 PDFs attached in Resources section, easy to download and glance.
		2.	Neso Academy, Computer Networks (Completed 130 Videos) https://www.youtube.com/watch?v=VwN91x5i25g&list=PLBlnK6fEyqRgMCUAG0XRw78UA8qnv6jEx
			You can find Video's PPT/PDF in URL https://www.nesoacademy.org/cs/06-computer-networks ==> PPTs tab
	Note: If you open Udemy course in Laptop browser (My laptop is Mac and Safari browser), there is a "Transcript" option; easy to copy complete subtitle of a Video.

2. 	Since the Max Playback speed in Udemy/Youtube/Any_Other video is till 2x:
	In my iPhone While watching Udemy/Youtube/Any_Other video, or while browsing in Safari, I took screenshots (2600+) which is saved in Photos.
	Easy to glance quick by Zoom_In/Zoom_Out in PHOTOS
	Photos -> Albums -> Screenshots -> Zoom_In/Zoom_Out by Timeline (Year/Month/Day/Time)

3.	Glancing a book is even faster, not sure (May be in LIBRARY):
	What is it called when you flip through a book quickly?
	RIFFLE : turn over something, especially the pages of a book, quickly and casually. "he riffled through the pages"

2&3.MAY BE TAKING ONLY REQUIRED PHOTOS (FROM DIFFERENT BOOKS IN LIBRARY) AND SCREENSHOTS, THEN ZOOM_IN/ZOOM_OUT BY TIMELINE (YEAR/MONTH/DAY/TIME) IN PHOTOS
	off-course it includes frequent update (add/delete/reorder photos),
	While taking SCREENSHOTS from browser you can mark,
	Or edit photos later to mark important things.

	Is there any English word to define this?

4.	There are 11000+ courses included in Udemy Personal Plan from catalog of 210,000+ courses, I think most of them are English-based programming Languages.
	Supporting audio and subtitles of different languages (localization).
	When you search in google it shows number of programming language across globe is less than are around 10000.
	---------------------------------------
	Non-English-based programming languages
	---------------------------------------
	https://en.wikipedia.org/wiki/Non-English-based_programming_languages

	I have completed Udemy Course: Cryptography and Hashing Fundamentals in Python and Java (15+ Hours)
	Explained encryption/decryption using 26 ENGLISH ALPHABETS

5.	All this programming languages we run either in 
	Laptop/Desktop/Mobile/Some_Other_Device using one of the Operating System Windows/macOS/Linux/iOS/Android/Unix/Any_Other
	Since some Operating Systems are written in C, C++, Assembly; your programming language(any one) will always interact with Operating Systems code.
=====================================================================================================================================================

1.	Containers Under the Hood (11+ Hours)
		https://labs.iximiuz.com/dashboard

		As mentioned in Section 1 (4. Course Setup) The VM is ~19GB in size.
		Which you need to download to your local system (Laptop/Desktop/Some_Other_Device) and install.

		================
		Instead of that,
		================
		1.	I spinned up debian, ubuntu, fedora, centos and more (Operating System Docker Images) light weight docker images in my Mac system.
		2.	You can also spinup (Operating System) in one of the cloud.
				https://en.wikipedia.org/wiki/Cloud_computing#List_of_clouds
					Amazon Web Services
					Google Cloud
					Microsoft Azure
					OpenStack
					IBM Cloud
					Oracle Cloud
					Adobe Creative Cloud
		3.	Try to use Online Playground / Sandbox
			I worked on https://labs.iximiuz.com/dashboard which is really cool :)		



		Section 1 - Introduction

			2. Our Journey

			When you take a process and associate that process with these 3 mechanisms (Namespaces, Cgroup, Overlay Filesystems)
			What you get is a container.
			And once we understand that, we will see how container technologies such as Docker and Kubernetes do exactly that.
			That is, they leverage these same mechanisms behind the scenes to make it easier for us to create,
			manage and orchestrate containers at scale.
			So when we go to Docker and Kubernetes, we will make sure to look behind the scenes to understand how
			those technologies work and illustrate how they leverage these mechanisms behind the scenes.
			For example, when you control the amount of CPU or memory available to a Docker container,
			we will go behind the scenes and see how Cgroups are the mechanism that make it happen.

			3.	What is Containerization?

			Containerization of Software is an approach to Isolating and Bundling an application with all
			the dependencies and only those dependencies together, including any Libraries, Data 
			and Configuration Files. 


			4. Course Setup

			Download VirtualBox: https://www.virtualbox.org/wiki/Downloads

			Download the zip file that has the Ubuntu Virtual Machine using link below:
			https://www.dropbox.com/s/mwkzd29ubcy5m9i/Containers_Course_VM.zip?dl=0

			Unzip the file - You will see the "Containers_Course.ova" file - Make sure you enough space on your machine.
			The VM is ~19GB in size.
			IMPORT the “Containers_Course.ova” FILE INTO VirtualBox

			Helpful links:
			VirtualBox SETUP:
			https://www.nakivo.com/blog/use-virtualbox-quick-overview/

			IMPORTING OVA FILE INTO VirtualBox:
			https://www.alphr.com/ova-virtualbox/

			Log in using User: vinnar Pwd: CuH2022!
			Note: You may see a security warning that you can safely ignore. This is more of a warning that even the Linux community has chosen to ignore.

			everglades.archive.gz
			dockerkubefiles.zip

		Section 2 - Namespaces
		Section 3 - Overlay Filesystems
		Section 4 - Cgroups
		Section 5 - Docker
		Section 6 - Kubernetes

2.	Operating Systems from scratch - Part 1 (8+ Hours)
3.	Operating Systems from scratch - Part 2 (12+ Hours)
4.	Operating Systems Part 3 : Synchronization and Deadlock (15+ Hours)
5.	Operating Systems Final Part (4): File Systems & Threads (10+ Hours)




Below is my Mac Configuration:
------------------------------
(base) yathvi@Madan-MacBook-Pro-175 ~ % system_profiler SPHardwareDataType
Hardware:

    Hardware Overview:

      Model Name: MacBook Pro
      Model Identifier: MacBookPro11,1
      Processor Name: Dual-Core Intel Core i7
      Processor Speed: 2.8 GHz
      Number of Processors: 1
      Total Number of Cores: 2
      L2 Cache (per Core): 256 KB
      L3 Cache: 4 MB
      Hyper-Threading Technology: Enabled
      Memory: 8 GB
      System Firmware Version: 478.0.0.0.0
      SMC Version (system): 2.16f68
      Serial Number (system): C02MH0UYFH05
      Hardware UUID: FA361C76-2D8A-5571-9F2B-4F2FE53283A7
      Provisioning UDID: FA361C76-2D8A-5571-9F2B-4F2FE53283A7

(base) yathvi@Madan-MacBook-Pro-175 ~ % 



You can spin up most of the Operating Systems using Docker images from hub.
	https://hub.docker.com/search?q=

Listed few which I spinned up in my machine.

(base) yathvi@Madan-MacBook-Pro-175 ~ % docker images
REPOSITORY                         TAG                                              IMAGE ID       CREATED         SIZE
cpu_hogger                         latest                                           fabd198e7174   46 hours ago    210MB
getting-started1                   latest                                           57b379a07248   10 days ago     134MB
monica                             latest                                           ad9da39b4152   12 days ago     648MB
kasmweb/centos-7-desktop           1.13.1-rolling                                   9c9c64bb99bb   2 weeks ago     3.8GB
adoptopenjdk/centos7_build_image   latest                                           47b88c7e568e   2 weeks ago     10.4GB
jetty                              latest                                           40d979c419cc   2 weeks ago     475MB
oraclelinux                        8.9                                              bddeb0258dd8   2 weeks ago     251MB
amazonlinux                        latest                                           db7b979d049f   2 weeks ago     144MB
debian                             latest                                           2a033a8c6371   3 weeks ago     117MB
busybox                            latest                                           9211bbaa0dbd   3 weeks ago     4.26MB
zookeeper                          latest                                           39dcc52629c2   3 weeks ago     328MB
docker                             latest                                           6091c7bd89fd   3 weeks ago     331MB
ubuntu                             latest                                           174c8c134b2a   4 weeks ago     77.9MB
alpine                             latest                                           f8c20f8bbcb6   4 weeks ago     7.38MB
fedora                             latest                                           8404925a71fd   5 weeks ago     177MB
linuxkit/containerd                95d5f0d2d8dc63bd87e96b7b39cf026cb86125c9-arm64   44abacfa83e1   7 weeks ago     74.2MB
linuxkit/containerd                95d5f0d2d8dc63bd87e96b7b39cf026cb86125c9         129aa999536d   7 weeks ago     77.4MB
cgroups/terratrain                 latest                                           4e335fa8a1e7   21 months ago   1.69GB
evankrul/cgroup-sc                 prom.v.1.2                                       7611ad1a40b5   2 years ago     1.02GB
gcr.io/k8s-minikube/kicbase        v0.0.23                                          9fce26cb202e   2 years ago     1.09GB
cgroups/utils                      latest                                           80481d414253   2 years ago     6.94MB
linuxkit/kernel                    5.4.242-builder                                  136934fa2354   2 years ago     795MB
linchpiner/cgroup-memory-manager   latest                                           a2ecde980975   3 years ago     74.3MB
docker/containerd-shim-process     edfb81e                                          814077996220   4 years ago     13.7MB
mesosphere/marathon                latest                                           0456762495d0   4 years ago     690MB
eclipse/ubuntu_jdk8                latest                                           d1f9b3b8934e   5 years ago     749MB
eclipse/centos_jdk8                latest                                           5bd02d36ed35   5 years ago     877MB
eclipse/centos_vertx               latest                                           d9b6afaaad07   6 years ago     601MB
(base) yathvi@Madan-MacBook-Pro-175 ~ % 


containerd
	https://labs.iximiuz.com/challenges/containerd-namespaces		


Listing few more Udemy Courses which I completed earlier:
========================================================


Explained encryption/decryption using 26 English alphabets.

6.	Cryptography and Hashing Fundamentals in Python and Java (15+ Hours)
		18. What is frequency analysis?
			.
			For example in an english language text some letters are more frequent than others
			(E, A, O, I and T)

		45. Random and pseudo-random numbers
			.
			The main problem as far as one time pad is concerned is how to generate the random numbers
			Random number generation is the generation of sequence of numbers that cannot be reasonably
			predicted better than by a random chance.

			True Random Numbers
			-------------------
			If we measure some physical phenomenon then we end up with true random numbers
			For example:
				radioactive decay or atmospheric noise
				
					-> values have uniform distribution
					-> the values are independent of each other
					-> not so efficient: quite expensive to generate (measure) these numbers
					


			Pseudo-Random Numbers (fake randomness)
			---------------------------------------
			Instead of measuring some physical phenomenon, we use computers to generate random numbers
			PROBLEM: computers are deterministic !!!
				-> values have uniform distribution
				-> values are NOT independent of each other
				-> there are efficient algorithms to generate these pseudo-random values

		89. Integer factorization problem
			.
			If a fast approach is invented to factor large integers then internet sites would no longer be secure

7.	Learn Vert.x - Reactive micro services with Java (10+ Hours)



In Progress:
Below Udemy course allows to take screenshots while watching the videos.
8.	The Complete Networking Fundamentals Course. Your CCNA start (79+ Hours)
9.	The Complete SSL and TLS Guide: HTTP to HTTPS (11 Hours)


In this Udemy course there are 73 PDFs attached in Resources section, easy to download and glance. 
10.	BIG-IP Local Traffic Manager(LTM) V13 Training (20+ Hours)

Currently searching for Data Centers Complete course: 
Number of data centers worldwide in 2023, by country
	https://www.statista.com/statistics/1228433/data-centers-worldwide-by-country/


Youtube
=======
Computer Networks (Completed 130 Videos)
	https://www.youtube.com/watch?v=VwN91x5i25g&list=PLBlnK6fEyqRgMCUAG0XRw78UA8qnv6jEx



As part of Udemy course "The Complete Networking Fundamentals Course. Your CCNA start (79+ Hours)"
==================================================================================================
Tools Used:
	1.	Cisco Packet Tracer
	2.	Wireshark



Cisco Packet Tracer
===================
	https://www.netacad.com/courses/packet-tracer
	
		Getting Started with Cisco Packet Tracer (2 hours)
		
		Exploring Networking with Cisco Packet Tracer (3 hours)
		
		Exploring Internet of Things with Cisco Packet Tracer (3 hours)



  ----- ============================ -----
<| End |	For now let's assume	| End |>
  ----- ============================ -----











Must watch videos:


=====================================================
CPU Cores VS Threads Explained	||	(5 minutes Video)
=====================================================
	https://www.youtube.com/watch?v=hwTYDQ0zZOw 

=====================================================
Linux File System Explained!	||	(5 minutes Video)
=====================================================
	https://www.youtube.com/watch?v=bbmWOjuFmgA



=====================================================
CPU Cores VS Threads Explained	||	(5 minutes Video)
=====================================================

	https://www.youtube.com/watch?v=hwTYDQ0zZOw 
	
	PARALLEL OPERATIONS (Core to Core, all operate at the same time)
	CONCURRENT OPERATIONS (Core to Thread, operate by switching)

	4 Core CPU
	Each of this Core is a worker
	Each process information each perform tasks
	Each basically do what the operating systems tells them to do

	Threads are like sequence of commands given to the cores

	Physical VS Logical
	Physical Core -> Physically on CPU (Actual Hardware on CPU itself)
	Logical core is more like code it exists in the computer
	Logical cores are basically the threads of the computer

	(4 Physical Cores) X (1 Thread/Core) = 4 Logical Cores

	(4 Physical Cores) X (2 Thread/Core) = 8 Logical Cores

	Threads > Core



=====================================================
Linux File System Explained!	||	(5 minutes Video)
=====================================================

	https://www.youtube.com/watch?v=bbmWOjuFmgA


/bin
/boot
	vmlinuz
/dev
	/bda
	/sda
	/stO
/etc
/home
	/yxz
		/bin
		/Mail
	/linux
	/tux
		/test.c
/lib
	/ld.so
/media
/mnt
/opt
	/kde
	/gnome
/proc
/root
/sbin
/srv
/sys
/tmp
/usr
	/X11R6
		/bin
			/xdm
			/xterm
			/xv
		/lib
		/man
	/bin
		/f2c
	/etc
	/lib
	/local
		/bin
		/lib
		/ftp
			/bin
			/lib
			/pub
		/man
	/sbin
	/share
		/doc
			/faq
			/howto
			/packages
		/man


Linux distributions
-------------------
archlinux
debian
fedora
Foresight linux
gentoo linux
Mandriva
linux Mint
kubuntu
openSUSE
PCLinuxOS
redhat
sabayon
slackware
slax
ubuntu
xubuntu




Understanding below

/sys
	Critical System Files

/etc
	Configurations

/bin
	Binaries

allow us to navigate any Linux environment and harness its full power.



Lets explore the key directories at the heart of the Linux file system.

First, the homes for executable binaries.
The layout of directories like /bin /sbin /usr/bin /usr/local/bin and their sbin counterparts follows a convention.


-----------------------------
Home for executable binaries
-----------------------------

1.	/bin contains core OS programs that must be accessible before /usr gets mounted at boot.
	For example, the command mount, ls, cd live here.

2.	/usr/bin is a primary home for binaries NOT part of the base OS itself.
	Most user programs live here.
		wget
		git

3.	/usr -> Unix System Resources, not user.

4.	/usr/local/bin holds executables installed by the admin, usually after building them from source.
	like firefox, vlc
	This keep local compiles (/usr/bin) separate to avoid overwriting system binaries (/bin).
	
5.	/sbin directory follows similar pattern that houses sysadmin utilities that require root access like iptables and sshd.
	iptables
	sshd
	sbin

6.	PATH Environment Variable
		
		/usr/bin
		/usr/local/bin
		/bin

		When the same binary exists in multiple directories, you can specify the default by reordering
		the directory precedence in the PATH variable.


7.	/lib contains shared library files essentail for /bin and /sbin binaries to function properly.
	These libraries need to be accessible early in the boot process before mounting /usr.
	They provide core functionality like C library routines (glibc) and compiler runtimes (libstdc++).
	
8.	/usr/lib holds libraries for /usr binaries that aren't critical for early system initialization.
	This includes UI libraries like GTK and QT as well as language runtimes like Python.
	you can also tweak the library search order via LD_LIBRARY_PATH

9.	/etc - the home of Linux configuration files.
	Text-based config files here control everything from networking to authentication services.


10.	For user data, /home stores documents, media and projects 

11.	While administrators have the exclusive /root folder.

12.	Fast-changing data like logs and caches live under /var.
	It is always buzzing with activity.

	We care about /var/log in particular to inspect 
	hardware events,
	security issues,
	performance problems

13.	/run contains volatile run-time info like 
	systemd details, 
	user sessions and 
	logging daemons.

	System services use /run for ongoing communication via sockets and lock files(mysql.sock)
	For example, mysql.sock might be crucial for database access.

14.	Finally, we come to the interconnected /proc and /sys virtual filesystems for Linux experts. (Virtual Filesystem)

	/proc opens communication channels to inspect overall OS state - we can check high-level metrics
	via cpuinfo, view filesystem mounts, and dive deeper with tools like lsof, strace and pmap.
		CPU Information
		Filesystem Mounts

	/sys exposes lower-level kernel and hardware objects, allowing granular monitoring and
	configuration of components like devices, modules, network stack via virtual files.
		-------------
		network stack
		-------------
		Socket Layer
		TCP Stack
		Netfilter
		Traffic Control (TC)
		Network Interface
		
15.	/proc (OS state) + /sys (Kernel and Hardware Objects) -> Combined, they provide complete system observability
	spanning high level metrics to low level component interactions.
	
	With /proc oriented towards process/runtime statistics and /sys providing component/hardware access,
	these inspection points are useful for performance tuning and forensic triage.


16.	You now have a roadmap to freely access critical Linux filesystem resources.
	Armed with this knowledge, you're ready to take full command.





/bin
	mount
	ls
	cd
/usr
	/bin
	/local
		/bin	
	/lib	
/sbin
/lib
/etc
	fstab
	ssh_config
/home
/root
/var
	/log	
/run
/proc
/sys




===============================================================================
The Fetch-Execute Cycle: What's Your Computer Actually Doing?	||	(9 minutes)
===============================================================================
	https://www.youtube.com/watch?v=Z5JC9Ve1sfI

	2.	The original "Prince of Persia" game was completely programmed in assembly.
		That is almost unbelievable to me:
		painstakingly figuring out each pixel of animation and encoding it into something that the computer
		almost understands directly.
		Programming like that is complex, and hard,
		and prone to the sort of human error that introduces massive security problems.
		It is difficult to code and difficult to debug.
		So rather than dealing with the messiness,
		or, well, the pristine logic of machine code,
		higher-level languages were developed as an intermediary step.
		Those languages handle all of that memory reading and writing for us,
		so all we need to focus on is what we want the computer to do.

	1.	Every modern computer, when you get right down to the bare metal,
		is doing basically the same sort of thing.
		I’ve said before that computers are just overgrown calculators,
		but how do you go from a simple calculator to playing video games,
		sending stuff over the internet,
		or even decompressing and displaying the millions of pixels in this video?
		In short, what’s your computer actually doing?
		Behind me is a scaled-up version of a computer,
		but we’re going to go much, much simpler.
		If you take apart your phone or PC,
		somewhere in the heart of it will a Central Processing Unit, or CPU,
		connected to all the other devices that make it work.

	3.	In theory, it can be but at this level,
		these instructions are just encoded in raw binary data,
		which is basically unreadable for humans.
		So we can convert that base 2 binary to base 16, hexadecimal,
		at that level we call it machine code.
		The next step up from that is a symbolic language called Assembly, which is a bit more readable,
		but it’s still close to working at that bare metal.
		.
		.
		So rather than dealing with the messiness,
		or, well, the pristine logic of machine code,
		higher-level languages were developed as an intermediary step.
		Those languages handle all of that memory reading and writing for us,
		so all we need to focus on is what we want the computer to do.

















--------------------------------------------------------
More details of wikistats , API at the end of this file.
--------------------------------------------------------

 ========================
||	===================	||
||	<==> wikistats <==>	||
||	===================	||
 ========================

1.	https://wikistats.wmcloud.org/display.php?t=wp

2.	https://wikistats.wmcloud.org/display.php

invalid project key or still needs to be created.

wp (wikipedias)
wt (wiktionaries)
ws (wikisources)
mw (mediawikis)
wi (wikia)
wx (wmspecials)
un (uncyclomedias)
wn (wikinews)
mt (metapedias)
wb (wikibooks)
wq (wikiquotes)
et (editthis)
si (wikisite)
sw (shoutwiki)
wr (wikitravel)
ne (neoseeker)
wv (wikiversity)
sc (scoutwiki)
wf (wikifur)
an (anarchopedias)
w3 (w3c)
ga (gamepedias)
sf (sourceforge)

3. 	Replace t= to_any_value_from_2. in URL (https://wikistats.wmcloud.org/display.php?t=wp)
	So you get the stats of wikipedias(wp) or wiktionaries(wt) or wikisources(ws), ....

API
---
https://www.mediawiki.org/wiki/API


API:Client code
---------------
https://www.mediawiki.org/wiki/API:Client_code
	
	JAVA
	
	 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	|			Name			|							Description								|		Last release		|		Release date		|		Last activity	|
	|---------------------------|-------------------------------------------------------------------|---------------------------|---------------------------|-----------------------|
	| JavaWikiBotFramework		|	A library to retrieve data from and maintain MediaWiki-based 	|			4.0.0			|	13 September 2016		|	15 February 2019	|
	|							|	wikis such as Wikipedia.										|							|							|						|
	|---------------------------|-------------------------------------------------------------------|---------------------------|---------------------------|-----------------------|
	|		jwiki				|	A library for effortlessly interacting with Wikipedia/MediaWiki.|			1.8.0			|	14 April 2022			|	6 May 2020			|
	|---------------------------|-------------------------------------------------------------------|---------------------------|---------------------------|-----------------------|
	|		Bliki Engine		|	Can convert wikicode to HTML, DocBook or PDF. 					|							|							|	27 April 2019		|
	|							|	Has a helper library for API calls.								|							|							|						|
	 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------








====================================================================================================================
Things I didn't mention in my earlier post 
"Most efficient algorithms in the history" 
	https://github.com/yathvi/BigInteger
	or
	https://www.linkedin.com/posts/yathvi_most-efficient-algorithms-in-the-history-activity-7095165839137509376-7vGG
====================================================================================================================

	1.	Radix in BigInteger
	
		public BigInteger(String val, int radix) {
		int cursor = 0, numDigits;
		final int len = val.length();

		if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)
			throw new NumberFormatException("Radix out of range");
		if (len == 0)
			throw new NumberFormatException("Zero length BigInteger");
			
		Character.MIN_RADIX = 2;
		Character.MAX_RADIX = 36;
	
		Radix is the parameter that specifies the number system to be used.
		For example, binary = 2, octal = 8, hexadecimal = 16, etc.
		
		
		2	->	01
		3	->	012
		4	->	0123
		5	->	01234
		6	->	012345
		7	->	0123456
		8	->	01234567
		9	->	012345678
		10	->	0123456789
		11	->	0123456789A
		12	->	0123456789AB
		13	->	0123456789ABC
		14	->	0123456789ABCD
		15	->	0123456789ABCDE
		16	->	0123456789ABCDEF
		17	->	0123456789ABCDEFG
		18	->	0123456789ABCDEFGH
		19	->	0123456789ABCDEFGHI
		20	->	0123456789ABCDEFGHIJ
		21	->	0123456789ABCDEFGHIJK
		22	->	0123456789ABCDEFGHIJKL
		23	->	0123456789ABCDEFGHIJKLM
		24	->	0123456789ABCDEFGHIJKLMN
		25	->	0123456789ABCDEFGHIJKLMNO
		26	->	0123456789ABCDEFGHIJKLMNOP
		27	->	0123456789ABCDEFGHIJKLMNOPQ
		28	->	0123456789ABCDEFGHIJKLMNOPQR
		29	->	0123456789ABCDEFGHIJKLMNOPQRS
		30	->	0123456789ABCDEFGHIJKLMNOPQRST
		31	->	0123456789ABCDEFGHIJKLMNOPQRSTU
		32	->	0123456789ABCDEFGHIJKLMNOPQRSTUV
		33	->	0123456789ABCDEFGHIJKLMNOPQRSTUVW
		34	->	0123456789ABCDEFGHIJKLMNOPQRSTUVWX
		35	->	0123456789ABCDEFGHIJKLMNOPQRSTUVWXY
		36	->	0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
		
	2.	Previous Post:	Its truly amazing how your smartphone can take images composed of millions of pixels and then perform calculations on every eight by eight block of pixels compressing all that data in to just a couple dozen numbers and then turning around and uncompressing the image faster than it takes you to swipe your finger across the screen.
		
		But Revolving Satellites take some/more time which include factors like capturing Resolution (km/px), Altitude (km; mi), Orbital period.
		
		
		Animation of Dawn's trajectory around 4 Vesta from July 15, 2011, to September 10, 2012
			https://en.wikipedia.org/wiki/Dawn_(spacecraft)#/media/File:Animation_of_Dawn_trajectory_around_4_Vesta.gif
			
		Animation of Dawn's trajectory around Ceres from February 1, 2015, to February 1, 2025
			https://en.wikipedia.org/wiki/Dawn_(spacecraft)#/media/File:Animation_of_Dawn_trajectory_around_Ceres.gif
			
			Dates	<-->	Altitude(km; mi)	<-->	Orbital period	<-->	Resolution(km/px)
		
		High-resolution image
			https://en.wikipedia.org/wiki/Dawn_(spacecraft)#/media/File:PIA21906-Ceres-DwarfPlanet-HighResolution-Dawn-20170920.jpg

		Dawn (spacecraft)
			https://en.wikipedia.org/wiki/Dawn_(spacecraft)


Frame rate
----------
https://en.wikipedia.org/wiki/Frame_rate

Frame rate (commonly expressed in frames per second or FPS) is typically the frequency (rate) at which consecutive images (frames) are captured or displayed.
This definition applies to film and video cameras, computer animation, and motion capture systems. In these contexts, frame rate may be used interchangeably with frame frequency and refresh rate, which are expressed in hertz.
Additionally, in the context of computer graphics performance, FPS is the rate at which a system, particularly a GPU, is able to generate frames, and refresh rate is the frequency at which a display shows completed frames.
In electronic camera specifications frame rate refers to the maximum possible rate frames could be captured, but in practice, other settings (such as exposure time) may reduce the actual frequency to a lower number than the frame rate.

	Modern video standards
	----------------------
As of 2021, video transmission standards in North America, Japan, and South Korea are still based on 60  / 1.001 ≈ 59.94 images per second.
Two sizes of images are typically used: 1920×1080 ("1080i/p") and 1280×720 ("720p").

This confusion was industry-wide in the early days of digital video software, with much software being written incorrectly, the developers believing that only 29.97 images were expected each second, which was incorrect.
While it was true that each picture element was polled and sent only 29.97 times per second, the pixel location immediately below that one was polled 1/60 of a second later, part of a completely separate image for the next 1/60-second frame.

Newer video standards support 120, 240, or 300 frames per second, so frames can be evenly sampled for standard frame rates such as 24, 48 and 60 FPS film or 25, 30, 50 or 60 FPS video.
Of course these higher frame rates may also be displayed at their native rates.












































================================
<==>	PARALLEL COMPUTING	<==>
================================

https://en.wikipedia.org/wiki/Template:Parallel_computing
or
Check 'External links' at the End of Webpage	-->		https://en.wikipedia.org/wiki/Parallel_computing

 ------------------------------------------------------------------------------------------------------- 
|																										|
|	V.T.E								PARALLEL COMPUTING										[hide]	|
|																										|
|-------------------------------------------------------------------------------------------------------|
|				|	Distributed computing , Parallel computing , Massively parallel						|
|	General		|	Cloud computing , High-performance computing , Multiprocessing , Manycore processor	|
|				|																						|
|				|	GPGPU (General-purpose computing on graphics processing units or less often GPGP)	|
|				|	Computer network , Systolic array													|
|---------------|---------------------------------------------------------------------------------------|
|				|																						|
|	Levels		|	Bit , Instruction , Thread , Task , Data , Memory , Loop , Pipeline					|
|				|																						|
|---------------|---------------------------------------------------------------------------------------|
|				|	Temporal , Simultaneous (SMT) , Speculative (SpMT) , Preemptive						|
| Multithreading|	Cooperative , Clustered multi-thread (CMT) , Hardware scout							|
|				|																						|
|---------------|---------------------------------------------------------------------------------------|
|				|	PRAM model , PEM model , Analysis of parallel algorithms , Amdahl's law 			|
|	Theory		|	Gustafson's law , Cost efficiency , Karp–Flatt metric , Slowdown , Speedup			|
|				|																						|
|---------------|---------------------------------------------------------------------------------------|
|				|																						|
|	Elements	|	Process , Thread , Fiber , Instruction window , Array								|
|				|																						|
|---------------|---------------------------------------------------------------------------------------|
|				|	Multiprocessing , Memory coherence , Cache coherence , Cache invalidation 			|
| Coordination	|	Barrier , Synchronization , Application checkpointing								|
|				|																						|
|---------------|---------------------------------------------------------------------------------------|
|				|	Stream processing , Dataflow programming , Models (Implicit parallelism 			|
| Programming	|	Explicit parallelism , Concurrency) Non-blocking algorithm							|
|				|																						|
|---------------|---------------------------------------------------------------------------------------|
|				|	Flynn's taxonomy																	|
|	Hardware	|	-	SISD (Single instruction stream, single data stream)							|
|				|	-	SIMD (Single instruction, multiple data)										|
|				|		-	Array processing (SIMT (Single instruction, multiple threads))				|
|				|		-	Pipelined processing														|
|				|		-	Associative processing														|
|				|	-	MISD (Multiple instruction, single data)										|
|				|	-	MIMD (Multiple instruction, multiple data)										|
|				|																						|
|				|	Dataflow architecture , Pipelined processor , Superscalar processor					|
|				|	Vector processor																	|
|				|																						|
|				|	Multiprocessor 																		|
|				|	-	Symmetric 																		|
|				|	-	Asymmetric																		|
|				|																						|
|				|	Memory																				|
|				|	-	Shared																			|
|				|	-	Distributed																		|
|				|	-	Distributed Shared																|
|				|	-	UMA (Uniform memory access)														|
|				|	-	NUMA (Non-uniform memory access)												|
|				|	-	COMA (Cache-only memory architecture)											|
|				|																						|
|				|	Massively parallel computer , Computer cluster (Beowulf cluster) 					|
|				|	Grid computer , Hardware acceleration												|
|				|																						|
|---------------|---------------------------------------------------------------------------------------|
|				|	Ateji PX , Boost , Chapel , HPX (High Performance ParalleX) , Charm++				|
|				|																						|
|	APIs		|	Cilk (Cilk, Cilk++, Cilk Plus, OpenCilk) , Coarray Fortran							|
|				|																						|
|				|	CUDA (Compute Unified Device Architecture)											|
|				|																						|
|				|	Dryad , C++ AMP (C++ Accelerated Massive Parallelism) , Global Arrays				|
|				|																						|
|				|	Global Arrays , GPUOpen , MPI (Message Passing Interface)							|
|				|																						|
|				|	OpenMP (Open Multi-Processing) , OpenCL (Open Computing Language)					|
|				|																						|
|				|	OpenHMPP (HMPP for Hybrid Multicore Parallel Programming)							|
|				|																						|
|				|	OpenACC (open accelerators) , Parallel Extensions , Parallel Virtual Machine (PVM)	|
|				|																						|
|				|	pthreads (POSIX Threads) , RaftLib , ROCm , Unified Parallel C (UPC)				|
|				|																						|
|				|	TBB (oneAPI Threading Building Blocks)												|
|				|																						|
|				|	ZPL (short for Z-level Programming Language)										|
|				|																						|
|---------------|---------------------------------------------------------------------------------------|
|				|	Automatic parallelization , Deadlock , Deterministic algorithm 						|
|	Problems	|	Embarrassingly parallel , Parallel slowdown , Race condition , Software lockout 	|
|				|	Scalability , Starvation															|
 -------------------------------------------------------------------------------------------------------



====================================
<==>	CONCURRENT COMPUTING	<==>
====================================

https://en.wikipedia.org/wiki/Template:Concurrent_computing
or
Check 'External links' at the End of Webpage	-->		https://en.wikipedia.org/wiki/Concurrent_computing

 ----------------------------------------------------------------------------------------------------------- 
|																											|
|	V.T.E								CONCURRENT COMPUTING										[hide]	|
|																											|
|-----------------------------------------------------------------------------------------------------------|
|					|																						|
|	General			|	Concurrency , Concurrency control , Linearizability									|
|					|																						|
|-------------------|---------------------------------------------------------------------------------------|
|					|																						|
| Process calculi	|	CSP (Communicating sequential processes) 											|
|					|	CCS (Calculus of communicating systems)												|
|					|	ASP (Algebra of communicating processes)											|
|					|	LOTOS (Language Of Temporal Ordering Specification)									|
|					|	π-calculus (or pi-calculus)															|
|					|	Ambient calculus 																	|
|					|	API-Calculus 																		|
|					|	PEPA (Performance Evaluation Process Algebra)										|
|					|	Join-calculus																		|
|-------------------|---------------------------------------------------------------------------------------|
|					|	ABA problem , Cigarette smokers problem , Deadlock , Dining philosophers problem 	|
| Classic problems	|	Producer–consumer problem , Race condition , Readers–writers problem				|
|					|	Sleeping barber problem																|
|					|																						|
 -----------------------------------------------------------------------------------------------------------



====================================
<==>	PROGRAMMING PARADIGM	<==>
====================================

https://en.wikipedia.org/wiki/Template:Types_of_programming_languages
or
Check 'External links' at the End of Webpage	-->		https://en.wikipedia.org/wiki/Programming_paradigm

 ---------------------------------------------------------------------------------------------------------------
|																												|
|	V.T.E								TYPES OF PROGRAMMING LANGUAGES									[hide]	|
|																												|
|---------------------------------------------------------------------------------------------------------------|
|					|	Actor-based , Array , Aspect-oriented , Class-based , Concatenative						|
|					|	Concurrent , Dataflow , Declarative , Differentiable , Domain-specific					|
|	  Paradigm		|	Dynamic , Esoteric , Event-driven , Extensible , Functional , Imperative				|
|					|	Logic , Macro , Metaprogramming , Object-based , Object-oriented						|
|					|	Pipeline , Procedural , Prototype-based , Reflective Rule-based							|
|					|	Scripting , Stack-oriented , Synchronous , Tactile , Template							|
|-------------------|-------------------------------------------------------------------------------------------|
|					|																							|
| 					|	Machine									 												|
|					|	Assembly																				|
|					|	Compiled																				|
|		Level		|	Interpreted																				|
|					|	Low-level																				|
|					|	High-level 																				|
|					|	Very high-level (VHLL) 																	|
|					|																							|
|-------------------|-------------------------------------------------------------------------------------------|
|					|	First (first-generation programming language (1GL))		-->	belongs to the low-level	|
| 					|	Second (second-generation programming language (2GL))	-->	belongs to the low-level	|
| 	Generation		|	Third (third-generation programming language (3GL))		--> is a high-level				|
|					|	Fourth (fourth-generation programming language (4GL))	-->	is a high-level				|
|					|	Fifth (fifth-generation programming language (5GL))		-->	is a high-level				|
|					|																							|
|-------------------|-------------------------------------------------------------------------------------------|
|					|																							|
|	Related			|	Non-English-based , Visual																|
|					|																							|
 ---------------------------------------------------------------------------------------------------------------




https://en.wikipedia.org/wiki/Template:Programming_paradigms_navbox
or
Check 'External links' at the End of Webpage	-->		https://en.wikipedia.org/wiki/Programming_paradigm

 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|																																															|
|	V.T.E																Programming paradigms (Comparison by language)																[hide]	|
|																																															|
|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|					|									|	Jackson structures , Block-structured , Modular , Non-structured , Procedural Programming in the large and in the small			|
|					|	Structured						|	Design by contract , Invariant-based , Nested function																			|
|	Imperative		|-----------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|
|					|	Object-oriented					|	Agent , Class-based , Prototype-based , Object-based , Immutable object , Persistent , Uniform Function Call Syntax				|
|					|	(Comparison, List)				|																																	|
|-------------------|-----------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|
|					|	Functional						|	Recursive , Anonymous function (Partial application) , Higher-order , Purely functional , Total , Strict						|
|					|	(Comparison)					|	GADTs(Generalized algebraic data type) , Dependent types , Functional logic , Point-free style , Expression-oriented			|
|					|									|	Applicative, Concatenative , Function-level, Value-level																		|
|	  				|-----------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|
|	Declarative		|	Dataflow						|	Flow-based , Reactive (Functional reactive) , Signals , Streams , Synchronous													|
|					|-----------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|
|					|	Logic							|	Abductive logic , Answer set , Constraint (Constraint logic) , Inductive logic , Nondeterministic , Ontology					|
|					|									|	Probabilistic logic , Query																										|
|					|-----------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|
|					|	DSL (domain-specific language)	|	Algebraic modeling , Array , Automata-based (Action) , Command (Spacecraft) , Differentiable , End-user							|
|					|									|	Grammar-oriented , Interface description , Language-oriented , List comprehension , Low-code , Modeling , Natural language		|
|					|									|	Non-English-based , Page description , Pipes and filters , Probabilistic , Quantum , Scientific , Scripting , Set-theoretic		|
|					|									|	Simulation , Stack-based , System , Tactile , Templating , Transformation (Graph rewriting, Production, Pattern) , Visual		|
|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|					|																																										|
|					|	Actor-based 																																						|
|					|	Automatic mutual exclusion 																																			|
|					|	Choreographic programming 																																			|
|					|	Concurrent logic (Concurrent constraint logic) 																														|
|					|	Concurrent OO																																						|
|	Concurrent/		|	Macroprogramming																																					|
|	Distributed/	|	Multitier programming																																				|
|	Parallel		|	Organic computing																																					|
|					|	Parallel programming models																																			|
|					|	Partitioned global address space 																																	|
|					|	Process-oriented																																					|
|					|	Relativistic programming 																																			|
|					|	Service-oriented 																																					|
|					|	Structured concurrency																																				|
|					|																																										|
|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|	Metaprogramming	|	Attribute-oriented , Automatic (Inductive) , Dynamic , Extensible , Generic , Homoiconicity , Interactive , Macro (Hygienic) , Metalinguistic abstraction			|
|					|	Multi-stage , Program synthesis (Bayesian, Inferential, by demonstration, by example) , Reflective , Self-modifying code , Symbolic , Template						|
|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|					|	Aspects , Components , Data-driven , Data-oriented 																													|
|					|																																										|
|	Separation of 	|	Event-driven , Features , Intentional																																|
|	concerns  		|																																										|
|					|	Literate , Roles , Subjects																																			|
|					|																																										|
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


================================
<==>	Operating systems	<==>
================================
https://en.wikipedia.org/wiki/Operating_system

		 User
		|	/\
		|	|
		\/	|
	 Application
		|	/\
		|	|
		\/	|	
	Operating System
		|	/\
		|	|
		\/	|	
	  Hardware

	Common features
	---------------
	Process management
	Interrupts
	Memory management
	File system
	Device drivers
	Networking
	Security
	Input/output

	An operating system (OS) is system software that manages computer hardware and software resources, 
	and provides common services for computer programs.


	https://en.wikipedia.org/wiki/Template:Operating_systems


 -------------------------------------------------------------------------------------------------------
|																										|
|	V.T.E									Operating Systems									[hide]	|
|																										|
|-------------------------------------------------------------------------------------------------------|
|		General		|	Comparison , Forensic engineering , History , List 								|
|					|	Timeline , Usage share , User features comparison								|
|-------------------|-----------------------------------------------------------------------------------|
|		Variants	|	Disk operating system , Distributed operating system , Embedded operating system|
|					|	Hobbyist operating system , Just enough operating system						|
|					|	Mobile operating system , Network operating system								|
|					|	Object-oriented operating system , Real-time operating system					|
|					|	Supercomputer operating system													|
|-------------------|-----------------------------------------------------------------------------------|
|					|						|	Exokernel , Hybrid , Microkernel , Monolithic 			|
|					|	Architectures		|	Multikernel , vkernel , Rump kernel , Unikernel			|
|	  				|						|															|
|	Kernel			|-----------------------|-----------------------------------------------------------|
|					|						|	Device driver , Loadable kernel module					|
|					|	Components			|	User space and kernel space								|
|					|						|															|
|-------------------|-----------------------|-----------------------------------------------------------|
|					|	Concepts			|	Computer multitasking , (Cooperative, Preemptive)		|
|					|						|	Context switch											|
|					|						|	Interrupt , IPC , Process , Process control block		|
|	Process 		|						|	Real-time , Thread , Time-sharing						|
|	management		|-----------------------|-----------------------------------------------------------|
|					|	Scheduling			|	Fixed-priority preemptive , Multilevel feedback queue	|
|					|	Algorithms			|	Round-robin , Shortest job next							|
|					|						|															|
|-------------------|-----------------------------------------------------------------------------------|
|					|	Bus error , General protection fault , Memory paging							|
| Memory management,|	Memory protection , Protection ring , Segmentation fault						|
| resource			|	Virtual memory																	|
| protection		|																					|
|					|																					|
|-------------------|-----------------------------------------------------------------------------------|
| Storage access,	|	Boot loader , Defragmentation , Device file , File attribute					|
| file systems		|	Inode , Journal ,  Partition ,  Virtual file system								|
|	  				|	Virtual tape library															|
|-------------------|-----------------------------------------------------------------------------------|
|					|	API , Computer network , HAL													|
|					|	Live CD , Live USB																|
|	Supporting 		|	Shell (CLI , User interface)													|
|	concepts		|	PXE																				|
|					|																					|
 -------------------------------------------------------------------------------------------------------










List of operating systems
	https://en.wikipedia.org/wiki/List_of_operating_systems




===============
Cloud computing
===============
https://en.wikipedia.org/wiki/Cloud_computing

Cloud computing is the on-demand availability of computer system resources, especially data storage (cloud storage) and computing power, without direct active management by the user.
Large clouds often have functions distributed over multiple locations, each of which is a data center.
Cloud computing relies on sharing of resources to achieve coherence and typically uses a pay-as-you-go model,
which can help in reducing capital expenses but may also lead to unexpected operating expenses for users.

Cloud computing service models arranged as layers in a stack
------------------------------------------------------------
https://en.wikipedia.org/wiki/Cloud_computing#/media/File:Cloud_computing_service_models_(1).png

	 ---------------------------------------------------------------
	|				CLOUD CLIENTS									|
	|	Web browser, mobile app, thin client,						|
	|		IoT devices, machines, ...								|
	 ---------------------------------------------------------------
									/\
									||
									\/
	 ---------------------------------------------------------------
	|			CLOUD APPLICATION (SaaS)							|
	|	CRM, ERP, web conferencing, group chat						|
	|	email, analytics, virtual desktop							|
	|					games, ...									|
	|---------------------------------------------------------------|
	|		CLOUD PLATFORM (PaaS)				Resources more		|
	|	Application runtime, database			abstracted			|
	|	web server, developer services			(e.g. serverless)	|
	|	data lake, ...									/\			|
	|---------------------------------------------------||----------|
	|		CLOUD INFRASTRUCTURE (IaaS)					\/			|
	|	Virtual Machines, bare metal servers	Resource less		|
	|	storage, load balancers, networking		abstracted			|
	|	...															|
	|---------------------------------------------------------------|
	|			DEPLOYMENT MODEL									|
	|	Public cloud, hybrid cloud, multicloud, private cloud		|
	|																|
	 ---------------------------------------------------------------


https://en.wikipedia.org/wiki/Template:Cloud_computing
or
Check 'External links' at the End of Webpage	-->		https://en.wikipedia.org/wiki/Cloud_computing



 ----------------------------------------------------------------------------------------------------------- 
|																											|
|	V.T.E										CLOUD COMPUTING										[hide]	|
|																											|
|-----------------------------------------------------------------------------------------------------------|
|					|																						|
|					|	Content as a service , Data as a service , Desktop as a service						|
|					|																						|
|	Business Models	|	Function as a service , Infrastructure as a service 								|
|					|																						|
|					|	Integration platform as a service , Backend as a service , Network as a service		|
|					|																						|
|					|	Platform as a service , Security as a service , Software as a service				|
|					|																						|
|-------------------|---------------------------------------------------------------------------------------|
|					|																						|
|					|	Cloud database , Cloud-native computing , Cloud storage , Data centers				|
|					|																						|
|					|	Dew computing , Distributed file system for cloud , Hardware virtualization			|
|					|																						|
|	Technologies	|	Internet , Mobile cloud computing , Native cloud application , Networking			|
|					|																						|
|					|	Personal cloud , Security , Serverless computing , Structured storage				|
|					|																						|
|					|	Virtual appliance , Web APIs , Virtual private cloud								|
|					|																						|
|-------------------|---------------------------------------------------------------------------------------|
|					|																						|
|					|	Box , Dropbox , Google (Workspace , Drive) , HP Cloud (closed) , IBM Cloud			|
|					|																						|
|	Applications	|	Microsoft (Office 365 , OneDrive) , Nextcloud , Oracle Cloud , Owncloud				|
|					|																						|
|					|	Rackspace , Salesforce , Seafile , Workday , Zoho									|
|					|																						|
|-------------------|---------------------------------------------------------------------------------------|
|					|																						|
|					|	Alibaba Cloud , Amazon Web Services , AppScale , Box , CloudBolt , Cloud Foundry	|
|					|																						|
|					|	Cloud Foundry , Cocaine (PaaS) , Creatio , Engine Yard , Helion , GE Predix			|
|					|																						|
|	Platforms		|	Google App Engine , GreenQloud , Heroku , IBM Cloud , Inktank , Jelastic 			|
|					|																						|
|					|	Microsoft Azure , MindSphere , Netlify , Oracle Cloud , OutSystems , openQRM		|
|					|																						|
|					|	OpenShift , PythonAnywhere , RightScale , Scalr , Force.com , SAP Cloud Platform	|
|					|																						|
|					|	Splunk , Vercel , vCloud Air , WaveMaker											|
|					|																						|
|-------------------|---------------------------------------------------------------------------------------|
|					|																						|
|					|	Alibaba Cloud , Amazon Web Services ,  Abiquo Enterprise Edition , CloudStack 		|
|					|																						|
|					|	Citrix Cloud , Deft , DigitalOcean , EMC Atmos , Eucalyptus , Fujitsu 				|
|					|																						|
|					|	Google Cloud Platform , GreenButton , GreenQloud , IBM Cloud , iland , Joyent 		|
|					|																						|
|	Infrastructure	|	Linode , Lunacloud , Microsoft Azure , Mirantis , Netlify , Nimbula , Nimbus 		|
|					|																						|
|					|	OpenIO , OpenNebula , OpenStack , Oracle Cloud , OrionVM , Rackspace Cloud 			|
|					|																						|
|					|	Safe Swiss Cloud , Zadara , libvirt , libguestfs , OVirt , Virtual Machine Manager 	|
|					|																						|
|					|	Wakame-vdc , Vercel , Virtual Private Cloud OnDemand								|
|					|																						|
 ----------------------------------------------------------------------------------------------------------


See also
--------
Block-level storage
Browser-based computing
Category:Cloud computing providers
Category:Cloud platforms
Communication protocol
Communications system
Cloud broker
Cloud collaboration
Cloud-native computing
Cloud computing security
Cloud-computing comparison
Cloud management
Cloud research
Cloud robotics
Cloud gaming
Cloud storage
Cloudlet
Computer cluster
Cooperative storage cloud
Decentralized computing
Desktop virtualization
Dew computing
Directory
Distributed data store
Distributed database
Distributed computing
Distributed networking
Edge computing
Edge device
e-Science
File system
Clustered file system
Distributed file system
Distributed file system for cloud
Fog computing
Fog robotics
Green computing (environmentally sustainable computing)
Grid computing
In-memory database
In-memory processing
Internet of things
IoT security device
Knowledge as a service
Microservices
Mobile cloud computing
Multi-access edge computing
Peer-to-peer
Personal cloud
Robot as a service
As a service
Service-oriented architecture
Time-sharing
Ubiquitous computing
Virtual private cloud
Private cloud computing infrastructure





========================================================================
List of assigned /8 IPv4 address blocks
https://en.wikipedia.org/wiki/List_of_assigned_/8_IPv4_address_blocks
========================================================================
	
List of reserved /8 blocks
--------------------------
0.0.0.0/8					IANA – Local Identification
10.0.0.0/8					IANA – Private Use
127.0.0.0/8					IANA – Loopback
224.0.0.0/8–239.0.0.0/8		Multicast
240.0.0.0/8–255.0.0.0/8		Future Use

List of assigned /8 blocks to commercial organisations
------------------------------------------------------
12.0.0.0/8	AT&T Services
17.0.0.0/8	Apple Inc.
19.0.0.0/8	Ford Motor Company
38.0.0.0/8	Cogent Communications
48.0.0.0/8	Prudential Securities Inc.
53.0.0.0/8	Mercedes-Benz Group AG
73.0.0.0/8	Comcast Corporation

List of assigned /8 blocks to the United States Department of Defense
---------------------------------------------------------------------
6.0.0.0/8	Army Information Systems Center
7.0.0.0/8	DoD Network Information Center
11.0.0.0/8	DoD Intel Information Systems
21.0.0.0/8	DDN-RVN
22.0.0.0/8	Defense Information Systems Agency
26.0.0.0/8	Defense Information Systems Agency
28.0.0.0/8	DSI-North
29.0.0.0/8	Defense Information Systems Agency
30.0.0.0/8	Defense Information Systems Agency
33.0.0.0/8	DLA Systems Automation Center
55.0.0.0/8	DoD Network Information Center
214.0.0.0/8	US-DOD
215.0.0.0/8	US-DOD

List of assigned /8 blocks to the regional Internet registries
--------------------------------------------------------------
AFRINIC		African Network Information Centre 							is the regional Internet registry (RIR) for Africa.
APNIC		Asia Pacific Network Information Centre 					is the regional Internet address registry (RIR) for the Asia-Pacific region.
ARIN		American Registry for Internet Numbers 						is the regional Internet registry for the United States, Canada, and many Caribbean and North Atlantic islands. 
LACNIC		Latin America and Caribbean Network Information Centre		is the regional Internet registry for the Latin American and Caribbean regions.
RIPE NCC	Réseaux IP Européens Network Coordination Centre 			is the regional Internet registry (RIR) for Europe, the Middle East and parts of Central Asia.
MIX

APNIC
126.0.0.0/8		SOFTBANK Corp.
133.0.0.0/8		JPNIC (Japan Network Information Center)
202.0.0.0/8		Various registries (Maintained by APNIC). 202.123.0.0/19 transferred to AFRINIC
203.0.0.0/8		203.0.113.0/24 reserved for TEST-NET-3 (RFC 5737).

ARIN
3.0.0.0/8		Amazon.com. Formerly General Electric Company.
9.0.0.0/8		IBM except for 9.9.9.0/24, which is Quad9.
15.0.0.0/8		Various registries (maintained by ARIN). Formerly Hewlett-Packard Company. HP Inc still uses a portion of the block.
44.0.0.0/8		Various registries (Maintained by ARIN). Originally Amateur Radio Digital Communications. 44.192.0.0/10 was sold to Amazon on 2019-07-18.
100.0.0.0/8		100.64.0.0/10 reserved for Carrier-grade NAT (detailed in RFC 6598).
128.0.0.0/8		Various registries (Maintained by ARIN). 128.0.0.0 is the start address of formerly "Class B".
169.0.0.0/8		Various registries (Maintained by ARIN). 169.254.0.0/16 (169.254.0.0–169.254.255.255) reserved for link-local addressing (RFC 6890).
172.0.0.0/8		Various registries (Maintained by ARIN). 172.16.0.0/12 (172.16.0.0–172.31.255.255) reserved for private networks (RFC 1918).
192.0.0.0/8		Various registries (Maintained by ARIN). 192.0.2.0/24 reserved for TEST-NET-1 (RFC 5737). 192.88.99.0/24 reserved for 6to4 Relay Anycast (RFC 3068). 192.168.0.0/16 (192.168.0.0–192.168.255.255) reserved for private networks (RFC 1918). 192.0.0.0/24 reserved for IANA IPv4 Special Purpose Address Registry (RFC 5736). 192.0.0.0 is the start address of formerly "Class C".
198.0.0.0/8		Various registries (Maintained by ARIN). 198.18.0.0/15 reserved for Network Interconnect Device Benchmark Testing (RFC 6890). 198.51.100.0/24 reserved for TEST-NET-2 (RFC 5737).

RIPE NCC
25.0.0.0/8		As of 2005-08-23 entire block assigned to UK Ministry of Defence
90.0.0.0/8		Except for 90.0.0.0/9, which is Orange



The above list (List of assigned /8 IPv4 address blocks) is same as below list (IANA IPv4 Address Space Registry)



============================================================================
IANA IPv4 Address Space Registry
https://www.iana.org/assignments/ipv4-address-space/ipv4-address-space.xhtml
============================================================================
	
Footnotes
---------
0.0.0.0/8 reserved for self-identification [RFC791]
0.0.0.0/32 reserved for self-identification [RFC1122]
10.0.0.0/8 Reserved for Private-Use Networks [RFC1918]
This was reserved for Public Data Networks [RFC1356]
100.64.0.0/10 reserved for Shared Address Space [RFC6598]
127.0.0.0/8 reserved for Loopback [RFC1122]
169.254.0.0/16 reserved for Link Local [RFC3927]
172.16.0.0/12 reserved for Private-Use Networks [RFC1918]
192.0.2.0/24  reserved for TEST-NET-1 [RFC5737]
192.88.99.0/24 reserved for 6to4 Relay Anycast [RFC7526]
192.88.99.2/32 reserved for 6a44 Relay Anycast [RFC6751] (possibly collocated with 6to4 Relay at 192.88.99.1/32 - see [RFC7526])
192.168.0.0/16 reserved for Private-Use Networks [RFC1918]
192.0.0.0/24 reserved for IANA IPv4 Special Purpose Address Registry [RFC5736]
198.18.0.0/15 reserved for Network Interconnect Device Benchmark Testing [RFC2544]
198.51.100.0/24 reserved for TEST-NET-2 [RFC5737]
203.0.113.0/24 reserved for TEST-NET-3 [RFC5737]
Multicast (formerly "Class D") [RFC5771]
Unicast-Prefix-Based IPv4 Multicast Addresses [RFC6034]
Administratively Scoped IP Multicast [RFC2365]
Reserved for future use (formerly "Class E") [RFC1112]
255.255.255.255 is reserved for "limited broadcast" destination address [RFC919] and [RFC922]
	


===================================================
Reserved IP addresses
https://en.wikipedia.org/wiki/Reserved_IP_addresses
===================================================

Address block		Address range					Number of addresses		Scope				Description
0.0.0.0/8			0.0.0.0–0.255.255.255			16777216				Software			Current (local, "this") network
10.0.0.0/8			10.0.0.0–10.255.255.255			16777216				Private network		Used for local communications within a private network
100.64.0.0/10		100.64.0.0–100.127.255.255		4194304					Private network		Shared address space for communications between a service provider and its subscribers when using a carrier-grade NAT
127.0.0.0/8			127.0.0.0–127.255.255.255		16777216				Host				Used for loopback addresses to the local host
169.254.0.0/16		169.254.0.0–169.254.255.255		65536					Subnet				Used for link-local addresses between two hosts on a single link when no IP address is otherwise specified, such as would have normally been retrieved from a DHCP server
172.16.0.0/12		172.16.0.0–172.31.255.255		1048576					Private network		Used for local communications within a private network
192.0.0.0/24		192.0.0.0–192.0.0.255			256						Private network		IETF Protocol Assignments, DS-Lite (/29)
192.0.2.0/24		192.0.2.0–192.0.2.255			256						Documentation		Assigned as TEST-NET-1, documentation and examples
192.88.99.0/24		192.88.99.0–192.88.99.255		256						Internet			Reserved. Formerly used for IPv6 to IPv4 relay (included IPv6 address block 2002::/16).
192.168.0.0/16		192.168.0.0–192.168.255.255		65536					Private network		Used for local communications within a private network
198.18.0.0/15		198.18.0.0–198.19.255.255		131072					Private network		Used for benchmark testing of inter-network communications between two separate subnets
198.51.100.0/24		198.51.100.0–198.51.100.255		256						Documentation		Assigned as TEST-NET-2, documentation and examples
203.0.113.0/24		203.0.113.0–203.0.113.255		256						Documentation		Assigned as TEST-NET-3, documentation and examples
224.0.0.0/4			224.0.0.0–239.255.255.255		268435456				Internet			In use for multicast (former Class D network)
233.252.0.0/24		233.252.0.0-233.252.0.255		256						Documentation		Assigned as MCAST-TEST-NET, documentation and examples (Note that this is part of the above multicast space.)
240.0.0.0/4			240.0.0.0–255.255.255.254		268435455				Internet			Reserved for future use (former Class E network)
255.255.255.255/32	255.255.255.255					1						Subnet				Reserved for the "limited broadcast" destination address










================================================================================
The Ultimate Guide to Subnetting – plus 10 Best Subnet Calculators & Cheat Sheet
https://www.comparitech.com/net-admin/subnetting-guide/
================================================================================	
------------------
Cheat Sheet Series
------------------
Classful IPv4 Addresses:

Class A		0.0.0.0 – 127.255.255.255
Class B		128.0.0.0 – 191.255.255.255
Class C		192.0.0.0 – 223.255.255.255
Class D		224.0.0.0 – 239.255.255.255
Class E		240.0.0.0 – 255.255.255.255

Private IPv4 Addresses:

10.0.0.0 – 10.255.255.255
172.16.0.0 – 172.31.255.255
192.168.0.0 – 192.168.255.255

Special IPv4 Addresses:

Local Host 	127.0.0.0 – 127.255.255.255
APIPA 		169.254.0.0 – 169.254.255.255

Bogon IPv4 Addresses:

This network				0.0.0.0/8
Private IPv4 Block			10.0.0.0/8
Carrier-grade NAT			100.64.0.0/10
Loopback					127.0.0.0/8
Name collision occurrence	127.0.53.53
Link local					169.254.0.0/16
Private IPv4 Block			172.16.0.0/12
IETF Assignments			192.0.0.0/24
TEST-NET-1					192.0.2.0/24
Private IPv4 Block			192.168.0.0/16
Benchmark testing			198.18.0.0/15
TEST-NET-2					198.51.100.0/24
TEST-NET-3					203.0.113.0/24
Multicast					224.0.0.0/4
Reserved					240.0.0.0/4
Limited broadcast			255.255.255.255/32
	
	
	
	
Prefix Length Slash Notation (CIDR)		Addresses (Total IPs)		Max Available Hosts (Usable IPs)		Subnet Length		Subnet Mask
/32										1							1										0					255.255.255.255
/31										2							0										1					255.255.255.254
/30										4							2										2					255.255.255.252
/29										8							6										3					255.255.255.248
/28										16							14										4					255.255.255.240
/27										32							30										5					255.255.255.224
/26										64							62										6					255.255.255.192
/25										128							126										7					255.255.255.128
/24										256							254										8					255.255.255.0
/23										512							510										9					255.255.254.0
/22										1024						1022									10					255.255.252.0
/21										2048						2046									11					255.255.248.0
/20										4096						4094									12					255.255.240.0
/19										8192						8190									13					255.255.224.0
/18										16384						16382									14					255.255.192.0
/17										32768						32766									15					255.255.128.0
/16										65536						65534									16					255.255.0.0
/15										131072						131070									17					255.254.0.0
/14										262144						262142									18					255.252.0.0
/13										524288						524286									19					255.248.0.0
/12										1048576						1048574									20					255.240.0.0
/11										2097152						2097150									21					255.224.0.0
/10										4194304						4194302									22					255.192.0.0
/9										8388608						8388606									23					255.128.0.0
/8										16777216					16777214								24					255.0.0.0
/7										33554432					33554430								25					254.0.0.0
/6										67108864					67108862								26					252.0.0.0
/5										134217728					134217726								27					248.0.0.0
/4										268435456					268435454								28					240.0.0.0
/3										536870912					536870910								29					224.0.0.0
/2										1073741824					1073741822								30					192.0.0.0
/1										2147483648					2147483646								31					128.0.0.0
/0										4294967296					4294967294								32					0.0.0.0
	

=============================================================================================
Neso Academy ::	100th video in 'Introduction to Computer Networks' Playlist
Classful Addressing (Part 1)
	https://www.youtube.com/watch?v=VkgfyLf1raY&list=PLBlnK6fEyqRgMCUAG0XRw78UA8qnv6jEx&index=100
	or
	https://www.youtube.com/watch?v=VkgfyLf1raY
=============================================================================================

Address Class		1st Octet range in decimal		1st Octet bits			Network (N) & Host(H) portion		Default mask(Decimal)		Number of possible networks and hosts per Network
A					0-127							00000000-01111111		N.H.H.H								255.0.0.0					128 Nets (2 pow 7)		16777214 hosts ((2 pow 24) - 2)
B					128-191							10000000-10111111		N.N.H.H								255.255.0.0					16384 Nets (2 pow 14)	65534 hosts ((2 pow 16) - 2)
C					192-223							11000000-11011111		N.N.N.H								255.255.255.0				209150 Nets (2 pow 21)	254 hosts ((2 pow 8) - 2)
D					224-239							11100000-11101111		NA (Multicast)
E					240-255							11110000-11111111		NA (Experimental)

FIRST ADDRESS = NETWORK ADDRESS
LAST ADDRESS = BROADCAST ADDRESS



========================================================================
<==>	Service Name and Transport Protocol Port Number Registry	<==>
========================================================================
https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml

/etc # cat /etc/services
# Network services, Internet style
#
# Updated from https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml .
#
# New ports will be added on request if they have been officially assigned
# by IANA and used in the real-world or are needed by a debian package.
# If you need a huge list of used numbers please install the nmap package.


IANA IPv4 Special-Purpose Address Registry
	https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml



IPv4 - Reserved Addresses
	https://www.tutorialspoint.com/ipv4/ipv4_reserved_addresses.htm

	Link-local Addresses

		In case a host is not able to acquire an IP address from the DHCP server and it has not been assigned any IP address manually, 
		the host can assign itself an IP address from a range of reserved Link-local addresses.
		Link local address ranges from 169.254.0.0 -- 169.254.255.255.
	

IP range of APIPA
	169.254.0.1 to 169.254.255.254


Internet Protocol version 4
	https://en.wikipedia.org/wiki/Internet_Protocol_version_4


================================================================================================
<==>	Service Name and Transport Protocol Port Number Registry	-->		Text Format		<==>
================================================================================================
https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt


================================================================================================
<==>	Service Name and Transport Protocol Port Number Registry	-->		XML Format		<==>
================================================================================================
https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xml


================================================================================================
<==>	Service Name and Transport Protocol Port Number Registry	-->		CSV Format		<==>
================================================================================================

Available Formats
	
	CSV		XML 	HTML 	Plain text

Click on CSV to download the service-names-port-numbers.csv file which is around 1.1 MB


 ========================
||	Transport Protocol	||
 ========================

(Blank)				1453
dccp				11
sctp				92
tcp					6559
udp					6329



====================================================
<==>	Comparison of file transfer protocols	<==>
====================================================
https://en.wikipedia.org/wiki/Comparison_of_file_transfer_protocols


Ports
=====

	 -----------------------------------------------------------------------------------------------------------------------------------------------
	|				|				Data Port				|				Control Port				|	Assigned	|				|			|
	|	Protocol	|---------------------------------------|-------------------------------------------|	by IANA		|	Assignee	|	Refs	|
	|				|	Server	|	Client	|	Transport	|	Server	|	Client	|	Transport		|				|				|			|
	|-----------------------------------------------------------------------------------------------------------------------------------------------|

========================================
<==>	Comparison of SSH servers	<==>
========================================
https://en.wikipedia.org/wiki/Comparison_of_SSH_servers

========================================
<==>	Comparison of SSH clients	<==>
========================================
https://en.wikipedia.org/wiki/Comparison_of_SSH_clients

Platform
========

	 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	|	Name	|	macOS	|	Windows	|	Cygwin	|	BSD	|	Linux	|	Solaris	|	OpenVMS	|	z/OS	|	AIX	|	HP-UX	|	iOS	|	Android	|	Maemo	|	Windows Phone	|
	|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

Technical
=========


	 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	|			|	SSH1		|			|	Additional protocols	|	Port forwarding and Tunneling		|	Session			|				|			|				|				|	Proxy	|
	|	Name	|	(insecure)	|	SSH2	|---------------------------|---------------------------------------|	multiplexing	|	Kerberos	|	IPv6	|	Terminal	|	SFTP/SCP	|	client	|
	|			|				|			|	TELNET		|	rlogin	|	Port forwarding	|	Socks	|	VPN	|					|				|			|				|				|			|
	|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|



Features
========

	 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	|			|	keyboard	|	Session		|	ZMODEM		|	Find text 		|	Mouse			|	Unicode		|	URL				|	Public key		|	Smart		|	Hardware	|	FIPS 140-2	|				|	Shared		|	Auto-		|	CA				|
	|	Name	|	mapping		|	tabs		|	transfers	|	in buffer		|	input			|	support		|	hyperlinking	|	authentication	|	card		|	encryption	|	validation	|	Scripting	|	Database	|	reconnect	|	Certificates	|
	|			|				|				|				|					|	support			|				|					|					|	support		|				|				|				|				|				|					|
	|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|


Authentication key algorithms
=============================

	 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	|			|			|			|				RSA with SHA-2			|				ECDSA with SHA-2				|			EdDSA			|			Security keys			|
	|	Name	|	ssh-dss	|	ssh-rsa	|---------------------------------------|-----------------------------------------------|---------------------------|-----------------------------------|
	|			|			|			|	rsa sha2 256	|	rsa sha2 512	|	ecdsa sha2	|	ecdsa sha2	|	ecdsa sha2	|	ssh		|	ssh			|	sk-ecdsa-sha2	|	sk-ssh		|
	|			|			|			|					|					|	nistp256	|	nistp384	|	nistp521	|	ed25519	|	ed448		|	nistp256		|	ed25519		|
	|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|



========================================================
<==>	Comparison of FTP server software packages	<==>
========================================================
https://en.wikipedia.org/wiki/Comparison_of_FTP_server_software_packages

================================================
<==>	Comparison of FTP client software	<==>
================================================
https://en.wikipedia.org/wiki/Comparison_of_FTP_client_software

====================================================
<==>	Comparison of remote desktop software	<==>
====================================================
https://en.wikipedia.org/wiki/Comparison_of_remote_desktop_software

Remote desktop software
=======================

	 ---------------------------------------------------------------------------------------------------------------------------------------
	|				|				|			|	First public	|	Latest stable	|			|	Free for		|	Free for		|
	|	Software	|	Protocols	|	Creator	|	release date	|	year, version	|	License	|	personal use	|	commercial use	|
	|				|				|			|					|					|			|					|					|
	|---------------------------------------------------------------------------------------------------------------------------------------|


Operating system support
========================

	 ---------------------------------------------------------------------------------------------------------------------------------------------------
	|				|		Windows			|		macOS			|		Linux			|		FreeBSD			|	Java	|		Android			|
	|	Software	|-----------------------|-----------------------|-----------------------|-----------------------|-----------|-----------------------|
	|				|	Server	|	Client	|	Server	|	Client	|	Server	|	Client	|	Server	|	Client	|	Client	|	Server	|	Client	|
	|---------------------------------------------------------------------------------------------------------------------------------------------------



====================================
<==>	Remote desktop software	<==>
====================================
https://en.wikipedia.org/wiki/Remote_desktop_software

In computing, the term remote desktop refers to a software- or operating system feature that allows a personal computer's desktop environment
to be run remotely from one system (usually a PC, but the concept applies equally to a server or a smartphone),
while being displayed on a separate client device.

Remote desktop applications have varying features.
Some allow attaching to an existing user's session and "remote controlling", either displaying the remote control session or blanking the screen.
Taking over a desktop remotely is a form of remote administration.




you can spin up till 65535 ports

tcp        0      0 0.0.0.0:65535           0.0.0.0:*               LISTEN     


=====================================
ChatGPT 3.5		IPs and Ports Summary	
=====================================

Sure, let's delve into the concept of port ranges in more detail.

In networking, a port range refers to a contiguous series of ports within a specified range. Ports are identified by numbers ranging from 0 to 65535,

1.	where ports 0 to 1023 are well-known ports reserved for system services,
2.	and ports 1024 to 49151 are registered ports allocated to user services by the Internet Assigned Numbers Authority (IANA).
3.	Ports 49152 to 65535 are dynamic or private ports, often used for temporary connections.



When you specify a port range, you're indicating a set of ports that you want to scan or work with.
For example, if you specify a range from 1 to 1000, you're including all ports from 1 to 1000 inclusive.
Here's what each part of the range signifies:

Starting Port: The lower bound of the port range. In the example range 1-1000, 1 is the starting port.
Ending Port: The upper bound of the port range. In the example range 1-1000, 1000 is the ending port.

When scanning with tools like Nmap, specifying a port range allows you to focus your scan on a subset of ports rather than scanning the entire range of 0 to 65535.
This can save time and resources, especially if you're only interested in certain services or protocols.

For example, if you specify -p 1-1000 with Nmap, it will scan ports from 1 to 1000.
If any of these ports are open and accessible on the target system, Nmap will report them in its scan results.
This targeted approach can be useful for security audits, network troubleshooting, or discovering specific services running on a server.

Port ranges are flexible and can be adjusted to suit your needs.
You can specify any valid range of ports, whether it's a small range like 1-100 or a larger range like 1000-5000.
However, keep in mind that scanning a wide range of ports may take longer and consume more resources, so it's essential to balance your scanning requirements with efficiency.




root@d87258154693:/etc# uname -a
Linux d87258154693 5.10.76-linuxkit #1 SMP Mon Nov 8 10:21:19 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
root@d87258154693:/etc# 
root@d87258154693:/etc# cat /etc/os-release 
PRETTY_NAME="Ubuntu 22.04.4 LTS"
NAME="Ubuntu"
VERSION_ID="22.04"
VERSION="22.04.4 LTS (Jammy Jellyfish)"
VERSION_CODENAME=jammy
ID=ubuntu
ID_LIKE=debian
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
UBUNTU_CODENAME=jammy
root@d87258154693:/etc# 
root@d87258154693:/etc# 
root@d87258154693:/etc# cat bindresvport.blacklist
#
# This file contains a list of port numbers between 600 and 1024,
# which should not be used by bindresvport. bindresvport is mostly
# called by RPC services. This mostly solves the problem, that a
# RPC service uses a well known port of another service.
#
631	# cups
636	# ldaps
655	# tinc
774	# rpasswd
783	# spamd
873	# rsync
921	# lwresd
993	# imaps
995	# pops
root@d87258154693:/etc# 
root@d87258154693:/etc# 
root@d87258154693:/etc# 





DNS Explained (6 Mins)
======================
https://www.youtube.com/watch?v=72snZctFFtA































=====================
DATA and INFORMATION
=====================
Difference Between Data and Information
https://byjus.com/biology/difference-between-data-and-information/

	Usually, the terms 'DATA' and 'INFORMATION'  are used interchangeably. However, there is a subtle difference between the two.
	In a nutshell, DATA can be a number, symbol, character, word, codes, graphs, etc. On the other hand, INFORMATION is DATA put into context. INFORMATION is utilised by humans in some significant way (such as to make decisions, forecasts etc).
	A basic example of INFORMATION would be a computer. A computer uses programming scripts, formulas, or software applications to turn data into INFORMATION.

Difference between Information and Data
	https://www.geeksforgeeks.org/difference-between-information-and-data/

Data
	https://en.wikipedia.org/wiki/Data

Information
	https://en.wikipedia.org/wiki/Information


















==========================
<==> Load (computing) <==>
==========================

https://en.wikipedia.org/wiki/Load_(computing)
	
The load average represents the average system load over a period of time.
It conventionally appears in the form of three numbers which represent the system load during the last one-, five-, and fifteen-minute periods.

The w and top commands show the same three load average numbers, as do a range of graphical user interface utilities.

In operating systems based on the Linux kernel, this information can be easily accessed by reading the /proc/loadavg file.

To explore this kind of information in depth, according to the Linux's Filesystem Hierarchy Standard, architecture-dependent information are exposed on the file /proc/stat.




====================================
<==> Load balancing (computing) <==>
====================================

https://en.wikipedia.org/wiki/Load_balancing_(computing)

Load balancing is the subject of research in the field of parallel computers. 
Two main approaches exist: 
	Static algorithms, which do not take into account the state of the different machines, 
	Dynamic algorithms, which are usually more general and more efficient but require exchanges of information between the different computing units, at the risk of a loss of efficiency.

Segregation of tasks
Another feature of the tasks critical for the design of a load balancing algorithm is their ability to be broken down into subtasks during execution.
The "Tree-Shaped Computation" algorithm presented later takes great advantage of this specificity.


Static and dynamic algorithms
	Static
		Assumptions about the overall system are made beforehand, such as the arrival times and resource requirements of incoming tasks.
		In addition, the number of processors, their respective power and communication speeds are known.
		The advantage of static algorithms is that they are easy to set up and extremely efficient in the case of fairly regular tasks (such as processing HTTP requests from a website).
		Static load balancing techniques are commonly centralized around a router, or Master, which distributes the loads and optimizes the performance function.
		This minimization can take into account information related to the tasks to be distributed, and derive an expected execution time.
		
		The advantage of static algorithms is that they are easy to set up and extremely efficient in the case of fairly regular tasks (such as processing HTTP requests from a website).
		However, there is still some statistical variance in the assignment of tasks which can lead to the overloading of some computing units.



	Dynamic
		Dynamic algorithms take into account the current load of each of the computing units (also called nodes) in the system.
		In this approach, tasks can be moved dynamically from an overloaded node to an underloaded node in order to receive faster processing.
		While these algorithms are much more complicated to design, they can produce excellent results, in particular, when the execution time varies greatly from one task to another.






load balancing

parallel computers
	single common memory on which they read and write in parallel (PRAM model)
	and those where each computing unit has its own memory (distributed memory model), and where information is exchanged by messages.

static algorithms

dynamic algorithms

error tolerance

optimal load distribution

directed acyclic graph

NP-hard problem

job scheduler

metaheuristic

segregation of tasks
	load balancing algorithm
	Tree shaped computation

load level


Static load balancing techniques

Static load distribution algorithms
 
modular

Parallel computing infrastructures

















=====================
Processor (computing)
=====================
	https://en.wikipedia.org/wiki/Processor_(computing)

	In computing and computer science, a processor or processing unit is an electrical component (digital circuit) that performs operations on an external data source, usually memory or some other data stream.
	It typically takes the form of a microprocessor, which can be implemented on a single or a few tightly integrated metal–oxide–semiconductor integrated circuit chips.
	In the past, processors were constructed using multiple individual vacuum tubes, multiple individual transistors, or multiple integrated circuits.

	The term is frequently used to refer to the central processing unit (CPU), the main processor in a system. 
	However, it can also refer to other coprocessors, such as a graphics processing unit (GPU).

	Traditional processors are typically based on silicon; however, researchers have developed experimental processors based on 
	alternative materials such as carbon nanotubes, graphene, diamond, and alloys made of elements from groups three and five of the periodic table.
	Transistors made of a single sheet of silicon atoms one atom tall and other 2D materials have been researched for use in processors.
	Quantum processors have been created; they use quantum superposition to represent bits (called qubits) instead of only an on or off state.


==============
Microprocessor
==============
	https://en.wikipedia.org/wiki/Microprocessor

	A microprocessor is a computer processor for which the data processing logic and control is included on a single integrated circuit (IC), or a small number of ICs.
	The microprocessor contains the arithmetic, logic, and control circuitry required to perform the functions of a computer's central processing unit (CPU).
	The IC is capable of interpreting and executing program instructions and performing arithmetic operations.
	The microprocessor is a multipurpose, clock-driven, register-based, digital integrated circuit that accepts binary data as input, processes it according to instructions stored in its memory, 
	and provides results (also in binary form) as output.
	Microprocessors contain both combinational logic and sequential digital logic, and operate on numbers and symbols represented in the binary number system.


=======================
Central processing unit
=======================
	https://en.wikipedia.org/wiki/Central_processing_unit

	A central processing unit (CPU)—also called a central processor or main processor—is the most important processor in a given computer.
	Its electronic circuitry executes instructions of a computer program, such as arithmetic, logic, controlling, and input/output (I/O) operations.
	This role contrasts with that of external components, such as main memory and I/O circuitry, and specialized coprocessors such as graphics processing units (GPUs).


	The form, design, and implementation of CPUs have changed over time, but their fundamental operation remains almost unchanged.
	Principal components of a CPU include the arithmetic–logic unit (ALU) that performs arithmetic and logic operations, processor registers 
	that supply operands to the ALU and store the results of ALU operations, and a control unit that orchestrates the fetching (from memory),
	decoding and execution (of instructions) by directing the coordinated operations of the ALU, registers, and other components.
	Modern CPUs devote a lot of semiconductor area to caches and instruction-level parallelism to increase performance and to CPU modes to support operating systems and virtualization.

	=============================================================================================================================
	=	MOST MODERN CPUS ARE IMPLEMENTED ON INTEGRATED CIRCUIT (IC) MICROPROCESSORS, WITH ONE OR MORE CPUs ON A SINGLE IC CHIP.	=
	=	MICROPROCESSOR CHIPS WITH MULTIPLE CPUs ARE MULTI-CORE PROCESSORS.														=
	=	THE INDIVIDUAL PHYSICAL CPUs, PROCESSOR CORES, CAN ALSO BE MULTITHREADED TO SUPPORT CPU-LEVEL MULTITHREADING.			=
	=============================================================================================================================

	An IC that contains a CPU may also contain memory, peripheral interfaces, and other components of a computer;
	such integrated devices are variously called microcontrollers or systems on a chip (SoC).


====================	
Multi-core processor
====================
	https://en.wikipedia.org/wiki/Multi-core_processor

	=================================================================================================================================
	=	A MULTI-CORE PROCESSOR IS A MICROPROCESSOR ON A SINGLE INTEGRATED CIRCUIT WITH TWO OR MORE SEPARATE PROCESSING UNITS,		=
	=	CALLED CORES (FOR EXAMPLE, DUAL-CORE OR QUAD-CORE), EACH OF WHICH READ AND EXECUTES PROGRAM INSTRUCTIONS.					=
	=																																=
	=	The instructions are ordinary CPU instructions (such as add, move data, and branch)											=
	=	but the single processor can run instructions on separate cores at the same time,											=
	=	increasing overall speed for programs that support multithreading or other parallel computing techniques.					=
	=																																=
	=	MANUFACTURERS TYPICALLY INTEGRATE THE CORES ONTO A SINGLE INTEGRATED CIRCUIT DIE (KNOWN AS A CHIP MULTIPROCESSOR OR CMP)	=
	=	OR ONTO MULTIPLE DIES IN A SINGLE CHIP PACKAGE.																				=
	=	THE MICROPROCESSORS CURRENTLY USED IN ALMOST ALL PERSONAL COMPUTERS ARE MULTI-CORE.											=
	=================================================================================================================================

	A MULTI-CORE PROCESSOR IMPLEMENTS MULTIPROCESSING IN A SINGLE PHYSICAL PACKAGE.
	Designers may couple cores in a multi-core device tightly or loosely.
	For example, cores may or may not share caches, and they may implement message passing or shared-memory inter-core communication methods.
	Common network topologies used to interconnect cores include bus, ring, two-dimensional mesh, and crossbar.
	Homogeneous multi-core systems include only identical cores; HETEROGENEOUS multi-core systems have cores that are not identical
	(e.g. big.LITTLE have HETEROGENEOUS cores that share the same instruction set, while AMD Accelerated Processing Units have cores that do not share the same instruction set).
	Just as with single-processor systems, cores in multi-core systems may implement architectures such as VLIW, superscalar, vector, or multithreading.

	Terminology
	===========

	Development
	===========

	Commercial incentives
	---------------------

	Technical factors
	-----------------

	Advantages
	----------
	The proximity of multiple CPU cores on the same die allows the cache coherency circuitry to operate at a much higher clock rate than what is possible if the signals have to travel off-chip.
	Combining equivalent CPUs on a single die significantly improves the performance of cache snoop (alternative: Bus snooping) operations.
	Put simply, this means that signals between different CPUs travel shorter distances, and therefore those signals degrade less.
	These higher-quality signals allow more data to be sent in a given time period, since individual signals can be shorter and do not need to be repeated as often.

	Assuming that the die can physically fit into the package, multi-core CPU designs require much less printed circuit board (PCB) space than do multi-chip SMP designs.
	Also, a dual-core processor uses slightly less power than two coupled single-core processors, principally because of the decreased power required to drive signals external to the chip.
	Furthermore, the cores share some circuitry, like the L2 cache and the interface to the front-side bus (FSB).
	In terms of competing technologies for the available silicon die area, multi-core design can make use of proven CPU core library designs and produce a product with lower risk of design error than devising a new wider-core design.
	Also, adding more cache suffers from diminishing returns.

	Multi-core chips also allow higher performance at lower energy.
	This can be a big factor in mobile devices that operate on batteries.
	Since each core in a multi-core CPU is generally more energy-efficient, the chip becomes more efficient than having a single large monolithic core.
	This allows higher performance with less energy.
	A challenge in this, however, is the additional overhead of writing parallel code.

	See also
	--------
	-	CPU shielding
	-	CUDA
	-	GPGPU
	-	Hyper-threading
	-	Manycore
	-	Multicore Association
	-	Multitasking
	-	OpenCL (Open Computing Language) – a framework for heterogeneous execution
	-	Parallel random access machine
	-	Partitioned global address space (PGAS)
	-	Race condition
	-	Thread


	External links
	--------------
	V.T.E									Processor technologies
	V.T.E									Parallel computing

	 -----------------------------------------------------------------------------------------------
	|																								|
	|	Categories: Computer architecture	|	Digital signal processing	|	Flynn's taxonomy	|
	|																								|
	|	|	Microprocessors	|	Parallel computing													|
	|																								|
	 -----------------------------------------------------------------------------------------------



==================
Manycore processor
==================
	https://en.wikipedia.org/wiki/Manycore_processor

	Manycore processors are special kinds of multi-core processors designed for a high degree of parallel processing,
	containing numerous simpler, independent processor cores (from a few tens of cores to thousands or more).
	Manycore processors are used extensively in embedded computers and high-performance computing.





================================
<==>	Multiprocessing		<==>
================================
	https://en.wikipedia.org/wiki/Multiprocessing
	
	
	MULTIPROCESSING is the use of TWO or MORE CENTRAL PROCESSING UNITS (CPUs) within a SINGLE COMPUTER SYSTEM. 
	
	The term also refers to the ability
	
	of a system to support more than ONE PROCESSOR or 
	
	the ability to allocate tasks between them. 
	
	There are many variations on this basic theme, 
	
	and the definition of MULTIPROCESSING can vary with CONTEXT, 
	
	mostly as a function of how CPUs are defined (
	
	1.	MULTIPLE CORES ON ONE DIE, 
	
	2.	MULTIPLE DIES IN ONE PACKAGE, 
	
	3.	MULTIPLE PACKAGES IN ONE SYSTEM UNIT, 
	
	etc.).
	
	
	
	According to some on-line dictionaries, 
	
	a MULTIPROCESSOR is a computer system having TWO or MORE PROCESSING UNITS (MULTIPLE PROCESSORS) 
	
	each sharing MAIN MEMORY and PERIPHERALS, in order to SIMULTANEOUSLY PROCESS PROGRAMS. 
	
	A 2009 textbook defined multiprocessor system similarly, 
	
	but noting that the processors may share "some or all of the system’s memory and I/O facilities"; 
	
	it also gave tightly coupled system as a synonymous term.
	
	
	
	AT THE OPERATING SYSTEM LEVEL, 
	
	MULTIPROCESSING is sometimes used to refer to the 
	
	execution of MULTIPLE CONCURRENT PROCESSES in a system, 
	
	with each PROCESS running on a separate CPU or core, 
	
	as OPPOSED to a SINGLE PROCESS at any one instant. 
	
	When used with this definition, MULTIPROCESSING is sometimes contrasted with MULTITASKING, 
	
	which may use just a SINGLE PROCESSOR 
	
	but SWITCH IT IN TIME SLICES BETWEEN TASKS (I.E. A TIME-SHARING SYSTEM). 
	
	MULTIPROCESSING however means 
	
	true PARALLEL EXECUTION of MULTIPLE PROCESSES using MORE THAN ONE PROCESSOR. 
	
	 ---------------------------------------------------------------------------------------------------------------------------
	|	MULTIPROCESSING doesn't necessarily mean that a SINGLE PROCESS OR TASK uses more than ONE PROCESSOR SIMULTANEOUSLY;		| 
	|	the term PARALLEL PROCESSING is generally used to denote that scenario.													|
	 ---------------------------------------------------------------------------------------------------------------------------
	 
	Other authors prefer to refer to the operating system techniques as MULTIPROGRAMMING and 
	
	reserve the term MULTIPROCESSING for the HARDWARE aspect of having MORE THAN ONE PROCESSOR. 
	
	 -------------------------------------------------------------------------------------------
	|	The remainder of this article discusses MULTIPROCESSING only in this hardware sense.	|
	 -------------------------------------------------------------------------------------------
	
	
	In Flynn's taxonomy, 
	
	multiprocessors as defined above are MIMD machines. 
	
	As the term "multiprocessor" normally refers to tightly coupled systems 
	
	in which all processors share memory, 
	
	multiprocessors are not the entire class of MIMD machines, 
	
	which also contains message passing multicomputer systems.
	

=================
Monolithic system
=================
https://en.wikipedia.org/wiki/Monolithic_system

A monolithic system is a system that is integrated into one whole, analogous to a monolith. The phrase can have slightly different meanings in the contexts of computer software and hardware.

In application software
-----------------------
In application software, software is called "monolithic" if it has a monolithic architecture, in which functionally distinguishable aspects 
(for example data input and output, data processing, error handling, and the user interface) 
are all interwoven, rather than containing architecturally separate components.
Software systems like this are examples of monolithic applications.

In hardware
-----------
An electronic hardware system, such as a multi-core processor, is called "monolithic" if its components are integrated together in a single integrated circuit. 
Note that such a system may consist of architecturally separate components – in a multi-core system, each core forms a separate component – as long as they are realized on a single die.

In system software
------------------
In system software, a monolithic kernel is an operating system (OS) architecture where the entire OS is working in kernel space.


=============
Microservices
=============
https://en.wikipedia.org/wiki/Microservices

	In software engineering, a microservice architecture is a variant of the service-oriented architecture structural style.
	It is an architectural pattern that arranges an application as a collection of loosely coupled, fine-grained services, communicating through lightweight protocols. 

	One of its goals is that teams can develop and deploy their services independently of others.
	This is achieved by the reduction of several dependencies in the code base, allowing developers to evolve their services with limited restrictions from users, and for additional complexity to be hidden from users.
	As a consequence, organizations are able to develop software with fast growth and size, as well as use off-the-shelf services more easily.
	Communication requirements are reduced. These benefits come at a cost to maintaining the decoupling.
	Interfaces need to be designed carefully and treated as a public API. 
	One technique that is used is having multiple interfaces on the same service, or multiple versions of the same service, so as to not disrupt existing users of the code.

	Introduction:
	There is no single definition for microservices. A consensus view has evolved over time in the industry. Some of the defining characteristics that are frequently cited include:
		Services in a microservice architecture are often processes that communicate over a network to fulfill a goal using technology-agnostic protocols such as HTTP.
		Services are organized around business capabilities.
		SERVICES CAN BE IMPLEMENTED USING DIFFERENT PROGRAMMING LANGUAGES, DATABASES, HARDWARE AND SOFTWARE ENVIRONMENTS, DEPENDING ON WHAT FITS BEST.
		Services are small in size, messaging-enabled, bounded by contexts, autonomously developed, independently deployable, decentralized and built and released with automated processes.

	A microservice is not a layer within a monolithic application (for example, the web controller or the backend-for-frontend)
	Rather, it is a self-contained piece of business functionality with clear interfaces, and may, through its own internal components, implement a layered architecture.
	From a strategic perspective, microservice architecture essentially follows the Unix philosophy of "Do one thing and do it well".
	Martin Fowler describes a microservices-based architecture as having the following properties:

		Lends itself to a continuous delivery software development process. A change to a small part of the application only requires rebuilding and redeploying only one or a small number of services.
		Adheres to principles such as fine-grained interfaces (to independently deployable services), business-driven development (e.g. domain-driven design).

	It is common for microservices architectures to be adopted for cloud-native applications, 
	serverless computing, and applications using lightweight container deployment. 
	According to Fowler, because of the large number (when compared to monolithic application implementations) of services, 
	decentralized continuous delivery and DevOps with holistic service monitoring are necessary to effectively develop, maintain, and operate such applications.
	A consequence of (and rationale for) following this approach is that the individual microservices can be individually scaled.
	In the monolithic approach, an application supporting three functions would have to be scaled in its entirety even if only one of these functions had a resource constraint.
	With microservices, only the microservice supporting the function with resource constraints needs to be scaled out, thus providing resource and cost optimization benefits.





====================
Concurrent computing
====================
https://en.wikipedia.org/wiki/Concurrent_computing

Concurrent computing is a form of computing in which several computations are executed concurrently—during overlapping time periods—instead of sequentially—with one completing before the next starts.
This is a property of a system—whether a program, computer, or a network—where there is a separate execution point or "thread of control" for each process.
A concurrent system is one where a computation can advance without waiting for all other computations to complete.

Concurrent computing is a form of modular programming.
In its paradigm an overall computation is factored into subcomputations that may be executed concurrently.

The concept of concurrent computing is frequently confused with the related but distinct concept of parallel computing, 
although both can be described as "multiple processes executing during the same period of time".
In parallel computing, execution occurs at the same physical INSTANT: for example, on separate processors of a multi-processor machine, with the goal of speeding up computations—
=========================================================================================
=	parallel computing is impossible on a (one-core) single processor,					=
=	as only one computation can occur at any INSTANT (during any single clock cycle).	=
=========================================================================================
By contrast, concurrent computing consists of process lifetimes overlapping, but execution need not happen at the same INSTANT. 
The goal here is to model processes in the outside world that happen concurrently, such as multiple clients accessing a server at the same time. 
Structuring software systems as composed of multiple concurrent, communicating parts can be useful for tackling complexity, regardless of whether the parts can be executed in parallel.

For example, concurrent processes can be executed on one core by interleaving the execution steps of each process via time-sharing slices: only one process runs at a time, and if it does not complete during its time slice,
it is paused, another process begins or resumes, and then later the original process is resumed.
In this way, multiple processes are part-way through execution at a single INSTANT, but only one process is being executed at that INSTANT.

Concurrent computations may be executed in parallel, for example, by assigning each process to a separate processor or processor core, or distributing a computation across a network.

The exact timing of when tasks in a concurrent system are executed depends on the scheduling, and tasks need not always be executed concurrently. For example, given two tasks, T1 and T2:

	-	T1 may be executed and finished before T2 or vice versa (serial and sequential)
	-	T1 and T2 may be executed alternately (serial and concurrent)
	-	T1 and T2 may be executed simultaneously at the same INSTANT of time (parallel and concurrent)

The word "sequential" is used as an antonym for both "concurrent" and "parallel";
when these are explicitly distinguished, concurrent/sequential and parallel/serial are used as opposing pairs. 
A schedule in which tasks execute one at a time (serially, no parallelism), without interleaving (sequentially, no concurrency: no task begins until the prior task ends) is called a serial schedule.
A set of tasks that can be scheduled serially is serializable, which simplifies concurrency control.

	Prevalence
	----------
=================================================================================================================
=	Concurrency is pervasive (spread throughout so thoroughly as to be seen or felt everywhere) in computing,	= 
=	occurring from low-level hardware on a single chip to worldwide networks. Examples follow.				 	=
=================================================================================================================

At the programming language level:
	-	Channel
	-	Coroutine
	-	Futures and promises

At the operating system level:
	-	Computer multitasking, including both cooperative multitasking and preemptive multitasking
		-	Time-sharing, which replaced sequential batch processing of jobs with concurrent use of a system
	-	Process
	-	Thread

=============================================================================================================================
=	At the network level, networked systems are generally concurrent by their nature, as they consist of separate devices.	=
=============================================================================================================================

==============================
Concurrency (computer science)
==============================
https://en.wikipedia.org/wiki/Concurrency_(computer_science)

In computer science, concurrency is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, 
without affecting the outcome. 
This allows for parallel execution of the concurrent units, which can significantly improve overall speed of the execution in multi-processor and multi-core systems.
In more technical terms, concurrency refers to the decomposability of a program, algorithm, or problem into order-independent or partially-ordered components or units of computation.

==================
Parallel computing
==================
https://en.wikipedia.org/wiki/Parallel_computing	

Parallel computing is a type of computation in which many calculations or processes are carried out simultaneously.
Large problems can often be divided into smaller ones, which can then be solved at the same time.
There are several different forms of parallel computing: 
	bit-level, 
	instruction-level, 
	data, and 
	task parallelism.
	
Parallel computing is closely related to concurrent computing—they are frequently used together, and often conflated, though the two are distinct:
it is possible to have parallelism without concurrency, 
and concurrency without parallelism (such as multitasking by time-sharing on a single-core CPU).

In parallel computing, a computational task is typically broken down into several, often many, 
very similar sub-tasks that can be processed independently and whose results are combined afterwards, upon completion.
In contrast, in concurrent computing, the various processes often do not address related tasks; 
when they do, as is typical in distributed computing, the separate tasks may have a varied nature and often require some inter-process communication during execution.

Parallel computers can be roughly classified according to the level at which the hardware supports parallelism, 
with multi-core and multi-processor computers having multiple processing elements within a single machine, while clusters, MPPs, 
and grids use multiple computers to work on the same task.
Specialized parallel computer architectures are sometimes used alongside traditional processors, for accelerating specific tasks.

 -------------------------------
|	1.	Bit-level parallelism	|
 -------------------------------
https://en.wikipedia.org/wiki/Bit-level_parallelism

Bit-level parallelism is a form of parallel computing based on increasing processor word size.
Increasing the word size reduces the number of instructions the processor must execute in order to perform an operation on variables whose sizes are greater than the length of the word.
(For example, consider a case where an 8-bit processor must add two 16-bit integers.
The processor must first add the 8 lower-order bits from each integer, then add the 8 higher-order bits, requiring two instructions to complete a single operation. 
A 16-bit processor would be able to complete the operation with single instruction.)

 ---------------------------------------
|	2.	Instruction-level parallelism	|
 ---------------------------------------
https://en.wikipedia.org/wiki/Instruction-level_parallelism

There are two approaches to instruction-level parallelism: hardware and software.

Hardware level works upon dynamic parallelism, whereas the software level works on static parallelism.
Dynamic parallelism means the processor decides at run time which instructions to execute in parallel, 
whereas static parallelism means the compiler decides which instructions to execute in parallel.
The Pentium processor works on the dynamic sequence of parallel execution, but the Itanium processor works on the static level parallelism.

 ---------------------------
|	3.	Data parallelism	|
 ---------------------------
https://en.wikipedia.org/wiki/Data_parallelism

Data parallelism is parallelization across multiple processors in parallel computing environments.
It focuses on distributing the data across different nodes, which operate on the data in parallel.
It can be applied on regular data structures like arrays and matrices by working on each element in parallel.
It contrasts to task parallelism as another form of parallelism.

 ---------------------------
|	4.	Task parallelism	|
 ---------------------------
https://en.wikipedia.org/wiki/Task_parallelism

Task parallelism (also known as function parallelism and control parallelism) is a form of parallelization of computer code across multiple processors in parallel computing environments.
Task parallelism focuses on distributing tasks—concurrently performed by processes or threads—across different processors.
In contrast to data parallelism which involves running the same task on different components of data, task parallelism is distinguished by running many different tasks at the same time on the same data. 
A common type of task parallelism is pipelining, which consists of moving a single set of data through a series of separate tasks where each task can execute independently of the others.

	Description
	-----------
In a multiprocessor system, task parallelism is achieved when each processor executes a different thread (or process) on the same or different data.
The threads may execute the same or different code. In the general case, different execution threads communicate with one another as they work, but this is not a requirement.
Communication usually takes place by passing data from one thread to the next as part of a workflow.

As a simple example, if a system is running code on a 2-processor system (CPUs "a" & "b") in a parallel environment and we wish to do tasks "A" and "B",
it is possible to tell CPU "a" to do task "A" and CPU "b" to do task "B" simultaneously, thereby reducing the run time of the execution.
The tasks can be assigned using conditional statements as described below.

Task parallelism emphasizes the distributed (parallelized) nature of the processing (i.e. threads), as opposed to the data (data parallelism).
Most real programs fall somewhere on a continuum between task parallelism and data parallelism.

Thread-level parallelism (TLP) is the parallelism inherent in an application that runs multiple threads at once.
This type of parallelism is found largely in applications written for commercial servers such as databases.
By running many threads at once, these applications are able to tolerate the high amounts of I/O and 
memory system latency their workloads can incur - while one thread is delayed waiting for a memory or disk access, other threads can do useful work.

 -------------------------------
|	Memory-level parallelism	|
 -------------------------------
https://en.wikipedia.org/wiki/Memory-level_parallelism

In computer architecture, memory-level parallelism (MLP) is the ability to have pending multiple memory operations,
in particular cache misses or translation lookaside buffer (TLB) misses, at the same time.

In a single processor, MLP may be considered a form of instruction-level parallelism (ILP).
However, ILP is often conflated with superscalar, the ability to execute more than one instruction at the same time,
e.g. a processor such as the Intel Pentium Pro is five-way superscalar, with the ability to start executing five different microinstructions in a given cycle,
but it can handle four different cache misses for up to 20 different load microinstructions at any time.


=========================
Symmetric multiprocessing
=========================
https://en.wikipedia.org/wiki/Symmetric_multiprocessing

SYMMETRIC MULTIPROCESSING 

or 

SHARED-MEMORY MULTIPROCESSING (SMP) involves a 

MULTIPROCESSOR 

COMPUTER HARDWARE and 

SOFTWARE ARCHITECTURE 

where TWO or MORE identical PROCESSORS are connected to a 

SINGLE, SHARED MAIN MEMORY, 

have FULL ACCESS to all INPUT and OUTPUT devices, 

and are controlled by a SINGLE OPERATING SYSTEM instance that treats ALL PROCESSORS equally, 

reserving none for special purposes. 



Most MULTIPROCESSOR systems today use an SMP architecture. 

In the case of MULTI-CORE PROCESSORS, the SMP architecture applies to the cores, treating them as separate processors.


							DIAGRAM OF A SYMMETRIC MULTIPROCESSING SYSTEM
																								
									 -----------												
									|	Main	|												
									|	Memory	|												
									 -----------												
										  /\													
										  ||													
 ---------------		System Bus		  \/													
|	Bus arbiter	|<=======================================================================>		
 ---------------		/\				/\					/\				/\					
						||				||					||				||					
						\/				\/					\/				\/					
					 -------		 -------			 -------		 -------				
					| Cache |		| Cache |			| Cache |		|  I/O  |				
					 -------		 -------			 -------		 -------				
						/\				/\					/\									
						||				||		.	.	.	||									
						\/				\/					\/									
				 -------------	  -------------		  -------------								
				| Processor 1 |	 | Processor 2 |	 | Processor n |							
				 -------------	  -------------		  -------------								

	Design
	------
	SMP systems have centralized shared memory called main memory (MM) operating under a single operating system with two or more homogeneous processors. 

	Usually each processor has an associated private high-speed memory known as cache memory (or cache) to speed up the main memory data access and to reduce the system bus traffic.



	Processors may be interconnected using buses, crossbar switches or on-chip mesh networks. 

	The bottleneck in the scalability of SMP using buses or crossbar switches 

	is the bandwidth and power consumption of the interconnect among the various processors, 

	the memory, and the disk arrays. 

	Mesh architectures avoid these bottlenecks, and provide nearly linear scalability to much higher processor counts at the sacrifice of programmability:



	Serious programming challenges remain with this kind of architecture because it requires two distinct modes of programming; 
	
	-	one for the CPUs themselves and 
	-	one for the interconnect between the CPUs. 

	A single programming language would have to be able to not only partition the workload, 

	but also comprehend the memory locality, which is severe in a mesh-based architecture.



	SMP systems allow any processor to work on any task no matter where the data for that task is located in memory, 

	provided that each task in the system is not in execution on two or more processors at the same time. 

	With proper operating system support, SMP systems can easily move tasks between processors to balance the workload efficiently.











================================
<==>	DISTRIBUTED MEMORY	<==>
================================
https://en.wikipedia.org/wiki/Distributed_memory


								AN ILLUSTRATION OF A DISTRIBUTED MEMORY SYSTEM OF THREE COMPUTERS.

																										
												    --------------------								
												   /				   /|								
												  /		NETWORK HUB	  / /								
												 /			 		 / /								
												/-------------------/ /									
												|				   | /									
						   ---------------------|---o	o	o------|/---------------------				
						  |						 -------|----------						  |				
						  |								|								  |				
						  |								|								  |				
						  |								|								  |				
						  |								|								  |				
						  |								|								  |				
					 -------------				 -------------						 -------------		
					/			 /				/			 /						/			 /		
		 ----------/	CPU		/		 ------/	CPU		/				 ------/	CPU		/		
		|		  /			   /		|	  /			   /				|	  /			   /		
		|		  -------------			|	  -------------					|	  -------------			
		|				|				|			|						|			|				
		|				|				|			|						|			|				
		|				|				|			|						|			|				
		|			 ---|----------		|		 ---|----------				|		 ---|----------		
		|			/			 //		|		/			 //				|		/			 //		
		|		   /	MEMORY	//		|	   /	MEMORY	//				|	   /	MEMORY	//		
		|		  /			   //		|	  /			   //				|	  /			   //		
		|		 |------------|/		|	 |------------|/				|	 |------------|/		
		|		  ------------			|	  ------------					|	  ------------			
		|								|									|							
		|								|									|							
	 ---|---						 ---|---							 ---|---						
	|-------|						|-------|							|-------|						
	| DISK	|						| DISK	|							| DISK	|						
	|		|						|		|							|		|						
	 -------						 -------							 -------						
																										



	In computer science, DISTRIBUTED MEMORY refers to a MULTIPROCESSOR COMPUTER SYSTEM in which EACH PROCESSOR has its OWN PRIVATE MEMORY. 

	Computational tasks can only operate on LOCAL DATA, and if REMOTE DATA are required, 

	the computational task must communicate with one or more REMOTE PROCESSORS. 


	In contrast, a SHARED MEMORY MULTIPROCESSOR offers a SINGLE MEMORY SPACE used by all PROCESSORS. 

	PROCESSORS do not have to be aware where data resides, except that there may be performance penalties, 

	and that race conditions are to be avoided.



	In a DISTRIBUTED MEMORY system there is typically a PROCESSOR, a MEMORY, and some form of INTERCONNECTION that allows programs on EACH PROCESSOR to interact with each other. 

	The interconnect can be organised with point to point links or separate hardware can provide a switching network. 

	The NETWORK TOPOLOGY is a key factor in determining how the MULTIPROCESSOR machine scales. 

	The links between nodes can be implemented using some standard network protocol (for example Ethernet), using bespoke network links (used in for example the transputer), or using dual-ported memories.	


	PROGRAMMING DISTRIBUTED MEMORY MACHINES
	---------------------------------------
	The key issue in PROGRAMMING DISTRIBUTED MEMORY SYSTEMS is how to distribute the data over the MEMORIES. 

	Depending on the problem solved, the data can be distributed 

	STATICALLY, 

	or it can be moved through the nodes.

	Data can be moved on demand, or data can be pushed to the new nodes in advance.



	As an example, if a problem can be described as a pipeline where data x is processed subsequently through functions f, g, h, etc. 
	(the result is h(g(f(x)))), then this can be expressed as a distributed memory problem where the data is transmitted first to the node 
	that performs f that passes the result onto the second node that computes g, and finally to the third node that computes h. 
	This is also known as systolic computation.

	Data can be kept statically in nodes if most computations happen locally, and only changes on edges have to be reported to other nodes. 
	An example of this is simulation where data is modeled using a grid, and each node simulates a small part of the larger grid. 
	On every iteration, nodes inform all neighboring nodes of the new edge data.
	
	DISTRIBUTED SHARED MEMORY
	-------------------------
	Similarly, in distributed shared memory each node of a cluster has access 

	to a large shared memory in addition to each node's limited non-shared private memory.


	SHARED MEMORY vs. DISTRIBUTED MEMORY vs. DISTRIBUTED SHARED MEMORY
	------------------------------------------------------------------

	-	The advantage of (distributed) shared memory is that it offers a unified address space in which all data can be found.
	
	-	The advantage of distributed memory is that it excludes race conditions, and that it forces the programmer to think about data distribution.
	
	-	The advantage of distributed (shared) memory is that it is easier to design a machine that scales with the algorithm

	DISTRIBUTED SHARED MEMORY HIDES THE MECHANISM OF COMMUNICATION, IT DOES NOT HIDE THE LATENCY OF COMMUNICATION.


============================
<==>	SHARED MEMORY	<==>
============================
https://en.wikipedia.org/wiki/Shared_memory

	In computer science, shared memory is memory that may be simultaneously accessed by multiple programs with an intent to provide communication among them or avoid redundant copies. 

	Shared memory is an efficient means of passing data between programs. 

	Depending on context, programs may run on a single processor or on multiple separate processors.

	Using memory for communication inside a single program, e.g. among its multiple threads, is also referred to as shared memory.


		AN ILLUSTRATION OF A SHARED MEMORY SYSTEM OF THREE PROCESSORS

			___________				___________				___________
		   /		  /|		   /		  /|		   /		  /|
		  /   CPU	 / |		  /   CPU	 / |		  /   CPU	 / |
		 /_|_____|__/|			 /_|_____|__/|			 /_|_____|__/|
		   |  |	 |	 |			   |  |	 |	 |			   |  |	 |	 |
			  |						  |						  |
		 	  |						  |						  |				 -------
		 _____|_______________________|_______________________|_____		|-------|
		/	  |						  |						  |	   /		|		|
	   /				System Bus or Crossbar Switch			  /---------|  I/O	|
	  /__________________________________________________________/			|		|
						|							|						 -------
		 				|							|
		 _______________|___________________________|_______________
		/				|							|			   /|
	   /							Memory						  / /
	  /__________________________________________________________/ /
	 |															| /
	 |__________________________________________________________|/


	In hardware
	-----------
	In computer hardware, shared memory refers to a (typically large) block of random access memory (RAM) 

	that can be accessed by several different central processing units (CPUs) in a multiprocessor computer system.

	Shared memory systems may use:

	-	uniform memory access (UMA): all the processors share the physical memory uniformly;

	-	non-uniform memory access (NUMA): memory access time depends on the memory location relative to a processor;

	-	cache-only memory architecture (COMA): the local memories for the processors at each node is used as cache instead of as actual main memory.


	A shared memory system is relatively easy to program since all processors share a single view of data 
	and the communication between processors can be as fast as memory accesses to the same location. 
	The issue with shared memory systems is that many CPUs need fast access to memory and will likely cache memory, which has two complications:

	-	access time degradation: when several processors try to access the same memory location it causes contention. 
		Trying to access nearby memory locations may cause false sharing. 
		Shared memory computers cannot scale very well. Most of them have ten or fewer processors;

	-	lack of data coherence: whenever one cache is updated with information that may be used by other processors, 
		the change needs to be reflected to the other processors, otherwise the different processors will be working with incoherent data. 
		Such cache coherence protocols can, when they work well, provide extremely high-performance access to shared information between multiple processors. 
		On the other hand, they can sometimes become overloaded and become a bottleneck to performance.

	Technologies like crossbar switches, Omega networks, HyperTransport or front-side bus can be used to dampen the bottleneck-effects.

	In case of a Heterogeneous System Architecture (processor architecture that integrates different types of processors, 
	such as CPUs and GPUs, with shared memory), the memory management unit (MMU) of the CPU and 
	the input–output memory management unit (IOMMU) of the GPU have to share certain characteristics, like a common address space.

	The alternatives to shared memory are distributed memory and distributed shared memory, each having a similar set of issues


	In software
	-----------
	In computer software, shared memory is either

	-	a method of inter-process communication (IPC), i.e. a way of exchanging data between programs running at the same time. ONE PROCESS WILL CREATE AN AREA IN RAM which other processes can access;

	-	a method of conserving memory space by directing accesses to what would ordinarily be copies of a piece of data to a single instance instead, by using virtual memory mappings or with explicit support of the program in question. 
		This is most often used for shared libraries and for Execute in place (XIP).


	Since both processes can access the shared memory area like regular working memory, this is a very fast way of communication (as opposed to other mechanisms of IPC such as named pipes, Unix domain sockets or CORBA). 

	On the other hand, it is less scalable, as for example the communicating processes must be running on the same machine (of other IPC methods, only Internet domain sockets—not Unix domain sockets—can use a computer network), 

	and care must be taken to avoid issues if processes sharing memory are running on separate CPUs and the underlying architecture is not cache coherent.


	IPC by shared memory is used for example to transfer images between the application and the X server on Unix systems, 
	or inside the IStream object returned by CoMarshalInterThreadInterfaceInStream in the COM libraries under Windows.

	Dynamic libraries are generally held in memory once and mapped to multiple processes, 
	and only pages that had to be customized for the individual process 
	(because a symbol resolved differently there) are duplicated, usually with a mechanism known as 
	copy-on-write that transparently copies the page when a write is attempted, and then lets the write succeed on the private copy.


	Compared to multiple address space operating systems, 
		memory sharing -- especially of sharing procedures or pointer-based structures -- is simpler in single address space operating systems.
	
	
	Support on Windows
	------------------
	On Windows, one can use CreateFileMapping and MapViewOfFile functions to map a region of a file into memory in multiple processes.

	Cross-platform support
	----------------------
	Some C++ libraries provide a portable and object-oriented access to shared memory functionality. For example, Boost contains the Boost.Interprocess C++ Library and Qt provides the QSharedMemory class.

	Programming language support
	----------------------------
	For programming languages with POSIX bindings (say, C/C++), shared memory regions can be created and accessed by calling the functions provided by the operating system. 

	Other programming languages may have their own ways of using these operating facilities for similar effect. 

	For example, PHP provides an API to create shared memory, similar to POSIX functions.




========================================
<==>	DISTRIBUTED SHARED MEMORY	<==>
========================================
https://en.wikipedia.org/wiki/Distributed_shared_memory

	In computer science, distributed shared memory (DSM) is a form of memory architecture where physically separated memories can be addressed as a single shared address space. 

	The term "shared" does not mean that there is a single centralized memory, but that the address space is shared—i.e., the same physical address on two processors refers to the same location in memory. 

	Distributed global address space (DGAS), is a similar term for a wide class of software and hardware implementations, 

	in which each node of a cluster has access to shared memory in addition to each node's private (i.e., not shared) memory.

	Overview
	--------

										DISTRIBUTED SHARED MEMORY


		 ---------------					 ---------------						 ---------------	
		|				|					|				|						|				|
		|	Process		|					|	Process		|						|	Process		|
		|				|					|				|						|				|
		 ---------------					 ---------------						 ---------------	
		  ||	  /\						  ||	  /\								  ||	  /\
		  ||	  ||						  ||	  ||								  ||	  ||
Invocation||	  ||response		Invocation||	  ||response				Invocation||	  ||response
		  ||	  ||						  ||	  ||								  ||	  ||
		  ||	  ||						  ||	  ||								  ||	  ||
	 -----||------||--------------------------||------||----------------------------------||------||----
	|	  \/	  ||						  \/	  ||								  \/	  ||	|
	|	 ----------- 						 ----------- 								 -----------	|
	|	|	Memory	|						|	Memory	|								|	Memory	|	|
	|	|	Manager	|						|	Manager	|								|	Manager	|	|
	|	 -----------						 -----------		.............			 -----------	|
	|	  |		|							  |		   |								 |		  |		|
	|	  |		|							  |			---------------------------------|------  |		|
	|	  |		 -----------------------------|------------------------------------------|---	| |		|
	|	  |	 ---------------------------------											 |	 |	| |		|
	|	  |	|  --------------------------------------------------------------------------	 |	| |		|
	|	  | | |																				 |	| |		|
	|	 -------------------------------------------------------------------------------------------	|
	|	|																							|	|
	|	|										Shared Virtual Memory								|	|
	|	|																							|	|
	|	 -------------------------------------------------------------------------------------------	|
	|																									|
	 ---------------------------------------------------------------------------------------------------


	A distributed-memory system, often called a multicomputer, consists of multiple independent processing nodes 
	with local memory modules which is connected by a general interconnection network. 

	Software DSM systems can be implemented in an operating system, or as a programming library 
	and can be thought of as extensions of the underlying virtual memory architecture. 

	When implemented in the operating system, such systems are transparent to the developer; 
	which means that the underlying distributed memory is completely hidden from the users. 

	In contrast, software DSM systems implemented at the library or language level are not transparent 
	and developers usually have to program them differently. 

	However, these systems offer a more portable approach to DSM system implementations. 
	A DSM system implements the shared-memory model on a physically distributed memory system.

	DSM can be achieved via software as well as hardware. 
	Hardware examples include cache coherence circuits and network interface controllers. 
	There are three ways of implementing DSM:

	-	Page-based approach using virtual memory
	-	Shared-variable approach using routines to access shared variables
	-	Object-based approach, ideally accessing shared data through object-oriented discipline

	Advantages
	----------
	-	Scales well with a large number of nodes
	-	Message passing is hidden
	-	Can handle complex and large databases without replication or sending the data to processes
	-	Generally cheaper than using a multiprocessor system
	-	Provides large virtual memory space
	-	Programs are more portable due to common programming interfaces
	-	Shield programmers from sending or receiving primitives

	Disadvantages
	-------------
	-	Generally slower to access than non-distributed shared memory
	-	Must provide additional protection against simultaneous accesses to shared data
	-	May incur a performance penalty
	-	Little programmer control over actual messages being generated
	-	Programmers need to understand consistency models to write correct programs

	Comparison with message passing
	-------------------------------
	Shared memory architecture may involve separating memory into shared parts distributed amongst nodes and main memory; 
	or distributing all memory between nodes. A coherence protocol, chosen in accordance with a consistency model, maintains memory coherence.

	 -----------------------------------------------------------------------------------------------------------------------------------
	|						Message passing						|				Distributed shared memory								|
	|-----------------------------------------------------------|-----------------------------------------------------------------------|
	|	Variables have to be marshalled							|	Variables are shared directly										|
	|	Cost of communication is obvious						|	Cost of communication is invisible									|
	|	Processes are protected by having private address space	|	Processes could cause error by altering data						|
	|	Processes should execute at the same time				|	Executing the processes may happen with non-overlapping lifetimes	|
	 -----------------------------------------------------------------------------------------------------------------------------------





Parallel Virtual Machine
	https://en.wikipedia.org/wiki/Parallel_Virtual_Machine

Parallel RAM
	https://en.wikipedia.org/wiki/Parallel_RAM










================================================
<==>	HETEROGENEOUS SYSTEM ARCHITECTURE	<==>
================================================
https://en.wikipedia.org/wiki/Heterogeneous_System_Architecture

HETEROGENEOUS SYSTEM ARCHITECTURE (HSA) is a cross-vendor set of specifications 
that allow for the INTEGRATION of 
CENTRAL PROCESSING UNITS and 
GRAPHICS PROCESSORS 
on the SAME BUS, 
with SHARED MEMORY and TASKS.


The HSA is being developed by the HSA Foundation, which includes (among many others) AMD and ARM.
THE PLATFORM'S STATED AIM IS TO 
REDUCE COMMUNICATION LATENCY 
BETWEEN CPUS, GPUS AND OTHER COMPUTE DEVICES, 
AND MAKE THESE VARIOUS DEVICES MORE COMPATIBLE FROM A PROGRAMMER'S PERSPECTIVE,

RELIEVING THE PROGRAMMER of the task of planning 
the MOVING OF DATA BETWEEN DEVICES' DISJOINT MEMORIES (as must currently be done with OpenCL or CUDA).

CUDA and OpenCL as well as most other fairly ADVANCED PROGRAMMING LANGUAGES can use HSA to increase their EXECUTION PERFORMANCE.
HETEROGENEOUS COMPUTING is widely used in 
system-on-chip devices 
such as tablets, smartphones, other mobile devices, and video game consoles.
HSA allows PROGRAMS to use the GRAPHICS PROCESSOR for floating point calculations 
without SEPARATE MEMORY or SCHEDULING.

Rationale
---------
The rationale behind HSA is to ease the burden on programmers when offloading calculations to the GPU.
Originally driven solely by AMD and called the FSA, the idea was extended to encompass processing units other than GPUs, such as other manufacturers' DSPs, as well.



	Steps performed when offloading calculations to the GPU on a non-HSA system
	---------------------------------------------------------------------------

	 -------------------			   ------------------			 -----------
	| 	Application		|			  | Operating System |			|	GPU		|
	 -------------------			  | on CPU			 |			 -----------
			|						   ------------------				 |
			|								   |						 |
	 -------------------					   |						 |
	| Transfer buffers 	|---_				   |						 |
	| to GPU			|	 \				   |						 |
	 ------------------- 	  \_	   ---------------					 |
			|					----> | Copy or map*  |---_				 |
			|					_---- | 	memory	  |	   \			 |
			|				   /	   ---------------		\_		 -----------
	 -------------------	 _/				   |			  ----> | Start Job |
	| 	Queue Job		|<---				   |					 -----------
	|					|---_ 				   |						 |
	 -------------------	 \				   |						 |
			|				  \_	   ---------------					 \/
			|					----> | Schedule Job  |				 ------------
			|						   ---------------		  _---- | Finish Job |
			|								   |			 /		 ------------
			|								   |			/			 |
			|						   -------------- 	  _/			 |
			|						  |	Schedule	 |<---				 |
	 		|					 _----| Application  |					 |
			|					/ 	   --------------					 |
	 -------------------	  _/			   |						 |
	|	 Get Buffer		|<----	  			   |						 |
	|					|----_				   |						 |
	 -------------------	  \				   |						 |
			|				   \_	   -----------------				 |
			|					 ---->| Copy or map*	|				 |
			|					_-----|		memory		|				 |
			|				   /	   -----------------				 |
	 -------------------	 _/				   |						 |
	|	Results			|<---				   |						 |
	 -------------------					   |						 |

	* zero-copy possible with unified system memory



	Steps performed when offloading calculations to the GPU on a HSA system, using the HSA functionality
	----------------------------------------------------------------------------------------------------

	 -------------------			   ------------------			 -----------
	| 	Application		|			  | Operating System |			|	GPU		|
	 -------------------			  | on CPU			 |			 -----------
			|						   ------------------				 |
			|								   |						 |
	 -------------------					   |						 |
	| 	  Queue Job 	|---_				   |						 |
	|					|	 \				   |						 |
	 ------------------- 	  \_	   --------------					 |
			|					----> | 			 |---_				 |
			|						  | 			 |	   \			 |
			|				   		  |				 |		\_		 -----------
	 		|						  |		   		 |		  ----> | Start Job |
			|						  |		   		 |				 -----------
			|						  |	 	   		 |					 |
	 		|				 		  |		 HSA 	 |					 |
			|				  		  |   Software	 |					 \/
			|						  |				 |				 ------------
			|						  | 			 |		  _---- | Finish Job |
			|						  |		   		 |		 /		 ------------
			|						  |				 |		/			 |
			|						  |				 | 	  _/			 |
			|						  |				 |<---				 |
	 		|					 _----| 			 |					 |
			|					/ 	   --------------					 |
	 -------------------	  _/			   |						 |
	|	 Results		|<----	  			   |						 |
	|					|					   |						 |
	 -------------------	  				   |						 |
			|				   				   |						 |
			|					 			   |						 |

	* zero-copy possible with unified system memory


Modern GPUs are very well suited to perform single instruction, multiple data (SIMD) and single instruction, multiple threads (SIMT), while modern CPUs are still being optimized for branching. etc.


Overview
--------
Originally introduced by embedded systems such as the Cell Broadband Engine, 
SHARING SYSTEM MEMORY directly between MULTIPLE SYSTEM ACTORS makes HETEROGENEOUS computing more mainstream.

Heterogeneous computing itself refers to systems that contain 
multiple processing units 
– central processing units (CPUs), 
graphics processing units (GPUs), 
digital signal processors (DSPs), 
or any type of application-specific integrated circuits (ASICs). 

The system architecture allows any accelerator, for instance a graphics processor, to operate at the same processing level as the system's CPU.


Among its main features, HSA defines a unified virtual address space for compute devices: 
where GPUs traditionally have their own memory, separate from the main (CPU) memory, 
HSA requires these devices to share page tables so that devices can exchange data by sharing pointers. 

This is to be supported by custom memory management units. 
To render interoperability possible and also to ease various aspects of programming, 
HSA is intended to be ISA-agnostic for both CPUs and accelerators, and to support high-level programming languages.













=========================================================================
Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap
=========================================================================
https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/amp/

	 There are a software as well as hardware solutions to this problem. 
	 In this article, we will talk about the most efficient hardware solution to process synchronization problems and its implementation. 


Parallel algorithm
------------------
	https://en.wikipedia.org/wiki/Parallel_algorithm
	
	Some problems are easy to divide up into pieces in this way – these are called embarrassingly parallel problems. 
	Examples include many algorithms to solve Rubik's Cubes and find values which result in a given hash.
	
	Some problems cannot be split up into parallel portions, as they require the results from a preceding step to effectively carry on with the next step – these are called inherently serial problems. 
	Examples include iterative numerical methods, such as Newton's method, iterative solutions to the three-body problem, and most of the available algorithms to compute pi (π).
	Some sequential algorithms can be converted into parallel algorithms using automatic parallelization.


Automatic parallelization
-------------------------
	https://en.wikipedia.org/wiki/Automatic_parallelization

	Automatic parallelization, also auto parallelization, or autoparallelization refers to converting sequential code into multi-threaded and/or vectorized code in order to use multiple processors simultaneously in a shared-memory multiprocessor (SMP) machine. 
	Fully automatic parallelization of sequential programs is a challenge because it requires complex program analysis and the best approach may depend upon parameter values that are not known at compilation time



Differences Between Core and CPU
--------------------------------
	https://www.baeldung.com/cs/core-vs-cpu
		CPU
			Processing Component of a Computer System
			One (Uniprocessor) , Multiple (Multiprocessor)
			Controllers; Cache; Processing Cores
			
		Processing Core
			The processing element of a CPU
			One (Single-core), Multiple (Multicore)
			Control Unit; Arithmetic-Logic Unit; Memory ( )





Computational complexity
	https://en.wikipedia.org/wiki/Computational_complexity

Error-tolerant design
	https://en.wikipedia.org/wiki/Error-tolerant_design

Execution (computing)
	https://en.wikipedia.org/wiki/Execution_(computing)

Prefix sum
	https://en.wikipedia.org/wiki/Prefix_sum

Job scheduler
	https://en.wikipedia.org/wiki/Job_scheduler

Directed acyclic graph
	https://en.wikipedia.org/wiki/Directed_acyclic_graph

NP-hardness
	https://en.wikipedia.org/wiki/NP-hardness

Metaheuristic
	https://en.wikipedia.org/wiki/Metaheuristic









Input–output memory management unit
	https://en.wikipedia.org/wiki/Input–output_memory_management_unit

	
Computer cluster
	https://en.wikipedia.org/wiki/Computer_cluster

========================================================	
Distributed computing
	https://en.wikipedia.org/wiki/Distributed_computing
========================================================

	A distributed system is a system whose components are located on different networked computers, 
	which communicate and coordinate their actions by passing messages to one another.
	Distributed computing is a field of computer science that studies distributed systems.

	Examples of distributed systems vary from SOA-based systems to massively multiplayer online games to peer-to-peer applications.

	The terms "concurrent computing", "parallel computing", and "distributed computing" have much overlap, and no clear distinction exists between them.
	In parallel computing, all processors may have access to a shared memory to exchange information between processors.
	In distributed computing, each processor has its own private memory (distributed memory). Information is exchanged by passing messages between the processors.

	-------------
	Architectures
	-------------
	Various hardware and software architectures are used for distributed computing.
	At a lower level, it is necessary to interconnect multiple CPUs with some sort of network, regardless of whether that network is printed onto a circuit board or made up of loosely coupled devices and cables.
	At a higher level, it is necessary to interconnect processes running on those CPUs with some sort of communication system.


	Distributed programming typically falls into one of several basic architectures: 
		Client–server
			Architectures where smart clients contact the server for data then format and display it to the users.
			Input at the client is committed back to the server when it represents a permanent change.

		Three-tier
			Architectures that move the client intelligence to a middle tier so that stateless clients can be used.
			This simplifies application deployment. 
			Most web applications are three-tier.

		n-tier
			Architectures that refer typically to web applications which further forward their requests to other enterprise services.
			This type of application is the one most responsible for the success of application servers.

		Peer-to-peer
			Architectures where there are no special machines that provide a service or manage the network resources.
			Instead all responsibilities are uniformly divided among all machines, known as peers.
			Peers can serve both as clients and as servers.
			Examples of this architecture include BitTorrent and the bitcoin network.

	------------
	Applications
	------------
	Reasons for using distributed systems and distributed computing may include:
		The very nature of an application may require the use of a communication network that connects several computers: 
		for example, data produced in one physical location and required in another location.

	There are many cases in which the use of a single computer would be possible in principle, 
	but the use of a distributed system is beneficial for practical reasons. For example:

		It can allow for much larger storage and memory, faster compute, and higher bandwidth than a single machine.

		It can provide more reliability than a non-distributed system, as there is no single point of failure.
		Moreover, a distributed system may be easier to expand and manage than a MONOLITHIC UNIPROCESSOR SYSTEM.

		It may be more cost-efficient to obtain the desired level of performance by using a cluster of several low-end computers, 
		in comparison with a single high-end computer.

	--------
	Examples
	--------
	Examples of distributed systems and applications of distributed computing include the following:

		telecommunication networks:
			telephone networks and cellular networks,
			computer networks such as the Internet,
			wireless sensor networks,
			routing algorithms;
		network applications:
			World Wide Web and peer-to-peer networks,
			massively multiplayer online games and virtual reality communities,
			distributed databases and distributed database management systems,
			network file systems,
			distributed cache such as burst buffers,
			distributed information processing systems such as banking systems and airline reservation systems;
		real-time process control:
			aircraft control systems,
			industrial control systems;
		parallel computation:
			scientific computing, including cluster computing, grid computing, cloud computing, and various volunteer computing projects,
			distributed rendering in computer graphics.
		peer-to-peer


Single system image
	https://en.wikipedia.org/wiki/Single_system_image

Peer-to-peer
	https://en.wikipedia.org/wiki/Peer-to-peer


Fault tolerance
	https://en.wikipedia.org/wiki/Fault_tolerance



























Putting the “You” in CPU
========================
	https://cpu.land
	
	Linux is just a kernel and needs plenty of userland software like shells and display servers to be usable.
	The kernel in macOS is called XNU and is Unix-like, and the modern Windows kernel is called the NT Kernel.













Understanding CPU statistics
----------------------------
	https://blog.appsignal.com/2018/03/06/understanding-cpu-statistics.html
	
	These eight states are 'user' (us), 'system', (sy), 'nice' (ni), 'idle' (id), 'iowait' (wa), 'hardware interrupt' (hi), 'software interrupt' (si), and 'steal' (st).
	Of these eight, 'system', 'user' and 'idle' are the main states the CPU can be in.
	
	system (sy)
		The "system" CPU state shows the amount of CPU time used by the kernel.
		The kernel is responsible 
		for LOW-LEVEL TASKS, 
		like interacting with the HARDWARE, 
		MEMORY ALLOCATION, 
		communicating between OS PROCESSES, 
		running DEVICE DRIVERS and 
		managing the FILE SYSTEM. 
		Even the CPU SCHEDULER, which determines which process gets access to the CPU, is run by the kernel.

		While usually low, the "system" category can spike when a lot of data is being read from or written to disk, for example. 
		If it stays high for longer periods of time, you might have a problem with a device driver.
	
	user (us)
		One level up, the "user" CPU state shows CPU time used by user space processes.
		These are HIGHER-LEVEL PROCESSES, 
		like your APPLICATION, 
		or the DATABASE SERVER 
		running on your machine.
		
		In short, every CPU time used by anything else than the KERNEL is marked "user", 
		even if it wasn't started from any USER account.
		
		If a user-space process needs access to the HARDWARE, it needs to ask the kernel, meaning that would count towards "system" state.

		Usually, the "user" category uses most of your CPU time.
		If it stays close to the maximum without leaving much idle time for too long, you might have a problem with your application,
		or another utility running on the machine.
	
	nice (ni)
		The "nice" CPU state is a subset of the "user" state and shows the CPU time used by processes that have a positive niceness,
		meaning a lower priority than other tasks. The nice utility is used to start a program with a particular priority.
		The default niceness is 0, but can be set anywhere between 
		
		-20 FOR THE HIGHEST PRIORITY 
		to 
		19 FOR THE LOWEST.
		
		CPU time in the "nice" category marks lower-priority tasks that are run when the CPU has some time left to do extra tasks.
	
	idle (id)
		The "idle" CPU state shows the CPU time that's not actively being used. Internally, idle time is usually calculated 
		by a task with the lowest possible priority (using a positive nice value).

	iowait (wa)
		"iowait" is a sub category of the "idle" state. It marks time spent waiting for input or output operations, like reading or writing to disk.
		When the processor waits for a file to be opened, for example, the time spend will be marked as "iowait".
		Elevated CPU time in the "iowait" category can reveal problems outside of the processor.
		For example, when an in-memory database needs to flush a lot of data to disk, or when memory is swapped to disk.

	Other statistics
		Besides "nice" in "user" and "iowait" in idle,
		there are more subcategories the main CPU states can be divided in.
		The "hardware interrupt" (hi or irq) and "software interrupt" (si, or softirq) categories are time spent servicing interrupts,
		and the "steal" (st) subcategory marks time spent waiting for a virtual CPU in a virtual machine.

Linux Tutorials: mpstat commands examples
-----------------------------------------
	https://www.devopsschool.com/blog/20-mpstat-command-examples-in-linux-unix/
	
nice (Unix)
-----------
	https://en.wikipedia.org/wiki/Nice_(Unix)















================================================
<==>	Parallel Algorithm - Introduction	<==>
================================================
	https://www.tutorialspoint.com/parallel_algorithm/parallel_algorithm_introduction.htm

	What is an Algorithm?

	An algorithm is a sequence of instructions followed to solve a problem.
	While designing an algorithm, we should consider the architecture of computer on which the algorithm will be executed. 
	As per the architecture, there are two types of computers −

	Sequential Computer
	Parallel Computer

	Depending on the architecture of computers, we have two types of algorithms −

	Sequential Algorithm − An algorithm in which some consecutive steps of instructions are executed in a chronological order to solve a problem.
	Parallel Algorithm − The problem is divided into sub-problems and are executed in parallel to get individual outputs. Later on, these individual outputs are combined together to get the final desired output.

	It is not easy to divide a large problem into sub-problems. Sub-problems may have data dependency among them. Therefore, the processors have to communicate with each other to solve the problem.

	It has been found that the time needed by the processors in communicating with each other is more than the actual processing time.
	So, while designing a parallel algorithm, proper CPU utilization should be considered to get an efficient algorithm.

	To design an algorithm properly, we must have a clear idea of the basic model of computation in a parallel computer.


	Model of Computation
	--------------------
		Both sequential and parallel computers operate on a set (stream) of instructions called algorithms.
		These set of instructions (algorithm) instruct the computer about what it has to do in each step.
		
		Depending on the instruction stream and data stream, computers can be classified into four categories −


			1.	Single Instruction stream, Single Data stream (SISD) computers

				 Instruction Stream				  Data Stream
 --------------						-----------					--------
| Control Unit |------------------>| Processor |<------------->| Memory |
 --------------						-----------					--------

 
			2.	Single Instruction stream, Multiple Data stream (SIMD) computers

									 -------------  Data Stream 1	 -------------------
							 ------>| Processor 1 |<--------------->|					|
							|		 -------------					|					|
							|		 -------------  Data Stream 2	| 					|
				Instruction	|------>| Processor 2 |<--------------->| Shared Memory		|
				  Stream	|		 -------------					|					|
 ---------------  			|		 -------------	Data Stream 3	| 		Or			|
| Control Unit	|---------->|------>| Processor 3 |<--------------->|					|
 ---------------			| 		 -------------					| Interconnection	|
 							|		 	   |						| 	network			|
							|			   |						|					|
							|			   |						|					|
							|		 -------------  Data Stream n	|					|
							 ------>| Processor n |<--------------->|					|
							 		 -------------					 -------------------


			3.	Multiple Instruction stream, Single Data stream (MISD) computers

 ----------------  Instruction Stream 1	 -------------
| Control Unit 1 |--------------------->| Processor 1 |<--------
 ----------------						 -------------			|
 ----------------  Instruction Stream 2  -------------			|
| Control Unit 2 |--------------------->| Processor 2 |<--------|
 ----------------				  		 -------------			|
 ----------------  Instruction Stream 3  -------------			| Data Stream  --------
| Control Unit 3 |--------------------->| Processor 3 |<--------|<------------| Memory |
 ----------------				 		 -------------			|			   --------
		|									   |				|
		|									   |				|
		|									   |				|
 ----------------  Instruction Stream n	 -------------			|
| Control Unit n |--------------------->| Processor n |<--------
 ----------------						 -------------

	
			4.	Multiple Instruction stream, Multiple Data stream (MIMD) computers

 ----------------  Instruction Stream 1	 -------------   Data Stream 1	 -------------------
| Control Unit 1 |--------------------->| Processor 1 |<--------------->|					|
 ----------------						 -------------					|					|
 ----------------  Instruction Stream 2  -------------   Data Stream 2	|					|
| Control Unit 2 |--------------------->| Processor 2 |<--------------->|	Shared Memory	|
 ----------------						 -------------					|					|
 ----------------  Instruction Stream 3  -------------	 Data Stream 3	| 		Or			|
| Control Unit 3 |--------------------->| Processor 3 |<--------------->| 					|
 ----------------						 -------------					|	Interconnection |
		|							 			|						|		network		|
		|										|						|					|
		|										|						|					|
 ----------------  Instruction Stream n	 -------------   Data Stream n	|					|
| Control Unit n |--------------------->| Processor n |<--------------->|					|
 ----------------						 -------------					 -------------------


============
<=>	Note <=>
============

	An MIMD computer that shares a common memory is known as multiprocessors, while those that uses an interconnection network is known as multicomputers.

	Based on the physical distance of the processors, multicomputers are of two types −

	Multicomputer − When all the processors are very close to one another (e.g., in the same room).

	Distributed system − When all the processors are far away from one another (e.g.- in the different cities)

=============================
Parallel Algorithm - Analysis
=============================

	https://www.tutorialspoint.com/parallel_algorithm/parallel_algorithm_analysis.htm

	Analysis of an algorithm helps us determine whether the algorithm is useful or not.
	Generally, an algorithm is analyzed based on its execution time (Time Complexity) and the amount of space (Space Complexity) it requires.

	Parallel algorithms are designed to improve the computation speed of a computer. For analyzing a Parallel Algorithm, we normally consider the following parameters −

	-	Time complexity (Execution Time),
	-	Total number of processors used, and
	-	Total cost.

	Time Complexity
	---------------
	The main reason behind developing parallel algorithms was to reduce the computation time of an algorithm.
	Thus, evaluating the execution time of an algorithm is extremely important in analyzing its efficiency.

	Execution time is measured on the basis of the time taken by the algorithm to solve a problem.
	The total execution time is calculated from the moment when the algorithm starts executing to the moment it stops.
	If all the processors do not start or end execution at the same time, then the total execution time of the algorithm is the 
	moment when the first processor started its execution to the moment when the last processor stops its execution.

	Time complexity of an algorithm can be classified into three categories−
		-	Worst-case complexity
		-	Average-case complexity 
		-	Best-case complexity 

	Asymptotic Analysis
	-------------------
	The complexity or efficiency of an algorithm is the number of steps executed by the algorithm to get the desired output.
	Asymptotic analysis is done to calculate the complexity of an algorithm in its theoretical analysis.
	In asymptotic analysis, a large length of input is used to calculate the complexity function of the algorithm.

	Note − Asymptotic is a condition where a line tends to meet a curve, but they do not intersect.
		   Here the line and the curve is asymptotic to each other.

	Asymptotic notation is the easiest way to describe the fastest and slowest possible execution time for an algorithm using high bounds and low bounds on speed.
	For this, we use the following notations −
		-	Big O notation
		-	Omega notation
		-	Theta notation

	Speedup of an Algorithm
	-----------------------

	Number of Processors Used
	-------------------------
	The number of processors used is an important factor in analyzing the efficiency of a parallel algorithm.
	The cost to buy, maintain, and run the computers are calculated. Larger the number of processors used by an algorithm to solve a problem, more costly becomes the obtained result.

===========================
Parallel Algorithm - Models
===========================
	The model of a parallel algorithm is developed by considering a strategy for dividing the data and processing method and applying a suitable strategy to reduce interactions.
	In this chapter, we will discuss the following Parallel Algorithm Models −

	-	Data parallel model
	-	Task graph model
	-	Work pool model
	-	Master slave model
	-	Producer consumer or pipeline model
	-	Hybrid model

	-------------
	Data Parallel
	-------------
		In data parallel model, tasks are assigned to processes and each task performs similar types of operations on different data.
		Data parallelism is a consequence of single operations that is being applied on multiple data items.

		Data-parallel model can be applied on shared-address spaces and message-passing paradigms.
		In data-parallel model, interaction overheads can be reduced by selecting a locality preserving decomposition,
		by using optimized collective interaction routines, or by overlapping computation and interaction.
		
		The primary characteristic of data-parallel model problems is that the intensity of data parallelism increases with the size of the problem,
		which in turn makes it possible to use more processes to solve larger problems.

		Example − Dense matrix multiplication.


									 -------------  Data Stream 1	 -------------
							 ------>| Processor 1 |<--------------->|			  |
							|		 -------------					|			  |
							|		 -------------  Data Stream 2	|			  |
				Instruction	|------>| Processor 2 |<--------------->|			  |
				  Stream	|		 -------------					|			  |
 ---------------  			|		 -------------	Data Stream 3	|			  |
| Control Unit	|---------->|------>| Processor 3 |<--------------->| Memory Unit |
 ---------------			| 		 -------------					|			  |
							|		 	   |						|			  |
							|			   |						|			  |
							|			   |						|			  |
							|		 -------------  Data Stream n	|			  |
							 ------>| Processor n |<--------------->|			  |
									 -------------					 -------------

	----------------
	Task Graph Model
	----------------
		In the task graph model, parallelism is expressed by a task graph.
		A task graph can be either trivial or nontrivial. In this model, the correlation among the tasks are utilized to promote locality or to minimize interaction costs.
		This model is enforced to solve problems in which the quantity of data associated with the tasks is huge compared to the number of computation associated with them. 
		The tasks are assigned to help improve the cost of data movement among the tasks.

		Examples − Parallel quick sort, sparse matrix factorization, and parallel algorithms derived via divide-and-conquer approach.

					 ------> Task 2	------>	Task 5 ------> Task 6
					|						   /\			 /\
					|						   |			 |
		Task 1	----|------> Task 3 ----------- 		  	 |
					|								  	  	 |
					 ------> Task 4 -------------------------

		Here, problems are divided into atomic tasks and implemented as a graph.
		Each task is an independent unit of job that has dependencies on one or more antecedent task.
		After the completion of a task, the output of an antecedent task is passed to the dependent task.
		A task with antecedent task starts execution only when its entire antecedent task is completed.
		The final output of the graph is received when the last dependent task is completed.

	---------------
	Work Pool Model
	---------------
		In work pool model, tasks are dynamically assigned to the processes for balancing the load.
		Therefore, any process may potentially execute any task.
		This model is used when the quantity of data associated with tasks is comparatively smaller than the computation associated with the tasks.	
		
		There is no desired pre-assigning of tasks onto the processes.
		Assigning of tasks is centralized or decentralized.
		Pointers to the tasks are saved in a physically shared list, in a priority queue, or in a hash table or tree, or they could be saved in a physically distributed data structure.
		
		The task may be available in the beginning, or may be generated dynamically.
		If the task is generated dynamically and a decentralized assigning of task is done, then a termination detection algorithm is required so that all the processes can actually detect the completion of the entire program and stop looking for more tasks.
		
		Example − Parallel tree search


						 ---------------
						|	Process 1	|
						 ---------------
							  |
 ---------------			  |			 	 ---------------
|	Process n	|---------	  |	   ---------|	Process 2	|
 ---------------		  |	  |	  |		 	 ---------------
						  |	  |	  |
 ---------------		 -----------		 ---------------
|	Process 7	|-------|	Work	|-------|	Process 3	|
 ---------------		 -----------		 ---------------
						  |	  |   |
 ---------------		  |	  |	  |			 ---------------
|	Process 6	|---------	  |	   --------	|	Process 4	|
 ---------------			  |				 ---------------
							  |
						 ---------------
						|	Process 5	|
						 ---------------

	------------------	
	Master-Slave Model
	------------------
		In the master-slave model, one or more master processes generate task and allocate it to slave processes.
		The tasks may be allocated beforehand if −

			-	the master can estimate the volume of the tasks, or
			-	a random assigning can do a satisfactory job of balancing load, or
			-	slaves are assigned smaller pieces of task at different times.

		This model is generally equally suitable to shared-address-space or message-passing paradigms, since the interaction is naturally two ways.

		In some cases, a task may need to be completed in phases, and the task in each phase must be completed before the task in the next phases can be generated.
		The master-slave model can be generalized to hierarchical or multi-level master-slave model in which the top level master feeds the large portion of tasks to the second-level master, 
		who further subdivides the tasks among its own slaves and may perform a part of the task itself.

											 -------------------
											|	Master Process	|---------------------------
											 -------------------							|
											  |		|	|									|
								 -------------		|	 -----------						|
								|					|				|						|
						 ----------------	 ----------------	----------------   ----------------
						| Slave Process 1|	| Slave Process 2| | Slave Process 3| | Slave Process 4|
						 ----------------	 ----------------	----------------   ----------------


		Precautions in using the master-slave model

		Care should be taken to assure that the master does not become a congestion point.
		It may happen if the tasks are too small or the workers are comparatively fast.

		The tasks should be selected in a way that the cost of performing a task dominates the cost of communication and the cost of synchronization.

		Asynchronous interaction may help overlap interaction and the computation associated with work generation by the master.

	--------------
	Pipeline Model
	--------------
		It is also known as the producer-consumer model. Here a set of data is passed on through a series of processes, each of which performs some task on it.
		Here, the arrival of new data generates the execution of a new task by a process in the queue. The processes could form a queue in the shape of linear or multidimensional arrays, trees, or general graphs with or without cycles.

		This model is a chain of producers and consumers. Each process in the queue can be considered as a consumer of a sequence of data items for the process preceding it in the queue and as a producer of data for the process following it in the queue.
		The queue does not need to be a linear chain; it can be a directed graph. The most common interaction minimization technique applicable to this model is overlapping interaction with computation.

		Example − Parallel LU factorization algorithm.

																	----------
								   ------------------------------->| Consumer |
								  |									----------
								  |
					 ---   ---	 ---   ---			 ---
					| T | | T | | T | | T |			| T	|
					| a | | a | | a | | a |			| a	|
 ----------			| s | | s | | s | | s |			| s	|			----------
| Producer |------->| k | | k | | k | | k |---------| k	|--------->| Consumer |
 ----------			|	| |   | |	| |	  |			|	|			----------
					| 1 | | 2 | | 3 | | 4 |			| n	|
					|	| |   | |	| |	  |			|	|
					 ---   ---   ---   ---			 ---
										|
										|							----------
										 ------------------------->| Consumer |
																	----------
	-------------
	Hybrid Models
	-------------
		A hybrid algorithm model is required when more than one model may be needed to solve a problem.

		A hybrid model may be composed of either multiple models applied hierarchically or multiple models applied sequentially to different phases of a parallel algorithm.

		Example − Parallel quick sort














==============================
Algorithms for Modern Hardware
==============================
	https://en.algorithmica.org/hpc/

	Instruction-Level Parallelism
	https://en.algorithmica.org/hpc/pipelining/

	Memory-Level Parallelism
	https://en.algorithmica.org/hpc/cpu-cache/mlp/

	SIMD(Single Instruction stream, Multiple Data stream) Parallelism
	https://en.algorithmica.org/hpc/simd/
















Understanding Processes, Threads and CPU Cores
----------------------------------------------
https://kishoreconnect.com/understanding-processes-threads-and-cpu-cores

	CPU Cores

		Central Processing Unit (CPU) is capable of running single process or thread at any given time. 
		Back in Pentium 4 single core processor days the computer executes only one process or thread at a time, and performs effective switching (context switching) from one thread to another in negligible time that gives an illusion of simultaneous execution, this is called Concurrency.
		It is not possible to perform a true parallel execution of threads in single core processor. If a process or thread runs in infinite loop, the whole computer becomes unresponsive.

		Now, how can we make a processor to truly perform multiple tasks parallelly? 
		You are right, add more CPUs. All the modern processors are multi-core processors, meaning, a single physical processor will have more than one CPUs in it, is called cores. 
		Multi-core processors are capable to run more than one process or thread at the same time. 
		Example, a quad-core processor has 4 CPU cores, it can run 4 processes or threads at the same time in parallel is called Parallelism.
		Here if a thread runs in infinite loop, it doesn't block the whole computer as we still have 3 CPU cores continue to execute. 
		Using a multi-core processor naturally increases the performance of a program and does natively support Parallelism.


An Overview of Computer Language Levels from Low-Level Binary to High-Level Programming Languages such as Python
================================================================================================================
https://www.cs.mtsu.edu/~xyang/2170/computerLanguages.html
or
https://www.scribd.com/document/503454305/Levels-of-Computer-Languages

Over the years, computer languages have been evolved from Low-Level to High-Level Languages.
In the earliest days of computers, only Binary Language was used to write programs.
The computer languages are classified as follows:

1.	High Level Language
		Similar to human language
		COBOL, FORTRAN, BASIC C, C++, JAVA

2.	Middle Level Language
		Assembly Language
		Use mnemonics to create instructions

3.	Low Level Language
		Machine Language
			Machine Code -> Hexadecimal representations of Binary Code Read by the Operating System
		Binary Language
			Binary Code -> Binary code read by Hardware Not Human Readable
		Use 1's & 0's to create instructions

4.	Hardware






Difference between Concurrency and Parallelism
	https://www.geeksforgeeks.org/difference-between-concurrency-and-parallelism/

====================================================
Monitoring RAM, CPU and Battery Usage On Your iPhone
====================================================	
	https://www.switchingtomac.com/tutorials/iphone/monitoring-ram-cpu-and-battery-usage-on-your-iphone/amp/

	The Lirum Device Info Lite app is available for free and can help you retrieve your iPhone’s specifications while monitoring its performance.

	General
		Device Name (Device Name)														iPhone
		Model Identifier (Device Model ID)												iPhone14,3
		Model Name (iOS Device Model Name)												iPhone 13 Pro Max
		Model Region (Region codes - country/continent where the device was intend to be sold)	LL/A [USA, Canada, Some Repl. Parts Units]
		Total Storage (Total Storage)													255.88 GB
		Available Storage (Total Storage Available)										110.54 GB [43.1993%]
		Storage in Use [Total Storage Used]												145.34 GB [56.8007%]
		Model Number (Device Model Number)												A2484/A2641/A2644/A2645/A2643
		Hardware Model (Device Hardware Model)											D64AP
		Hardware Machine (Device Hardware Machine Model)								iPhone14,3
		First Release (Date of Commercial Release)										10/2021
		Announced (Date of Announcement)												10/2021
		Initial OS Version (Initial iOS Version installed on model)						iOS 15.0
		iOS Version Installed (Currently installed version of iOS in this device)		17.2.1
		Latest OS Version (Latest iOS Version supported by the model)					13.2.3
		OS Type (Operating System Type/Family)											Darwin
		OS Build (Operating System Build)												21C66
		OS Kernel Info (Current Kernel Version Information) 							Darwin Kernel Version 23.2.0: Sun Nov 12 06:35:16 PST 2023; root:xnu-10002.60.75.0.3~27/RELEASE_ARM64_T8110
		Max Index Nodes (Max Index Nodes)												12000
		Max Processes (Max Simultaneous Processes per User)								2000
		Uptime (Time since last boot)													29h:16m:09s
		Last Boot (Time of the last Boot)												2/12/24, 2:31:59PM India Standard Time

	Display
		Size (Screen Diagonal Size (Metric units))										170mm
		Area (Screen Area (Metric units))												-
		Resolution (Screen Resolution)													2778x1284
		Retina Display (Resolution considered 'Retina display')							Yes
		Pixels (Pixel Count of the Screen)												3566952
		Density (Display density in pixels per inch)									458 ppi
		Aspect Ratio (Aspect Ratio (width/height) of the screen)						-
		Color Depth (Number of bits representing a pixel)								24-bit
		Amount of Colors (Number of colors the display is able to represent)			16777216
		Contrast Ratio (Ration of luminance between black and white)					2000000:1
		Display Type (Type of Display Technology)										OLED
		Wide Color Gamut (Display Wide Color Gamut)										Yes
		GPU Model (Graphics Processing Unit)											Unnamed Apple designed GPU
		GPU Cores (Amount of Cores in the GPU die)										5
		GPU Clock (GPU Internal Clock)													N/A
		Latest OpenGL version (Latest OpenGL Version supported)							N/A
		OpenGL Version (OpenGL Version)													OpenGL ES 2.0 Metal - 99
		OpenGL Vendor (OpenGL Vendor)													Apple Inc.
		OpenGL extensions (OpenGL extensions)											GL_OES_depth_texture
																						GL_OES_depth_texture_cube_map
																						GL_OES_depth24
																						GL_OES_element_index_unit
																						GL_OES_fbo_render_mimap
																						GL_OES_mapbuffer
																						GL_OES_packed_depth_stencil
																						GL_OES_rgb8_rgba8
																						GL_OES_standard_derivatives
																						GL_OES_texture_float
																						GL_OES_texture_half_float
																						GL_OES_texture_half_float_linear
																						GL_OES_vertex_array_object
																						GL_EXT_blend_minmax
																						GL_EXT_color_buffer_half_float
																						GL_EXT_debug_label
																						GL_EXT_debug_marker
																						GL_EXT_discard_framebuffer
																						GL_EXT_draw_instanced
																						GL_EXT_instanced_arrays
																						GL_EXT_map_buffer_range
																						GL_EXT_occlusion_query_boolean
																						GL_EXT_pvrtc_sRGB
																						GL_EXT_read_format_bgra
																						GL_EXT_separate_shader_objects
																						GL_EXT_shader_framebuffer_fetch
																						GL_EXT_texture_lod
																						GL_EXT_shadow_samplers
																						GL_EXT_sRGB
																						GL_EXT_texture_filter_anisotropic
																						GL_EXT_texture_rg
																						GL_EXT_texture_storage
																						GL_APPLE_clip_distance
																						GL_APPLE_color_buffer_packed_float
																						GL_APPLE_copy_texture_levels
																						GL_APPLE_framebuffer_multisample
																						GL_APPLE_rgb_422
																						GL_APPLE_sync
																						GL_APPLE_texture_format_BGRA8888
																						GL_APPLE_texture_max_level
																						GL_APPLE_texture_packed_float
																						GL_IMG_read_format
																						GL_IMG_texture_compression_pvrtc


	Dimensions
		Width (Width of the device (Metric units))										78.1mm
		Height (Height of the device (Metric units))									160.8mm
		Depth (Depth of the device(Metric units))										7.65mm
		Weight (Weight of the device (Metric units))									238g

	CPU
		CPU Usage (Current CPU load in %)												34.671%
		CPU Name (Internal CPU Name and Architecture)									Apple A15 Bionic
		Cores (Amount of CPU Cores)														6
		Total # of Cores (Total amount of CPU Cores (active / inactive))				6
		Max Simultaneous Cores (Maximum amount of simultaneous active CPU Cores)		6
		High Performance Cores (High Performance Cores - activated under high load)		2
		Low Power Cores	(Power Efficient CPU Cores - activated under lower load)		4
		CPU Core Base (Base Architecture of the CPU)									Custom ARMv8
		Neural Engine (Presence of a Neural Engine)										Yes
		Motion CoProcessor (Model of Motion CoProcessor integrated)
		CPU Type (CPU Type)																64 bits
		CPU Actual Clock (Actual clock of the Device's CPU)
		CPU Maximum Clock (Maximum Clock of the CPU)									3.23 GHz
		Manufacturing Process (CPU Photolithography length of each cell)				5 nm
		CPU Pipeline Depth (Instruction Pipeline Size)									N/A
		Cache L1 (CPU Cache Level 1 Size)												192 KB (128 KB Instr / 64KB Data)
		Cache L2 (CPU Cache Level 2 Size)												4 MB
		Cache L3 (CPU Cache Level 3 Size)												N/A
		Instruction Set	(Instruction Set Architecture)									ARM v8. 4-A
		CPU Issue Width (Max number of instructions issued per cycle)					2
		Out of Order Execution (CPU supports Out of Order Execution)					Yes
		Designed By (Processor designed by)												Apple Inc
		Manufacturer (Manufacturer of the Device's Processor / SoC)						TSMC

	System
		Bus Frequency (System Bus Clock)												N/A
		Bus Width (System Bus Width)													64-bit
		Memory (Total size of RAM Memory)												6 GB
		Memory Clock (Memory Bus Frequency)												N/A
		Memory Type (Memory Technology)													LPDDR4X DRAM
		RAM Free (Free RAM (memory that is not being used))								168.7224 MB
		RAM Active (Active RAM (memory currently in usage))								1.4642 GB
		RAM Wired (Inactive RAM (memory that can't be be moved to storage))				1.1892 GB
		RAM Inactive (Inactive RAM (recently used memory that is not actively in use))	1.3173 GB
		Memory Pagesize (Default Memory Pagesize)										16,384 bytes
		Memory Pages (Total amount of memory pages)										252741

	Connectivity
		External IP (External IP (touch to Reload))										106.79.205.247
		Active Connection (Currently Active Connection)									Cell
		Wireless IP (Current IP Address of the Wireless Adapter)
		Wifi Netmask (Wifi Netmask)
		Wifi Broadcast (Wifi Broadcast)
		Wifi Interface (Wifi Interface Code)											en0
		Cell Network IP (IP Address of the cellular connection)							10.17.66.36
		Cell Netmask (Cell Netmask)														255.255.255.255
		Cell Broadcast (Cell Broadcast)													10.17.66.36
		Cell Interface (Cell Interface Code)											pdp_ip0
		Radio Technology (Cell Network Radio Technology)								LTE
		Cell Carrier (Cellular Carrier Name)											Vodafone India
		Mobile Country Code (Mobile Country Code)										404
		Allows VOIP (Cell Network allows VOIP)											Yes
		Wifi Sent (Wifi data sent since last boot)										183.1240 MB
		Wifi Received (Wifi data received since last boot)								3.7038 GB
		WWAN Sent (Cell data sent since last boot)										263.9135 MB
		WWAN Received (Cell data received since last boot)								2.6778 GB
		Wifi 802.11b (Indicates device support for Wireless-b)							Yes
		Wifi 802.11g (Indicates device support for Wireless-g)							Yes
		Wifi 802.11n (Indicates device support for Wireless-n)							Yes
		Wifi 802.11ac (Indicates device support for Wireless-ac)						Yes
		Bluetooth Version (Version of the Bluetooth protocol)							5
		Bluetooth A2DP (Bluetooth Advanced Audio Distribution Profile)					Yes
		Bluetooth PBAP Profile (Phone Book Access Profile Support)						Yes
		Bluetooth PAN Profile (Personal Area Networking Profile Support)				Yes
		Bluetooth HID Profile (Human Interface Device Profile)							Yes
		Bluetooth HFP 1.5 (Hands-Free Profile [v 1.5])									Yes
		Bluetooth EDR (Bluetooth Enhanced Data Rate)									Yes
		Bluetooth AVRCP (Audio/Video Remote Control Profile)							Yes
		2G GSM (2G GSM Bands)															Depends on submodel
		2G CDMA (2G CDMA Bands)															Depends on submodel
		3G GSM (3G GSM Bands)															Depends on submodel
		3G CDMA (3G CDMA Bands)															Depends on submodel
		LTE (Long Term Evolution(4G))													Depends on submodel
		CDMA Types (Supported CDMA Types)												Depends on submodel
		GPRS Support (General Packet Radio Service Support)								Yes
		EDGE Support (Enhanced Data Rates for GSM Evolution Support)					Yes
		UMTS Protocols (Universal Mobile Telecommunications System Protocols)			HSDPA+/DC-HSDPA
		EDGE Max Download Speed (Maximum Download Speed under EDGE)						384kbps
		EDGE Max Upload Speed (Maximum Upload Speed under EDGE)							384kbps
		DC-HSDPA Max Upload Speed (Maximum Download Speed under Dual Cell HSDPA)		42Mbps
		HSDPA Max Download Speed (Maximum Download Speed under HSDPA)					21Mbps
		HSUPA Max Upload Speed (Maximum Upload Speed under HSUPA)						5.76Mbps
		CDMA Rev A Max Download Speed (Maximum Download Speed under CDMA Rev A)			3.1Mbps
		CDMA Rev A Max Upload Speed (Maximum Upload Speed under CDMA Rev A)				1.8Mbps
		CDMA Rev B Max Download (Maximum Download Speed under CDMA Rev B)				14.7Mbps
		CDMA Rev B Max Upload (Maximum Upload Speed under CDMA Rev B)					5.4Mbps
		LTE 4G Max Download Speed (Maximum Download Speed under LTE)					450Mbps
		LTE 4G Max Upload Speed (Maximum Upload Speed under LTE)						450Mbps
		Max Cellular Upload (Maximum overall cellular upload speed)						450Mbps over LTE-A
		Max Cellular Download (Maximum overall cellular download speed)					450Mbps over LTE-A
		SIM Card Format (SIM Card Format)												4FF
		SIM Card Slot (SIM Card Slot)													Nano-SIM
		Nike+ (Built in support for Nike+iPod Sports Kit)								No

	Connectivity
		External IP (External IP (touch to Reload))										49.205.137.132
		Active Connection (Currently Active Connection)									Wifi
		Wireless IP (Current IP Address of the Wireless Adapter)						192.168.0.109
		Wifi Netmask (Wifi Netmask)														255.255.255.0
		Wifi Broadcast (Wifi Broadcast)													192.168.0.255
		Wifi Interface (Wifi Interface Code)											en0
		Cell Network IP (IP Address of the cellular connection)							10.27.117.44
		Cell Netmask (Cell Netmask)														255.255.255.255
		Cell Broadcast (Cell Broadcast)													10.27.117.44
		Radio Technology (Cell Network Radio Technology)								LTE
		Cell Carrier (Cellular Carrier Name)											Vodafone India
		Mobile Country Code (Mobile Country Code)										404
		Allows VOIP (Cell Network allows VOIP)											Yes

	Camera
		Back Cam Resolution (Resolution of the Primary Camera)							12MP
		Back Cam Pixels (Resolution of the Primary Camera in pixels (w/h))				4032x3024
		Back Cam Total Pixels (Number of Pixels of the Primary Camera)					12192768
		Back Cam Focal Ratio (Primary Cam Focal Ratio)									N/A
		Double Main Camera (Device has Double Primary Camera)							Yes
		Optical Zoom (Camera's Optical Zoom)											2
		Front Cam Resolution (Secondary Cam Resolution)									12MP
		Front Cam Pixels (Resolution of the Secondary Camera in pixels(w/h))			4032x3024
		Front Cam Total Pixels (Number of Pixels of the Secondary Camera)				12192768
		Focus Pixels (Focus Pixels)														Yes
		Tap to Focus (Tap to Focus Feature)												Yes
		Macro Focus (Ability to focus small close objects)								Yes
		White Balance (Color Temperature adjustment feature)							Yes
		IR Filter (Infrared Filter)														Yes
		Geo Tagging (Ability to include GPS location information in the photo)			Yes
		Face Detection (Automatic Face Detection Feature)								Yes
		LED Flash (Primary Camera LED Flash)											Yes
		HDR (High Dynamic Range Rendering)												Yes
		Video Resolution (Primary Camera Video Recording Resolution)					4K
		Video Recording fps (Frames per Second of the Video Recording feature)			60fps
		LED Video Light (LED illumination during Video Recording)						Yes
		TrueTone Flash(TrueTone Flash)													Quad LED
		Flash Flicker Sensor (Flash Flicker Sensor)										1
		Video Stabilization (Video Stabilization during Video Recording)				Yes


	Battery
		Battery Charge (Current Available Charge)										====
		Type (Type of Battery)															Lithium-ion polymer
		Wireless Charging (Built-in Wireless Charging)									Yes
		Designed Capacity (Battery Capacity, or Electric Charge (when new))				4352 mAh
		Full Voltage (Battery Voltage, when fully charged)								3.83V
		Energy (Amount of Energy)														17.02 Wh
		Energy (SI) (Amount of Energy (International System of Units))					N/A
		Battery Cycles (Current count of Battery Cycles)								[N/A]
		Battery Current Charge (Battery Charge in mAh)									[N/A]
		Battery Designed Max (Battery Charge when in mint condition)					4352mAh
		Battery Actual Max (Battery Actual Maximum Charge)								[N/A]
		Battery Instant Amperage (Battery Charging/Discharging Current in mA)			[N/A]
		Battery Temperature (Temperature reported by the Battery sensor)				[N/A]
		Battery Actual Voltage (Battery Actual Voltage)									[N/A]
		Charge Max Current (Maximum Current of the Charger)								[N/A]
		Power Adapter (Power Adapter Name or ID)										[N/A]
		Charger Voltage (Charger Output Voltage)										[N/A]
		Charger Wattage (Charger Output Power)											[N/A]


	Sensors and Hardware
	Regional / Location Settings
	Other Information








===============================
<=>		Activity Monitor	<=>
===============================

In my MAC, Activity Monitor shows 5 tabs CPU, Memory, Energy, Disk, Network

Also Right Click on Activity Monitor and Select

Monitors -> Show CPU Usage

It shows 4 Cores in GUI, Core 1, Core 2, Core 3, Core 4 

 -----------------------------------
|  O O O							|
|-----------------------------------|
|									|
|	 ---	 ---	 ---	 ---	|
|	|	|	|	|	|	|	|	|	|
|	|	|	|	|	|	|	|	|	|
|	|	|	|	|	|	|	|	|	|
|	|	|	|---|	|	|	|	|	|
|	|---|	|---|	|	|	|	|	|
|	|---|	|---|	|---|	|	|	|
|	|---|	|---|	|---|	|---|	|
|	 ---	 ---	 ---	 ---	|
|									|
 -----------------------------------

Monitors ->	Show CPU History

It shows 4 Cores in GUI, Core 1, Core 2, Core 3, Core 4

 ------------------------------------------
|  O O O		CPU History				   |
|------------------------------------------|
|  ------------------  ------------------  |
| | Core 1			 || Core 2			 | |
| |					 ||					 | |
| |-   --	 ---	 ||-----	  -------| |
| |	---	 ----	-----||		------		 | |
|  ------------------  ------------------  |
|  ------------------  ------------------  |
| | Core 3			 || Core 4			 | |
| |					 ||---				 | |
| |---------  -------||	  ----		-----| |
| |			--		 ||		  ------	 | |
|  ------------------  ------------------  |
 ------------------------------------------


1.	CPU	-> 28 columns

	Process Name
	Process ID (PID)
	% CPU
	CPU Time
	# Threads
	# Ports
	User
	% GPU
	GPU Time
	Real Memory
	Real Private Memory
	Real Shared Memory
	Sudden Termination
	Sandbox
	Restricted
	Idle Wake Ups
	Energy Impact
	App Nap
	Sent Bytes
	Sent Packets
	Received Bytes
	Received Packets
	Purgeable Memory
	Memory
	Compressed Memory
	Bytes Written
	Bytes Read
	Preventing Sleep

=========================================================================
|	System:	5.82%		<==>	CPU LOAD	<==>	Threads:	1864	|
|	User:	36.20%		<==>				<==>	Processes:	508		|
|	Idle:	60.28%		<==>				<==>						|
=========================================================================



2.	Memory -> 28 columns
	
	Process Name
	Process ID (PID)
	Memory
	# Threads
	# Ports
	User
	% CPU
	CPU Time
	% GPU
	GPU Time
	Real Memory
	Real Private Memory
	Real Shared Memory
	Sudden Termination
	Sandbox
	Restricted
	Idle Wake Ups
	Energy Impact
	App Nap
	Sent Bytes
	Sent Packets
	Received Bytes
	Received Packets
	Purgeable Memory
	Compressed Memory
	Bytes Written
	Bytes Read
	Preventing Sleep

=================================================================================
|	MEMORY PRESSURE		|	Physical Memory:	8.00 GB		|	App Memory:		|
|						|	Memory Used:		6.68 GB		|	Wired Memory:	|
|						|	Cached Files:		1.26 GB		|	Compressed:		|
|						|	Swap Used:			6.05 GB		|					|
=================================================================================


3.	Energy -> 29

	App Name
	Process ID (PID)
	Energy Impact
	12 hr Power
	App Nap
	Preventing Sleep
	User
	% CPU
	CPU Time
	% GPU
	GPU Time
	# Threads
	# Ports
	Real Memory
	Real Private Memory
	Real Shared Memory
	Sudden Termination
	Sandbox
	Restricted
	Idle Wake Ups	
	Sent Bytes
	Sent Packets
	Received Bytes
	Received Packets
	Purgeable Memory
	Memory
	Compressed Memory
	Bytes Written
	Bytes Read

=====================================================================================
|	ENERGY IMPACT		|	Remaining charge:	56%		|	BATTERY (Last 12 hours)	|
|						|	Time remaining:		0:58	|							|
|						|	Time on battery:	0:41	|							|
=====================================================================================


4.	Disk -> 28

	Process Name
	Process ID (PID)
	Bytes Written
	Bytes Read
	User
	Memory
	# Threads
	# Ports
	% CPU
	CPU Time
	% GPU
	GPU Time
	Real Memory
	Real Private Memory
	Real Shared Memory
	Sudden Termination
	Sandbox
	Restricted
	Idle Wake Ups
	Energy Impact
	App Nap
	Sent Bytes
	Sent Packets
	Received Bytes
	Received Packets
	Purgeable Memory
	Compressed Memory
	Preventing Sleep

=========================================================================================
|	Reads in:		12,704,219		|		IO		|	Data read:			964.27 GB	|
|	Writes out:		5,980,902		|				|	Data written:		887.55 GB	|
|	Reads in/sec:	10				|				|	Data read/sec:		154 KB		|
|	Writes out/sec	21				|				|	Data written/sec:	0 bytes		|
=========================================================================================

=========================================================================================
|	Reads in:		12,704,219		|		DATA	|	Data read:			964.27 GB	|
|	Writes out:		5,980,902		|				|	Data written:		887.55 GB	|
|	Reads in/sec:	10				|				|	Data read/sec:		154 KB		|
|	Writes out/sec	21				|				|	Data written/sec:	0 bytes		|
=========================================================================================


5.	Network -> 28

	Process Name
	Process ID (PID)
	Sent Bytes
	Received Bytes (Rcvd Bytes)
	Sent Packets
	Received Packets (Rcvd Packets)
	User
	Bytes Written
	Bytes Read
	Memory
	# Threads
	# Ports
	% CPU
	CPU Time
	% GPU
	GPU Time
	Real Memory
	Real Private Memory
	Real Shared Memory
	Sudden Termination
	Sandbox
	Restricted
	Idle Wake Ups
	Energy Impact
	App Nap
	Purgeable Memory
	Compressed Memory
	Preventing Sleep

=============================================================================================
|	Packets in:		6,936,192		|		PACKETS		|	Data received:		6.18 GB		|
|	Packets out:	4,246,045		|					|	Data sent:			647.7 MB	|
|	Packets in/sec:	4				|					|	Data received/sec:	512 bytes	|
|	Packets out/sec	1				|					|	Data sent/sec:		200 bytes	|
=============================================================================================

=============================================================================================
|	Packets in:		6,936,192		|		DATA		|	Data received:		6.18 GB		|
|	Packets out:	4,246,045		|					|	Data sent:			647.7 MB	|
|	Packets in/sec:	4				|					|	Data received/sec:	512 bytes	|
|	Packets out/sec	1				|					|	Data sent/sec:		200 bytes	|
=============================================================================================













===========================
<=>	OS Types and CPUs	<=>
===========================
https://chat.openai.com/share/5d73462c-fb0b-45f8-9e75-75f92ca95c87

Operating system types and cpus in it
-------------------------------------
There are various operating system types, including Windows, macOS, Linux, and Unix. These systems run on different CPU architectures such as x86, x86-64, ARM, and others, depending on the device and platform. Each OS is designed to work with specific CPU types, and compatibility varies across them.
.
.
List operating system types
.
.
List operating system system software types
.
.
List operating system software types

Certainly! Operating system software encompasses various types of programs that manage hardware, provide services to applications, and facilitate user interactions. Here are key types of operating system software:

	1.	Kernel: The core component that manages system resources, such as memory and CPU, and provides essential services to other parts of the operating system.
	2.	Device Drivers: Software that enables communication between the operating system and hardware devices, ensuring proper functionality.
	3.	User Interface (UI): Allows users to interact with the computer. Examples include Command-Line Interface (CLI) and Graphical User Interface (GUI).
	4.	Utilities: Programs that perform specific tasks like disk cleanup, file management, and system maintenance.
	5.	File System: Manages how data is stored, organized, and retrieved on storage devices.
	6.	Networking Software: Facilitates communication between computers in a network, handling tasks like file sharing and internet connectivity.
	7.	Security Software: Includes components like firewalls, antivirus programs, and encryption tools to protect the system from threats.
	8.	Language Translators: Compilers and interpreters that convert high-level programming code into machine code or execute it directly.
	9.	System Libraries: Collections of pre-written code that applications can use, streamlining development and reducing redundancy.
	10.	Shells: Provide an interface for users to interact with the operating system, interpreting commands and executing them.

These components work collaboratively to ensure the efficient operation of a computer system.


List os types like batch os , multi programming os
--------------------------------------------------
Certainly! Here are some types of operating systems based on their functionalities:

	1.	Batch Processing OS: Manages and executes tasks in batches, where a sequence of jobs is submitted without user interaction. Examples include early mainframe systems.
	2.	Multiprogramming OS: Allows multiple programs to run concurrently by sharing the CPU. The OS switches between programs to maximize CPU utilization.
	3.	Time-Sharing OS: Enables multiple users to interact with the system simultaneously by rapidly switching between tasks. Each user feels like they have their dedicated system.
	4.	Real-Time OS: Designed for systems that require immediate response to external events. Common in embedded systems, robotics, and critical applications like aerospace.
	5.	Distributed OS: Coordinates tasks across multiple machines in a network, providing a unified view to users. Enhances reliability and performance.
	6.	Network OS: Focuses on network functions, managing communication between computers and handling distributed resources.
	7.	Mobile OS: Tailored for mobile devices, providing features like touchscreens, power management, and mobile-specific applications. Examples include Android and iOS.
	8.	Embedded OS: Designed for specific embedded systems like appliances, cars, and industrial machines, where real-time operation and reliability are crucial.
	9.	Multiuser OS: Supports multiple users accessing the system simultaneously, providing each with a separate environment.
	10.	Single-User OS: Designed for a single user, typical for personal computers where resources are not shared among multiple users.

These types showcase the diversity of operating systems, each optimized for specific computing environments and requirements.

List few more
-------------
Certainly! Here are a few more types of operating systems:

	1.	Single Tasking OS: Allows only one task or application to run at a time. Older personal computers often used single-tasking operating systems.
	2.	Multitasking OS: Enables concurrent execution of multiple tasks or applications, allowing users to switch between them seamlessly.
	3.	Multithreading OS: Supports multiple threads of execution within a single process, enhancing parallelism and responsiveness.
	4.	Multiprocessor OS: Designed to work on systems with multiple processors, distributing tasks among them to improve performance.
	5.	Clustered OS: Manages a group of interconnected computers (cluster) that work together as a single system to enhance reliability and performance.
	6.	Virtual Machine OS: Runs multiple virtual machines on a single physical machine, allowing different operating systems to coexist and run simultaneously.
	7.	Distributed Real-Time OS: Combines features of distributed and real-time operating systems, suitable for complex real-time applications in distributed environments.
	8.	Hybrid OS: Incorporates elements from different types of operating systems to provide a versatile and adaptable computing environment.
	9.	Symmetric Multiprocessing (SMP) OS: Supports multiprocessing with multiple processors that share a common memory, enabling parallel processing.
	10.	Asymmetric Multiprocessing (AMP) OS: Involves multiple processors with specific roles, where each processor may have its own operating system instance.

These additional types highlight the specialized nature of operating systems and their adaptability to various computing scenarios.

Can a single cpu do multiprocessing?
------------------------------------
Yes, a single CPU can simulate multiprocessing through a technique called "time-sharing" or "time-slicing." In this approach, the CPU rapidly switches between different tasks, giving the APPEARANCE OF PARALLEL EXECUTION.
While the CPU is physically executing only one task at any given moment, it allocates small time slices to each task in a way that creates the illusion of simultaneous processing.

This method is known as "software multiprocessing" and is a form of multitasking. It allows a single CPU to efficiently handle multiple tasks by rapidly switching between them, giving users the perception of CONCURRENT EXECUTION.
However, it's important to note that the actual execution is sequential, with the CPU dividing its processing time among the tasks.

True parallel processing, where multiple tasks are executed simultaneously by separate physical processors, requires a multicore or multiprocessor system. 
Each core or processor in such a system can independently execute its set of instructions, providing true parallelism.

Can a single cpu with multiple cores do multiprocessing?
--------------------------------------------------------
Yes, a single CPU with multiple cores can perform multiprocessing. Each core in a multicore CPU is a separate processing unit capable of executing its own set of instructions independently. 
This allows the CPU to handle multiple tasks simultaneously, achieving parallel processing.

Multicore processors are designed to improve overall system performance by dividing the workload among the different cores. Each core can execute its thread, and the operating system manages the distribution of tasks across these cores.

While it's not the same as having MULTIPLE PHYSICAL PROCESSORS, a multicore CPU can significantly enhance the system's ability to handle multiple tasks concurrently, making it well-suited for multiprocessing scenarios. 
This architecture is common in modern computers, ranging from desktops to servers and even many mobile devices.

Explain multiprocessing of single cpu with multiple cores and multiple cpus that has multiple cores
---------------------------------------------------------------------------------------------------
Sure, let's break down the concepts of multiprocessing in the context of a single CPU with multiple cores and multiple CPUs with multiple cores:

	1. Single CPU with Multiple Cores:

		Overview: 
		- A single CPU with multiple cores refers to a processor chip that houses more than one independent processing unit (core) on a single die.

		Multiprocessing:
		- Each core can execute its set of instructions independently of the others.
		- The operating system (OS) manages task distribution, assigning different tasks to different cores.
		- Simultaneous execution of tasks across multiple cores provides parallelism, improving overall performance.

		Example:
		- Consider a quad-core CPU. It has four processing cores capable of handling four separate threads or tasks concurrently.

	2. Multiple CPUs with Multiple Cores:

		Overview:
		- In this scenario, a system has multiple physical CPU chips, and each CPU chip contains multiple cores.

		Multiprocessing:
		- Multiple CPUs allow for even greater parallelism than a single CPU with multiple cores.
		- The OS distributes tasks not only across cores within a CPU but also across multiple CPUs.

		Example:
		- Imagine a server with two CPUs, each having eight cores. This results in a total of 16 cores available for parallel processing.
		- The OS can allocate tasks to any of these 16 cores based on the system's load and requirements.

		Benefits:
		- Increased processing power: More CPUs and cores lead to greater computational capability.
		- Enhanced parallelism: Multiple CPUs can work on different tasks simultaneously, providing efficient multitasking and responsiveness.

In both cases, whether it's a single CPU with multiple cores or multiple CPUs with multiple cores, the goal is to efficiently handle multiple tasks concurrently, 
improving the overall performance and responsiveness of the system.
The specific benefits depend on factors like the nature of the tasks, the efficiency of task distribution, and the design of the software and hardware components.

Can you explain above scenarios in terms of asymmetric multiprocessing and symmetric multiprocessing
----------------------------------------------------------------------------------------------------
Certainly! Let's delve into the concepts of Asymmetric Multiprocessing (AMP) and Symmetric Multiprocessing (SMP) in the context of the scenarios you've mentioned:

	1. Single CPU with Multiple Cores (Symmetric Multiprocessing - SMP):

		Overview:
		- Symmetric Multiprocessing involves multiple processing units (cores) that are identical and equally capable.
		- Each core has equal access to the system's memory and peripherals.

		In the context of Single CPU with Multiple Cores:
		- All cores in a single CPU have the same architecture and capabilities.
		- The operating system treats each core equally.
		- Tasks are distributed among cores based on load balancing and system optimization.
		- Example: A quad-core CPU where each core is equal and interchangeable.

	2. Multiple CPUs with Multiple Cores (Asymmetric Multiprocessing - AMP):

		Overview:
		- Asymmetric Multiprocessing involves processing units with different capabilities, roles, or priorities.
		- Cores may have distinct functionalities, such as specialized processing units.

		In the context of Multiple CPUs with Multiple Cores:
		- Each CPU may have a different number of cores or serve a specific purpose.
		- Tasks can be assigned to cores or CPUs based on their specific capabilities.
		- It allows for a more specialized allocation of tasks.
		- Example:	A system with two CPUs where one CPU has HIGH-PERFORMANCE CORES for COMPUTE-INTENSIVE TASKS, and the
					other CPU has POWER-EFFICIENT CORES for BACKGROUND PROCESSES.

Comparison:
	SMP provides a more balanced and interchangeable approach, where any core can handle any task.
	AMP allows for task specialization, leveraging the strengths of different cores or CPUs for specific types of workloads.

Benefits:
	SMP excels in scenarios where tasks are relatively uniform and can be distributed equally among cores.
	AMP is beneficial when there are diverse tasks with varying processing requirements, allowing for efficient task allocation to specialized cores or CPUs.

In summary, SMP involves multiple identical cores working together symmetrically, while AMP involves cores or CPUs with potentially different capabilities, 
serving distinct roles in the system. Each approach has its advantages based on the nature of the tasks and the system's requirements.

Can single cpu with multiple cores be asymmetric 
------------------------------------------------
Yes, a single CPU with multiple cores can be configured in an asymmetric multiprocessing (AMP) setup.
In an AMP system, each core may have different capabilities, and they can be assigned specific roles or priorities.
This is in contrast to symmetric multiprocessing (SMP), where all cores are generally considered equal.

In an asymmetric configuration for a single CPU with multiple cores:
	
	1.	Differential Capabilities: Cores may have variations in terms of clock speeds, cache sizes, or other architectural features.
	2.	Task Specialization: Cores can be assigned specific types of tasks based on their capabilities. For example, 
		one core might be optimized for high-performance computing, 
		while another core is designed for power efficiency.	
	3.	Dynamic Allocation: The system or operating system can dynamically assign tasks to cores based on the current workload or performance requirements. 
		This flexibility allows for efficient utilization of resources.
	4.	Specific Workloads:Different cores may be dedicated to specific workloads, such as multimedia processing, background tasks, or real-time processing.

While it's more common to encounter symmetric configurations where all cores are relatively equal, the flexibility of AMP allows for tailoring the system to specific needs.
This kind of configuration can be found in specialized applications or systems where task diversity and optimization are crucial.

Can a single cpu with multiple cores have master slave configuration?
---------------------------------------------------------------------
In a typical single CPU with multiple cores configuration, the cores are generally treated as equals, and tasks are distributed among them by the operating system based on load balancing and system optimization.
However, in some specialized scenarios or designs, a concept similar to a master-slave configuration might be implemented at a higher level, even within a single CPU.

Here's a conceptual breakdown:

	1.	Symmetric Multiprocessing (SMP): In most cases, each core in a multi-core CPU is treated symmetrically, meaning they have equal access to system resources, and tasks can be assigned to any core based on load balancing.	
	2.	Master-Slave Configuration Concept: While not a typical usage within a single CPU, the concept of master-slave could be applied at a higher level, where one core (acting as a "master") 
		is responsible for certain coordination or control tasks, while the other cores (acting as "slaves") perform specific computation or parallel processing tasks.
	3.	Examples: For instance, in some specialized parallel computing scenarios, one core might be responsible for orchestrating the overall computation, distributing tasks, and collecting results (master), while the other cores focus on the actual parallel processing tasks (slaves).
	4.	Task Specialization: This kind of configuration, if implemented, would involve a form of task specialization among the cores, where each core has a specific role within the broader computation.

It's essential to note that the master-slave configuration concept is more commonly associated with distributed computing across multiple processors or systems rather than within a single CPU.
The design of such a configuration would heavily depend on the specific requirements of the application or workload. In typical use cases, the cores within a single CPU are treated symmetrically for optimal load distribution and parallel processing.

Does modern laptops like windows , macOS have single cpu with multiple cores or multiple cpu with multiple cores
----------------------------------------------------------------------------------------------------------------
Modern laptops typically have a single CPU with multiple cores. This configuration is known as a multi-core processor. Both Windows-based laptops and macOS-based laptops commonly utilize multi-core processors to improve performance and handle multitasking efficiently.

For example:
	A laptop might have a quad-core CPU, meaning it has four processing cores on a single chip.
	Some high-end laptops may feature CPUs with six, eight, or even more cores.

Having multiple cores on a single CPU allows the laptop to execute multiple tasks simultaneously, enhancing overall system responsiveness and performance.

While there have been systems with multiple CPUs in the past, the trend in modern laptops is towards multi-core CPUs due to their efficiency in handling parallel workloads without the complexities associated with multiple physical CPUs.

Explain how operating system is spanned or role of operating system in Single CPU with Multiple Cores and Multiple CPU with Multiple Cores 
------------------------------------------------------------------------------------------------------------------------------------------
The role of the operating system (OS) in systems with a single CPU with multiple cores and multiple CPUs with multiple cores involves managing resources, coordinating tasks, and optimizing overall system performance. Let's explore the key aspects for each scenario:

	Single CPU with Multiple Cores:

		1.	Task Scheduling:
			- The OS is responsible for scheduling tasks to run on the available cores.
			- Utilizes algorithms to distribute the workload evenly and efficiently among the cores.
			- Aims to maximize CPU utilization and responsiveness.

		2.	Resource Management:
			- Manages system resources, such as memory, ensuring that each core has access to the necessary data.
			- Coordinates access to shared resources, such as caches and peripherals, to prevent conflicts.

		3.	Concurrency Control:
			- Ensures that multiple tasks can execute concurrently without interfering with each other.
			- Manages synchronization mechanisms to prevent race conditions and ensure data consistency.

		4.	Power Management:
			- Controls power states of cores, optimizing energy consumption when cores are not in heavy use.
			- Balances performance and power efficiency based on the current system load.

	Multiple CPUs with Multiple Cores:

		1.	Task Distribution:
			- Allocates tasks to different CPUs and cores based on system load and task requirements.
			- Balances the workload among multiple CPUs to optimize overall system performance.

		2.	Inter-CPU Communication:
			- Facilitates communication between CPUs when tasks require collaboration or data sharing.
			- Manages data coherence to ensure consistency when multiple CPUs access shared data.

		3.	Load Balancing:
			- Distributes tasks across all available CPUs and cores to avoid overloading specific processors.
			- Ensures efficient utilization of resources for improved system responsiveness.

		4.	Fault Tolerance:
			- Implements strategies for fault tolerance, such as redundancy or task migration, to enhance system reliability in the presence of hardware failures.

		5.	Scalability:
			- Provides scalability by efficiently utilizing the computing power of multiple CPUs and cores, enabling the system to handle increasing workloads.

	In both scenarios, the OS acts as a supervisor, orchestrating the activities of the hardware components to provide a seamless and efficient computing environment.
	Its role is crucial for ensuring that tasks are executed optimally, resources are managed effectively, and the system operates reliably under various conditions.

How many operating systems are used for above scenarios?
--------------------------------------------------------
The number of operating systems used for scenarios involving a single CPU with multiple cores or multiple CPUs with multiple cores 
can vary widely based on the type of devices and the specific requirements of users or organizations.
Here are some commonly used operating systems for these scenarios:

	Single CPU with Multiple Cores:
		
		1.	Windows: Versions of the Windows operating system, such as Windows 10 and Windows 11, are widely used on laptops and desktops with multi-core processors.
		2.	macOS: Apple's macOS, found on MacBook and iMac computers, supports multi-core processors, optimizing performance for tasks on these devices.
		3.	Linux Distributions: Various Linux distributions, like Ubuntu, Fedora, and CentOS, are commonly used on systems with multi-core CPUs, providing versatility and performance.
		
	Multiple CPUs with Multiple Cores:

		1.	Windows Server: In server environments where multiple CPUs with multiple cores are common, versions of Windows Server, such as Windows Server 2019, are widely used.
		2.	Linux Server Distributions: Many server environments leverage Linux server distributions for their flexibility, reliability, and efficiency in managing multiple processors. Examples include CentOS, Ubuntu Server, and Red Hat Enterprise Linux.
		3.	UNIX Variants: Some enterprise-level systems may use UNIX variants like AIX, HP-UX, or Solaris, which are designed to handle complex tasks on servers with multiple processors.
		4.	VMware and Hypervisors: Virtualization platforms, such as VMware ESXi or Microsoft Hyper-V, are used to manage and run multiple operating systems simultaneously on servers with multiple CPUs and cores.
		5.	Custom Embedded OS: In specialized systems, such as embedded devices, custom operating systems tailored for specific hardware configurations may be used.

The choice of operating system depends on factors such as the type of device, user preferences, application requirements, and the specific goals of the computing environment. Each operating system is designed to efficiently utilize the available hardware resources and provide a suitable environment for applications and users.

Will each core have operating system in Single CPU with Multiple Cores and Multiple CPUs with Multiple Cores?
-------------------------------------------------------------------------------------------------------------
In scenarios involving a single CPU with multiple cores or multiple CPUs with multiple cores, typically, each core does not have its own independent operating system.
Instead, there is a single instance of the operating system that manages and coordinates the activities of all the cores in the system. Let's explore how this works in both scenarios:

	Single CPU with Multiple Cores:

		- All the cores within a single CPU share the same memory space and operate under the control of a single instance of the operating system.
		- The operating system's kernel (core component) manages task scheduling, resource allocation, and coordination among the cores.
		- Tasks are distributed among the cores by the operating system based on load balancing and system optimization.
		- The cores work collaboratively to execute the tasks assigned by the operating system.

	Multiple CPUs with Multiple Cores:

		- In systems with multiple CPUs, each CPU may have its own set of cores, and each core within a CPU operates under the same operating system instance.
		- The operating system manages the distribution of tasks across all CPUs and cores in the system.
		- Inter-CPU communication is facilitated by the operating system when tasks require collaboration or data sharing.
		- The operating system ensures that the workload is balanced across all available CPUs to optimize overall system performance.

While there's a single instance of the operating system overseeing the entire system, modern operating systems are designed to leverage multiple cores effectively.
They use techniques like multithreading and multiprocessing to execute tasks concurrently on different cores, thereby improving overall system performance.		

In summary, a single operating system instance is responsible for coordinating and managing the activities of all cores within a CPU or across multiple CPUs in a system.




















===================
Process (computing)
===================
	https://en.wikipedia.org/wiki/Process_(computing)

		In computing, a process is the instance of a computer program that is being executed by one or many threads.
		There are many different process models, some of which are light weight, but almost all processes (even entire virtual machines) are rooted in an operating system (OS) process which comprises the program code,
		assigned system resources, physical and logical access permissions, and data structures to initiate, control and coordinate execution activity. 
		Depending on the OS, a process may be made up of multiple threads of execution that execute instructions concurrently.

=============
Child process
=============
	https://en.wikipedia.org/wiki/Child_process

	A child process in computing is a process created by another process (the parent process). This technique pertains to multitasking operating systems, and is sometimes called a subprocess or traditionally a subtask.
	There are two major procedures for creating a child process: 
		1.	the fork system call (preferred in Unix-like systems and the POSIX standard) and 
		2.	the spawn (preferred in the modern (NT) kernel of Microsoft Windows, as well as in some historical operating systems).

==============	
Parent process
==============
	https://en.wikipedia.org/wiki/Parent_process

		Unix-like systems
		-----------------
		In Unix-like operating systems, every process except process 0 (the swapper) is created when another process executes the fork() system call. The process that invoked fork is the parent process and the newly created process is the child process. Every process (except process 0) has one parent process, but can have many child processes.

		The operating system kernel identifies each process by its process identifier. 
		Process 0 is a special process that is created when the system boots; after forking a child process (process 1), process 0 becomes the swapper process (sometimes also known as the "idle task").
		Process 1, known as init, is the ancestor of every other process in the system.

		Linux
		-----
		In the Linux kernel, in which there is a very slim difference between processes and POSIX threads, 
		there are two kinds of parent processes, namely real parent and parent. 
		Parent is the process that receives the SIGCHLD signal on child's termination, whereas real parent is the thread that actually created this child process in a multithreaded environment. 
		For a normal process, both these two values are same, but for a POSIX thread which acts as a process, these two values may be different.

==================
Thread (computing)
==================
	https://en.wikipedia.org/wiki/Thread_(computing)
		In computer science, a thread of execution is the smallest sequence of programmed instructions that can be managed independently by a scheduler, which is typically a part of the operating system. In many cases, a thread is a component of a process.

		The multiple threads of a given process may be executed concurrently (via multithreading capabilities), sharing resources such as memory, while different processes do not share these resources.
		In particular, the threads of a process share its executable code and the values of its dynamically allocated variables and non-thread-local global variables at any given time.

==============================
Process management (computing)
==============================
	https://en.wikipedia.org/wiki/Process_management_(computing)

	A process is a program in execution, and an integral part of any modern-day operating system (OS). The OS must allocate resources to processes, enable processes to share and exchange information, protect the resources of each process from other processes and enable synchronization among processes. To meet these requirements, the OS must maintain a data structure for each process, which describes the state and resource ownership of that process, and which enables the OS to exert control over each process.

	Multiprogramming
	----------------

	There are two possible ways for an OS to regain control of the processor during a program's execution in order for the OS to perform de-allocation or allocation:

		1.	The process issues a system call (sometimes called a software interrupt); for example, an I/O request occurs requesting to access a file on hard disk.
		2.	A hardware interrupt occurs; for example, a key was pressed on the keyboard, or a timer runs out (used in pre-emptive multitasking).

	How multiprogramming increases efficiency
	-----------------------------------------


	The Kernel system concept
	-------------------------
	The parts of the OS critical to its correct operation execute in KERNEL MODE while other software (such as generic system software) and all application programs execute in USER MODE.
	This fundamental distinction is usually the irrefutable distinction between the OPERATING SYSTEM and other SYSTEM SOFTWARE. 
	The part of the system executing in kernel supervisor state is called the KERNEL, or NUCLEUS, of the operating system.
	The KERNEL operates as trusted software, meaning that when it was designed and implemented, it was intended to implement protection mechanisms that could not be covertly changed through the actions of untrusted software executing in USER SPACE.
	Extensions to the OS execute in USER MODE, so the OS does not rely on the correctness of those parts of the system software for correct operation of the OS.
	Hence, a fundamental design decision for any function to be incorporated into the OS is whether it needs to be implemented in the KERNEL. If it is implemented in the KERNEL, it will execute in KERNEL (SUPERVISOR) space, and have access to other parts of the KERNEL.
	It will also be trusted software by the other parts of the KERNEL. If the function is implemented to execute in USER MODE, it will have no access to KERNEL DATA STRUCTURES. However, the advantage is that it will normally require very limited effort to invoke the function.
	While KERNEL-IMPLEMENTED functions may be easy to implement, the trap mechanism and authentication at the time of the call are usually relatively expensive. The KERNEL CODE runs fast, but there is a large performance overhead in the actual call. This is a subtle, but important point.


	Requesting system services
	--------------------------
	There are two techniques by which a program executing in user mode can request the kernel's services:
	1.	System call
	2.	Message passing



==============
Context switch
==============
	https://en.wikipedia.org/wiki/Context_switch

	In computing, a context switch is the process of storing the state of a process or thread, so that it can be restored and resume execution at a later point, and then restoring a different, previously saved, state.
	This allows multiple processes to share a single central processing unit (CPU), and is an essential feature of a multiprogramming or multitasking operating system.
	In a traditional CPU, each process - a program in execution - utilizes the various CPU registers to store data and hold the current state of the running process.
	However, in a multitasking operating system, the operating system switches between processes or threads to allow the execution of multiple processes simultaneously. 
	For every switch, the operating system must save the state of the currently running process, followed by loading the next process state, which will run on the CPU. 
	This sequence of operations that stores the state of the running process and the loading of the following running process is called a CONTEXT SWITCH.

	The precise meaning of the phrase "context switch" varies.

	1.	In a multitasking context, it refers to the process of storing the system state for one task, so that task can be paused and another task resumed.	 
	2.	A context switch can also occur as the result of an interrupt, such as when a task needs to access disk storage, freeing up CPU time for other tasks.	 
	3.	Some operating systems also require a context switch to move between user mode and kernel mode tasks.
	4.	The process of context switching can have a negative impact on system performance.

	Cost
	----
	Context switches are usually computationally intensive, and much of the design of operating systems is to optimize the use of context switches.
	Switching from one process to another requires a certain amount of time for doing the administration – saving and loading registers and memory maps, updating various tables and lists, etc.
	What is actually involved in a context switch depends on the architectures, operating systems, and the number of resources shared (threads that belong to the same process share many resources compared to unrelated non-cooperating processes).

	For example, in the Linux kernel, context switching involves loading the corresponding process control block (PCB) stored in the PCB table in the kernel stack to retrieve information about the state of the new process.
	CPU state information including the registers, stack pointer, and program counter as well as memory management information like segmentation tables and page tables (unless the old process shares the memory with the new) are loaded from the PCB for the new process.
	To avoid incorrect address translation in the case of the previous and current processes using different memory, 
	the translation lookaside buffer (TLB) must be flushed. This negatively affects performance because every memory reference to the TLB will be a miss because it is empty after most context switches.

	Switching cases
	---------------
	1.	Multitasking
			Most commonly, within some scheduling scheme, one process must be switched out of the CPU so another process can run. This context switch can be triggered by the process making itself unrunnable, such as by waiting for an I/O or synchronization operation to complete.
	2.	Interrupt handling
			Modern architectures are interrupt driven. This means that if the CPU requests data from a disk, for example, it does not need to busy-wait until the read is over; it can issue the request (to the I/O device) and continue with some other task. When the read is over, the CPU can be interrupted (by a hardware in this case, which sends interrupt request to PIC) and presented with the read. For interrupts, a program called an interrupt handler is installed, and it is the interrupt handler that handles the interrupt from the disk.

			When an interrupt occurs, the hardware automatically switches a part of the context (at least enough to allow the handler to return to the interrupted code). 
			The handler may save additional context, depending on details of the particular HARDWARE and SOFTWARE DESIGNS. Often only a minimal part of the context is changed in order to minimize the amount of time spent handling the interrupt.
			The kernel does not spawn or schedule a special process to handle interrupts, but instead the handler executes in the (often partial) context established at the beginning of interrupt handling.
			Once interrupt servicing is complete, the context in effect before the interrupt occurred is restored so that the interrupted process can resume execution in its proper state.

	3.	User and kernel mode switching
			When the system transitions between user mode and kernel mode, a context switch is not necessary; a MODE TRANSITION is not by itself a context switch. However, depending on the operating system, a context switch may also take place at this time.

	Performance
	-----------
		Context switching itself has a cost in performance, due to running the task scheduler, TLB flushes, and indirectly due to sharing the CPU cache between multiple tasks.
		Switching between threads of a single process can be faster than between two separate processes, because threads share the same virtual memory maps, so a TLB flush is not necessary.
		The time to switch between two separate processes is called the process switching latency. The time to switch between two threads of the same process is called the thread switching latency.
		The time from when a hardware interrupt is generated to when the interrupt is serviced is called the interrupt latency.
		Switching between two processes in a single address space operating system can be faster than switching between two processes in an operating system with private per-process address spaces.



=========================
Kernel (operating system)
=========================
https://en.wikipedia.org/wiki/Kernel_(operating_system)

Kernel (computer science)" redirects here. For other uses, see Kernel (disambiguation) § Computing.


		AN OVERSIMPLIFICATION OF HOW A KERNEL CONNECTS APPLICATION SOFTWARE TO THE HARDWARE OF A COMPUTER

															
				 ---------------------------------------	
				|										|	
				|				Applications			|	
				|					/\					|	
				 -------------------||------------------	
				 					||						
				 -------------------||------------------	
				|					\/					|	
				|				  Kernel				|	
				|  /\			 /\				 /\		|	
				 --||------------||--------------||-----	
				   ||			 ||				 ||			
				 --||---	 ----||----- 	 ----||-----	
				|  \/	|	|	 \/		|	|	 \/		|	
				|  CPU	|	|	Memory	|	|	Devices	|	
				|		|	|			|	|			|	
				 -------	 -----------	 -----------	
															

	1.	The kernel is a computer program at the CORE OF A COMPUTER'S OPERATING SYSTEM and generally has complete control over everything in the system. 

	2.	The kernel is also RESPONSIBLE for preventing and mitigating conflicts between DIFFERENT PROCESSES.

	3.	It is the portion of the operating system code that is always RESIDENT IN MEMORY and facilitates interactions between HARDWARE and SOFTWARE COMPONENTS. 

	4.	A full kernel controls all hardware resources (e.g. I/O, memory, cryptography) via device drivers, 
		arbitrates conflicts between processes concerning such resources, and optimizes the utilization of common resources 
		e.g. CPU & cache usage, file systems, and network sockets. 

	5.	On most systems, the KERNEL IS ONE OF THE FIRST PROGRAMS LOADED ON STARTUP (AFTER THE BOOTLOADER). 

	6.	It handles the rest of startup as well as memory, peripherals, and input/output (I/O) requests from software, 
		translating them into data-processing instructions for the central processing unit.


	7.	THE CRITICAL CODE OF THE KERNEL IS USUALLY LOADED INTO A SEPARATE AREA OF MEMORY, WHICH IS PROTECTED FROM ACCESS BY APPLICATION SOFTWARE OR OTHER LESS CRITICAL PARTS OF THE OPERATING SYSTEM. 

	8.	The kernel performs its tasks, such as running processes, managing hardware devices such as the hard disk, and handling interrupts, in this protected kernel space. 

	9.	In contrast, application programs such as browsers, word processors, or audio or video players use a separate area of memory, user space. 

	10.	This separation prevents user data and kernel data from interfering with each other and causing instability and slowness, 
		as well as preventing malfunctioning applications from affecting other applications or crashing the entire operating system. 

	11.	Even in systems where the kernel is included in application address spaces, 
		memory protection is used to prevent unauthorized applications from modifying the kernel.


	12.	The kernel's interface is a low-level abstraction layer. 
		When a process requests a service from the kernel, it must invoke a SYSTEM CALL, usually through a WRAPPER FUNCTION.

	13.	There are different kernel architecture designs. 
		-	Monolithic kernels run entirely in a single address space with the CPU executing in supervisor mode, mainly for speed. 
		-	Microkernels run most but not all of their services in user space, like user processes do, mainly for resilience and modularity. 
			MINIX 3 is a notable example of microkernel design. 
		-	The Linux kernel is both monolithic and modular, since it can insert and remove loadable kernel modules at runtime.

	14.	THIS CENTRAL COMPONENT OF A COMPUTER SYSTEM IS RESPONSIBLE FOR EXECUTING PROGRAMS. 
		THE KERNEL TAKES RESPONSIBILITY FOR DECIDING AT ANY TIME WHICH OF THE MANY RUNNING PROGRAMS SHOULD BE ALLOCATED TO THE PROCESSOR OR PROCESSORS.

	Random-access memory
	--------------------
	Random-access memory (RAM) is used to store both program instructions and data.
	Typically, both need to be present in memory in order for a program to execute. 
	Often multiple programs will want access to memory, frequently demanding more memory than the computer has available. 
	The kernel is responsible for deciding which memory each process can use, and determining what to do when not enough memory is available.

	Input/output devices
	--------------------
	I/O devices include, but are not limited to, peripherals such as keyboards, mice, disk drives, printers, USB devices, network adapters, and display devices. 
	The kernel provides convenient methods for applications to use these devices which are typically abstracted by the kernel so that applications do not need to know their implementation details.

	Resource management
	-------------------

	Memory management
	-----------------
	The kernel has full access to the system's memory and must allow processes to safely access this memory as they require it. 
	Often the first step in doing this is virtual addressing, usually achieved by paging and/or segmentation. 
	Virtual addressing allows the kernel to make a given physical address appear to be another address, the virtual address. 
	Virtual address spaces may be different for different processes; 
	the memory that one process accesses at a particular (virtual) address may be different memory from what another process accesses at the same address. 
	This allows every program to behave as if it is the only one (apart from the kernel) running and thus prevents applications from crashing each other.[


	On many systems, a program's virtual address may refer to data which is not currently in memory. 
	The layer of indirection provided by virtual addressing allows the operating system to use other data stores, 
	like a hard drive, to store what would otherwise have to remain in main memory (RAM). 
	AS A RESULT, OPERATING SYSTEMS CAN ALLOW PROGRAMS TO USE MORE MEMORY THAN THE SYSTEM HAS PHYSICALLY AVAILABLE. 

	When a program needs data which is not currently in RAM, the CPU signals to the kernel that this has happened, 
	and the kernel responds by writing the contents of an inactive memory block to disk (if necessary) and replacing it with the data requested by the program. 
	The program can then be resumed from the point where it was stopped. This scheme is generally known as demand paging.


	Virtual addressing also allows creation of virtual partitions of memory in two disjointed areas, 
		-	one being reserved for the kernel (kernel space) and 
		-	the other for the applications (user space). 

	The applications are not permitted by the processor to address kernel memory, thus preventing an application from damaging the running kernel. 
	This fundamental partition of memory space has contributed much to the current designs of actual general-purpose kernels and is almost universal in such systems, although some research kernels (e.g., Singularity) take other approaches.
	
	Device management
	-----------------

	System calls
	------------
	Main article: System call
	
	In computing, a system call is how a process requests a service from an operating system's kernel that it does not normally have permission to run. 
	System calls provide the interface between a process and the operating system. 
	Most operations interacting with the system require permissions not available 
	to a user-level process, e.g., I/O performed with a device present on the system, 
	or any form of communication with other processes requires the use of system calls.


	Kernel design decisions
	-----------------------

	Protection

	Hardware- or language-based protection

	Process cooperation

	I/O device management


	Kernel-wide design approaches
	-----------------------------

	Monolithic kernels
	------------------
	Main article: Monolithic kernel

	DIAGRAM OF A MONOLITHIC KERNEL

	 ---------------
	|				|
	|	SOFTWARE	|
	|				|
	 ---------------
			/\
			||
			\/
	 ---------------
	|				|
	|	KERNEL		|
	|	MODULES		|
	 ---------------
			/\
			||
			\/
	 ---------------
	|				|
	|	HARDWARE	|
	|				|
	 ---------------

	Microkernels
	------------
	Main article: Microkernel

	IN THE MICROKERNEL APPROACH, THE KERNEL ITSELF ONLY PROVIDES BASIC FUNCTIONALITY 
	THAT ALLOWS THE EXECUTION OF SERVERS, SEPARATE PROGRAMS THAT ASSUME FORMER KERNEL FUNCTIONS, 
	SUCH AS DEVICE DRIVERS, GUI SERVERS, ETC.

	 -----------------------------------
	|									|
	|				KERNEL				|
	|									|
	 ---||----/\------------------------
		||	  ||		/\
		||	  ||		||
		||	  ||		|| IPC
		||	  ||		||
	 ---\/----||----	||	 ---------------
	|				|	\/	|				|
	|	SERVERS		<========>	SOFTWARE	|
	|				|		|				|
	 ---------------		 ---------------

	Monolithic kernels vs. microkernels


	Hybrid (or modular) kernels
	---------------------------

	THE HYBRID KERNEL APPROACH COMBINES THE SPEED AND SIMPLER DESIGN OF A MONOLITHIC KERNEL 
	WITH THE MODULARITY AND EXECUTION SAFETY OF A MICROKERNEL

	 -----------------------------------
	|	 -----------					|
	|	| SERVERS	|			KERNEL	|
	|	 -----------					|
	 -------------------/\--------------
				  ||	||
				  ||	||
				  ||	||
				  ||	||
	 -------------\/--------------------
	|									|
	|				SOFTWARE			|
	|									|
	 -----------------------------------


	Nanokernels


	Exokernels


	Multikernels


	History of kernel development
	-----------------------------

	Early operating system kernels

	Time-sharing operating systems

	Amiga

	Unix

	Classic Mac OS and macOS

	Microsoft Windows

	IBM Supervisor

	Development of microkernels









===========
Microkernel
===========
https://en.wikipedia.org/wiki/Microkernel


1.	In computer science, a microkernel (often abbreviated as μ-kernel) is the near-minimum amount of software that can provide the mechanisms needed to implement an operating system (OS). 

2.	These mechanisms include low-level address space management, thread management, and inter-process communication (IPC).

3.	If the hardware provides multiple rings or CPU modes, the microkernel may be the only software executing at the most privileged level, which is generally referred to as supervisor or kernel mode. 

4.	Traditional operating system functions, such as device drivers, protocol stacks and file systems, are typically removed from the microkernel itself and are instead run in user space.

5.	In terms of the source code size, microkernels are often smaller than monolithic kernels. The MINIX 3 microkernel, for example, has only approximately 12,000 lines of code.


Nanokernel
----------
A kernel where the total amount of kernel code, i.e. code executing in the privileged mode of the hardware, is very small. The term picokernel was sometimes used to further emphasize small size.


=================
Monolithic kernel
=================
https://en.wikipedia.org/wiki/Monolithic_kernel

A monolithic kernel is an operating system architecture where the entire operating system is working in kernel space.

The monolithic model differs from other operating system architectures (such as the microkernel architecture)
in that it alone defines a high-level virtual interface over computer hardware.

A set of primitives or system calls implement all operating system services such as process management, concurrency, and memory management.

Device drivers can be added to the kernel as modules.


https://en.wikipedia.org/wiki/Monolithic_kernel#/media/File:OS-structure2.svg
or
https://commons.wikimedia.org/wiki/File:OS-structure2.svg
or
http://en.wikipedia.org/wiki/Image:OS-structure.svg
or
https://en.wikipedia.org/wiki/GNU_Hurd#/media/File:OS-structure2.svg

File:OS-structure2.svg

						 -----------------------------------------------------------------------------------------------------------
						|	General structure of monolithic, microkernel and hybrid kernel-based operating systems, respectively.	|
						 -----------------------------------------------------------------------------------------------------------

						 -------------------------------------------------------------------------------------------
						|	Structure of monolithic kernel, microkernel and hybrid kernel-based operating systems	|
						 -------------------------------------------------------------------------------------------

							Monolithic Kernel										Microkernel												"Hybrid kernel"
							based Operating System									based Operating System									based Operating System

					 -----------------------------------					 -----------------------------------					 -----------------------------------			
					|			Application				|					|			Application				|					|			Application				|			
					 -----------------------------------					 -----------------------------------					 ----/\-------/\-------/\------/\---			
									  /\										/\		   /\		/\		/\							 ||		  ||	   ||	   ||				
	SYSTEM							  ||										||		   ||		||		||							 ||		  ||	   ||	   ||				
======================================||========================================||=========||=======||======||===========================||=======||=======||======||============	
	OPERATING 		|				  ||				|\					|	||		|  ||	|	||	|	||	|					|	 ||		  ||	   ||	   ||	|			
	SYSTEM			|				  \/				| \					|	\/		|  \/	|	\/	|	\/	|					| ---\/----	  ||	 --\/--	   ||	|			
					|			VFS, System call		|  \	USER		|			|		|		|		|	USER			||  File   |  ||	|UNIX  |   ||	|	USER	
					|-----------------------------------|	\		MODE	|			|		|		|		|		MODE		||  Server |  ||	|Server|   ||	|	MODE	
					|									|	 \				|Application|UNIX   |Device |File	|					| -/\------	  ||	 --/\--	   ||	|			
					|			IPC , File System		|	  \				|IPC		|Server |Driver |Server	|					|  ||		  ||	   ||	   ||	|			
					|									|	   \			|			|		|		|		|	  --------------|--||---------||-------||------||---|--------	
	KERNEL			|-----------------------------------|		\			|			|		|		|		|	 /				|  ||	------\/-	   ||	 --\/-- |			
	MODE			|									|		 \			|			|		|		|		|	/				|  ||  |Applic	 |	   ||	|Device||			
					|	Scheduler , Virtual Memory		|		  \			|	  /\	|		|		|	/\	|  /				|  ||  |ation IPC|	   ||	|Driver||	KERNEL	
					|									|		   \		|	  ||	|		|		|	||	| /		KERNEL		|  ||	----/\---	   ||	 --/\--	|	MODE	
					|-----------------------------------|			\-------|-----||------------------------||--|/		MODE		|  ||		||		   ||	   ||	|			
					|									|	KERNEL			|	   --------------------------	|					|--\/-------\/---------\/------\/---|			
					|	Device Drivers, Dispatcher, ...	|		MODE		|	Basic IPC , Virtual Memory 		|					|	Basic IPC , Virtual Memory		|			
					|									|					|			Scheduling				|					|			Scheduler				|			
====================|===================================|===================|===================================|===================|===================================|=========	
					|									|					|									|					|									|			
					|			Hardware				|					|			Hardware				|					|			Hardware				|			
					|									|					|									|					|									|			
					 -----------------------------------					 -----------------------------------					 -----------------------------------			


File usage on Commons
---------------------
The following page uses this file:

	-	File:OS-structure.svg

File usage on other wikis
-------------------------
The following other wikis use this file:

.
.

	-	Usage on en.wikipedia.org
		-	GNU Hurd
		-	Monolithic kernel
		-	Hybrid kernel
		-	Distributed operating system

	-	Usage on en.wikibooks.org
		-	Operating System Design/Kernel Architecture
		-	Minix 3/Architecture and Design of MINIX 3
		-	Operating System Design/Print Version

.
.

 ---------------------------------------
|	Category: Operating system kernels	|
 ---------------------------------------






===========================
User space and kernel space
===========================
https://en.wikipedia.org/wiki/User_space_and_kernel_space

1.	A modern computer operating system usually uses virtual memory to provide separate address spaces called user space and kernel space.
2.	Primarily, this separation serves to provide memory protection and hardware protection from malicious or errant software behaviour.
3.	Kernel space is strictly reserved for running a privileged operating system kernel, kernel extensions, and most device drivers. 
4.	In contrast, user space is the memory area where application software and some drivers execute, typically one address space per process.

Overview
--------

The term USER SPACE (OR USERLAND) refers to all code that runs outside the operating system's kernel.
User space usually refers to the various programs and libraries that the operating system uses to interact with the kernel: 
-	software that performs input/output, 
-	manipulates file system objects, 
-	application software, etc.


1.	EACH USER SPACE PROCESS NORMALLY RUNS IN ITS OWN VIRTUAL MEMORY SPACE, AND, UNLESS EXPLICITLY ALLOWED, CANNOT ACCESS THE MEMORY OF OTHER PROCESSES. 

2.	THIS IS THE BASIS FOR MEMORY PROTECTION IN TODAY'S MAINSTREAM OPERATING SYSTEMS, AND A BUILDING BLOCK FOR PRIVILEGE SEPARATION.

3.	A separate user mode can also be used to build efficient virtual machines – see Popek and Goldberg virtualization requirements. With enough privileges, processes can request the kernel to map part of another process's memory space to its own, as is the case for debuggers. Programs can also request shared memory regions with other processes, although other techniques are also available to allow inter-process communication.

4.	WITH ENOUGH PRIVILEGES, PROCESSES CAN REQUEST THE KERNEL TO MAP PART OF ANOTHER PROCESS'S MEMORY SPACE TO ITS OWN, AS IS THE CASE FOR DEBUGGERS. 

5.	PROGRAMS CAN ALSO REQUEST SHARED MEMORY REGIONS WITH OTHER PROCESSES, ALTHOUGH OTHER TECHNIQUES ARE ALSO AVAILABLE TO ALLOW INTER-PROCESS COMMUNICATION.

Various layers within Linux, also showing separation between the userland and kernel space


Template:Linux layers
https://en.wikipedia.org/wiki/Template:Linux_layers

 ---------------------------------------------------------------------------------------------------------------
|					|					|																		|
|					|		User		|		bash , LibreOffice, GIMP , Blender , 0 A.D. 					|
|					|	Applications	|					Mozilla Firefox , ...								|
|					|-------------------|-----------------------------------------------------------------------|
|					|					|			   | System	  | Window			|			| Other			|
|					|					| init daemon: | daemons: | manager:		| GraphicS: | Libraries:	|
|					|		System		| OpenRC,	   | polkitd, | X11,			| Mesa, AMD	| GTK, QT,		|
|					|	  Components	| runit,	   | smbd,	  | Wayland,		| Catalyst,	| EFL, SDL,		|
|					|					| systemd...   | sshd,	  | SurfaceFlinger  | ...		| SFML, FLTK,	|
|					|					|			   | udevd... | (Androideeeree) |			| GNUstep, ...	|
|					|-------------------|-----------------------------------------------------------------------|
|		USER		|					|	fopen, execv, malloc, memcpy, localtime, 							|
|		MODE		|					|																		|
|					|					|	pthread_create... (up to 2000 subroutines)							|
|					|					|																		|
|					|					|																		|
|					|		C			|	glibc aims to be fast, 												|
|					|	  Standard		|	musl aims to be lightweight, 										|
|					|	  Library		|	uClibc targets embedded systems, 									|
|					|					|	bionic was written for Android, etc. 								|
|					|					|																		|
|					|					|	All aim to be POSIX/SUS-compatible.									|
|					|					|																		|
|-------------------|-------------------|-----------------------------------------------------------------------|
|					|					|	stat, splice, dup, read, open, ioctl, write, mmap, close, 			|
|					|					|	exit, etc. (about 380 system calls)									|
|					|					|																		|
|					|					|	The Linux kernel System Call Interface (SCI), 						|
|					|					|	aims to be POSIX/SUS-compatible										|
|					|					|-----------------------------------------------------------------------|
|					|					|			   |		   |				|			|				|
|		KERNEL		|	Linux			| Process	   | System    | Memory			| Virtual   | Networking 	|
|		MODE		|	Kernel			| Scheduling   | IPC	   | management		| files		| subsystem		|
|					|					| subsystem	   | subsystem | subsystem		| subsystem	|				|
|					|					|			   |		   |				|			|				|
|					|					|-----------------------------------------------------------------------| 
|					|					|																		|
|					|					|	Other components: ALSA, DRI, evdev, klibc, LVM, device mapper, 		|
|					|					|	Linux Network Scheduler, Netfilter									|
|					|					|																		|
|					|					|	Linux Security Modules: SELinux, TOMOYO, AppArmor, Smack			|
|---------------------------------------------------------------------------------------------------------------|
|							Hardware (CPU, main memory, data storage devices, etc.)								|
 ---------------------------------------------------------------------------------------------------------------


Implementation
--------------
1.	The most common way of implementing a user mode separate from kernel mode involves operating system protection rings. 
2.	Protection rings, in turn, are implemented using CPU modes. 
3.	Typically, kernel space programs run in kernel mode, also called supervisor mode; normal applications in user space run in user mode.


1.	Many operating systems are single address space operating systems—they have a single address space for all user-mode code. 
	(The kernel-mode code may be in the same address space, or it may be in a second address space). 

2.	Many other operating systems have a per-process address space, a separate address space for each and every user-mode process.


============
Linux kernel
============
https://en.wikipedia.org/wiki/Linux_kernel

The Linux kernel is a free and open-source, monolithic, modular, multitasking, Unix-like operating system kernel.

Linux is deployed on a wide variety of computing systems, such as embedded devices, 
mobile devices (including its use in the Android operating system), personal computers, servers, mainframes, and supercomputers. 
It can be tailored for specific architectures and for several usage scenarios using a family of simple commands 
(that is, without the need of manually editing its source code before compilation); privileged users can also fine-tune kernel parameters at runtime.


Scheduling (computing)
----------------------
https://en.wikipedia.org/wiki/Scheduling_(computing)

In computing, scheduling is the action of assigning resources to perform tasks. 
The resources may be processors, network links or expansion cards. 
The tasks may be threads, processes or data flows.

The scheduling activity is carried out by a process called scheduler. 
Schedulers are often designed so as to keep all computer resources busy (as in load balancing), 
allow multiple users to share system resources effectively, or to achieve a target quality-of-service.

Scheduling is fundamental to computation itself, and an intrinsic part of the execution model of a computer system; 
the concept of scheduling makes it possible to have computer multitasking with a single central processing unit (CPU). 




Check 'External links' at the End of Webpage	-->		https://en.wikipedia.org/wiki/Linux_kernel
--------------------------------------------------------------------------------------------------

Template:Linux kernel
https://en.wikipedia.org/wiki/Template:Linux_kernel

Template:Linux
https://en.wikipedia.org/wiki/Template:Linux

Template:Mobile operating systems
https://en.wikipedia.org/wiki/Template:Mobile_operating_systems

Template:Routing software
https://en.wikipedia.org/wiki/Template:Routing_software



=========
CPU modes
=========
https://en.wikipedia.org/wiki/CPU_modes

CPU MODES (also called 
PROCESSOR MODES, 
CPU STATES, 
CPU PRIVILEGE LEVELS 
and other names) 

CPU modes (also called processor modes, CPU states, CPU privilege levels and other names) are operating modes for the 
CENTRAL PROCESSING UNIT OF MOST COMPUTER ARCHITECTURES 
that place restrictions on the type and scope of operations that can be performed by instructions being executed by the CPU. 

For example, this design allows 
an OPERATING SYSTEM to run with MORE PRIVILEGES 
than APPLICATION SOFTWARE by RUNNING 

the OPERATING SYSTEMS and APPLICATIONS in DIFFERENT MODES.


Ideally, only highly trusted kernel code is allowed to execute in the unrestricted mode; everything else (including non-supervisory portions of the operating system) runs in a restricted mode and must use 
A SYSTEM CALL (VIA INTERRUPT) 
to request the kernel perform on its behalf any operation that could damage or compromise the system, making it impossible for untrusted programs to alter or damage other programs (or the computing system itself). 
Device drivers are designed to be part of the kernel due to the need for frequent I/O access.

Multiple modes can be implemented, e.g. allowing a hypervisor to run multiple operating system supervisors beneath it, which is the basic design of many virtual machine systems available today.

 ---------------
|	MODE TYPES	|
 ---------------
 
Further information on interoperation between CPU and OS levels of abstraction: Protection ring

1.	THE UNRESTRICTED MODE IS OFTEN CALLED 

	KERNEL MODE, 

	BUT MANY OTHER DESIGNATIONS EXIST (

	MASTER MODE, 
	SUPERVISOR MODE, 
	PRIVILEGED MODE, 

	ETC.). 

2.	RESTRICTED MODES ARE USUALLY REFERRED TO AS 

	USER MODES, 
	
	BUT ARE ALSO KNOWN BY MANY OTHER NAMES (
	
	SLAVE MODE, 
	
	PROBLEM STATE, 
	
	ETC.).


HYPERVISOR

	Hypervisor mode is used to support virtualization, allowing the simultaneous operation of multiple operating systems.

KERNEL AND USER

	In kernel mode, the CPU may perform any operation allowed by its architecture; 

	any instruction may be executed, any I/O operation initiated, any area of memory accessed, and so on. 


	In the other CPU modes, certain restrictions on CPU operations are enforced by the hardware. 

	Typically, certain instructions are not permitted 

	(especially those—including I/O operations—that could alter the global state of the machine), 

	some memory areas cannot be accessed, etc. 


	USER-MODE CAPABILITIES OF THE CPU are typically a SUBSET of those available in KERNEL MODE, 

	but in some cases, such as hardware emulation of non-native architectures, 

	they may be significantly different from those available in standard KERNEL MODE.


Some CPU ARCHITECTURES 
support MORE MODES than those, 
often with a HIERARCHY OF PRIVILEGES. 

These architectures are often said to have RING-BASED SECURITY, 
wherein the HIERARCHY OF PRIVILEGES resembles 
a SET OF CONCENTRIC RINGS, 
with the KERNEL MODE IN THE CENTER. 

.
.

MODE PROTECTION may extend to resources beyond the CPU hardware itself. 

HARDWARE REGISTERS track the CURRENT OPERATING MODE of the CPU, 

but additional VIRTUAL-MEMORY REGISTERS, PAGE-TABLE ENTRIES, 

and other data may track MODE IDENTIFIERS for OTHER RESOURCES. 



For example, a CPU may be operating in Ring 0 as indicated by a status word in the CPU itself, 

but every access to memory may additionally be validated against 

a SEPARATE RING NUMBER for the virtual-memory segment 

targeted by the access, 

and/or against a RING NUMBER for the PHYSICAL PAGE (IF ANY) being targeted. 

This has been demonstrated with the PSP handheld system.



Hardware that meets the Popek and Goldberg virtualization requirements makes writing software to efficiently support a virtual machine much simpler. 

Such a system can RUN SOFTWARE that "believes" it is running in SUPERVISOR MODE, but is actually RUNNING IN USER MODE.


==================
Daemon (computing)
==================
https://en.wikipedia.org/wiki/Daemon_(computing)

	1.	In multitasking computer operating systems, a daemon is a computer program that runs as a background process, rather than being under the direct control of an interactive user. 

	2.	Traditionally, the process names of a daemon end with the letter d, for clarification that the process is in fact a daemon, and for differentiation between a daemon and a normal computer program. 

	3.	For example, syslogd is a daemon that implements system logging facility, and sshd is a daemon that serves incoming SSH connections.



	1.	In a Unix environment, the parent process of a daemon is often, but not always, the init process. 

	2.	A daemon is usually created either by a process forking a child process and then immediately exiting, thus causing init to adopt the child process, or by the init process directly launching the daemon. 

	3.	In addition, a daemon launched by forking and exiting typically must perform other operations, such as dissociating the process from any controlling terminal (tty). 

	4.	Such procedures are often implemented in various convenience routines such as daemon(3) in Unix.



	1.	Systems often start daemons at boot time that will respond to network requests, hardware activity, or other programs by performing some task. 

	2.	Daemons such as cron may also perform defined tasks at scheduled times.




 ===========================
|	Privilege escalation	|
 ===========================
https://en.wikipedia.org/wiki/Privilege_escalation

Privilege escalation is the act of exploiting a bug, a design flaw, or a configuration oversight in an operating system or software application to gain elevated access to resources that are normally protected from an application or user.
The result is that an application with more privileges than intended by the application developer or system administrator can perform unauthorized actions.


A diagram describing privilege escalation. The arrow represents a rootkit gaining access to the kernel, and the little gate represents normal privilege elevation, where the user has to enter an Administrator username and password.

https://en.wikipedia.org/wiki/Privilege_escalation#/media/File:Privilege_Escalation_Diagram.svg

 -----------------------------
|							  |
|			Kernel			  |
|					 /\		  |
|----   ----   ----  |   -----|
|					 |		  |
|			Root	 | 		  |
|					 |		  |
|----   ----   ----  |   -----|
|					 |		  |
|			Admin			  |
|							  |
|----   ----   ----		 -----|
|							  |
|			User			  |
|							  |
 -----------------------------


Background
----------
Most computer systems are designed for use with multiple user accounts, each of which has abilities known as privileges.
Common privileges include viewing and editing files or modifying system files.

Privilege escalation means users receive privileges they are not entitled to.
These privileges can be used to delete files, view private information, or install unwanted programs such as viruses.
It usually occurs when a system has a bug that allows security to be bypassed or, alternatively, has flawed design assumptions about how it will be used.
Privilege escalation occurs in two forms:

	-	Vertical privilege escalation, also known as privilege elevation, where a 
		LOWER PRIVILEGE USER or APPLICATION 
		accesses functions or content reserved for 
		HIGHERE PRIVILEGE USERS or APPLICATIONS
		(e.g. Internet Banking users can access site administrative functions or the password for a smartphone can be bypassed.)

	-	Horizontal privilege escalation, where a 
		NORMAL USER 
		accesses functions or content reserved for other 
		NORMAL USERS 
		(e.g. Internet Banking User A accesses the Internet bank account of User B)



 ---------------
|	Vertical	|
 ---------------

This type of privilege escalation occurs when the user or process is able to obtain a 
higher level of access than an administrator or system developer intended, 
possibly by performing kernel-level operations.


https://en.wikipedia.org/wiki/Privilege_escalation#/media/File:Priv_rings.svg


			PRIVILEGE RINGS FOR THE X86 AVAILABLE IN PROTECTED MODE


 ---------------------------------------------------
|	 					Ring 3						|
|	 -------------------------------------------	|				Least Privileged
|	|					Ring 2					|	|				 --------
|	|	 -----------------------------------	|	|				| Ring 3 |
|	|	|				Ring 1				|	|	|				|--------|
|	|	|	 ---------------------------	|	|	|				| Ring 2 |
|	|	|	|			Ring 0			|	|	|	|				|--------|
|	|	|	|							|	|	|	|				| Ring 1 |
|	|	|	|			Kernel			|	|	|	|				|--------|
|	|	|	|							|	|	|	|				| Ring 0 |
|	|	|	|							|	|	|	|				 --------
|	|	|	 ---------------------------	|	|	|				Most Privileged
|	|	|			Device Drivers			|	|	|
|	|	 -----------------------------------	|	|
|	|				Device Drivers				|	|
|	 -------------------------------------------	|
|					Applications					|
 ---------------------------------------------------

Examples
--------
In some cases, 

a HIGH-PRIVILEGE APPLICATION

assumes that it would only be provided with input matching its interface specification, thus doesn't validate this input.

Then, an attacker may be able to EXPLOIT THIS ASSUMPTION, in order to run unauthorized code with the application's privileges:

	-	Some Windows services are configured to run under the Local System user account. 
		A vulnerability such as a buffer overflow may be used to execute arbitrary code with privilege elevated to Local System. 
		Alternatively, a system service that is impersonating a lesser user can elevate that user's privileges 
		if errors are not handled correctly while the user is being impersonated (e.g. if the user has introduced a malicious error handler)

	-	Under some legacy versions of the Microsoft Windows operating system, 
		the All Users screensaver runs under the 
		Local System account – any account that can replace the current screensaver binary in the file system or Registry can therefore elevate privileges.

	-	In certain versions of the LINUX KERNEL it was possible to write a program that would set 
		its CURRENT DIRECTORY to /etc/cron.d, 
		request that a core dump be performed in case it crashes and then have itself killed by another process. 
		
		The CORE DUMP FILE would have been placed at the program's current directory, 
		that is, /etc/cron.d, and cron would have treated it as a text file 
		instructing it to run programs on schedule. 
		
		Because the contents of the file would be under attacker's control, 
		the attacker would be able to execute any program with root privileges.

		.
		.

	-	Some versions of the iPhone allow an unauthorised user to access the phone while it is locked.

	Jailbreaking
	------------
	For jailbreaking iOS systems, see iOS jailbreaking.

	In computer security, jailbreaking is defined as the act of removing limitations that a vendor attempted to hard-code into its software or services.
	
	A common example is the use of toolsets to break out of a chroot or jail in UNIX-like operating systems[3] or bypassing digital rights management (DRM).

	Android
	-------
	Main article: Rooting (Android)

	Android phones can be officially rooted by either going through manufacturers controlled process, 
	using an exploit to gain root, or flashing custom recovery. 

	Manufacturers allow rooting through a process they control, while some allow the phone to be rooted 
	simply by pressing specific key combinations at boot time, or by other self-administered methods. 

	Using a manufacturers method almost always factory resets the device, making rooting useless to people who want to view the data, 
	and also voids the warranty permanently, even if the device is derooted and reflashed. 

	Software exploits commonly either target a root-level process that is accessible to the user, 
	by using an exploit specific to the phone's kernel, or using a known Android exploit 
	that has been patched in newer versions; by not upgrading the phone, or intentionally downgrading the version.

	Mitigation strategies
	---------------------
	Operating systems and users can use the following strategies to reduce the risk of privilege escalation:

	-	Data Execution Prevention

	-	Address space layout randomization (to make it harder for buffer overruns to execute privileged instructions at known addresses in memory)

	-	Running applications with least privilege (for example by running Internet Explorer with the Administrator SID disabled in the process token) 
		in order to reduce the ability of buffer overrun exploits to abuse the privileges of an elevated user.

	-	Requiring kernel mode code to be digitally signed.
	-	Patching

	-	Use of compilers that trap buffer overruns

	-	Encryption of software and/or firmware components.

	-	Use of an operating system with Mandatory Access Controls (MAC) such as SELinux

	-	Kernel Data Relocation Mechanism (dynamically relocates privilege information in the running kernel, preventing privilege escalation attacks using memory corruption)

	Recent research has shown what can effectively provide protection against privilege escalation attacks. 
	These include the proposal of the additional kernel observer (AKO), which specifically prevents attacks focused on OS vulnerabilities. 
	Research shows that AKO is in fact effective against privilege escalation attacks.	

 ---------------
|	Horizontal	|
 ---------------

	Horizontal privilege escalation occurs when an application allows the attacker to gain access 
	to resources which normally would have been protected from an application or user. 

	The result is that the application performs actions with the same user 
	but different security context than intended by the application developer or system administrator; 
	this is effectively a limited form of privilege escalation 
	(specifically, the unauthorized assumption of the capability of impersonating other users). 
	Compared to the vertical privilege escalation, horizontal requires no upgrading the privilege of accounts. 
	It often relies on the bugs in the system.

Examples
--------

This problem often occurs in web applications. Consider the following example:

	-	User A has access to their own bank account in an Internet Banking application.
	-	User B has access to their own bank account in the same Internet Banking application.
	-	The vulnerability occurs when User A is able to access User B's bank account by performing some sort of malicious activity.

	This malicious activity may be possible due to common web application weaknesses or vulnerabilities.

	Potential web application vulnerabilities or situations that may lead to this condition include:

	-	Predictable session IDs in the user's HTTP cookie
	-	Session fixation
	-	Cross-site scripting
	-	Easily guessable passwords
	-	Theft or hijacking of session cookies
	-	Keystroke logging


See also
--------
Cybersecurity
Defensive programming
Hacking of consumer electronics
Illegal number
Principle of least privilege
Privilege revocation (computing)
Privilege separation
Rooting (Android OS)
Row hammer





Message passing
	https://en.wikipedia.org/wiki/Message_passing


Zombie processes
	https://en.wikipedia.org/wiki/Zombie_process
		On Unix and Unix-like computer operating systems, a zombie process or defunct process is a process that has completed execution (via the exit system call) but still has an entry in the process table: 
		it is a process in the "terminated state". This occurs for the child processes, where the entry is still needed to allow the parent process to read its child's exit status: once the exit status is read via the wait system call, the zombie's entry is removed from the process table and it is said to be "reaped".

Orphan processes
	https://en.wikipedia.org/wiki/Orphan_process
		In a Unix-like operating system any orphaned process will be immediately adopted by an implementation-defined system process: the kernel sets the parent to this process. This operation is called re-parenting and occurs automatically.
		Even though technically the process has a system process as its parent, it is still called an orphan process since the process that originally created it no longer exists.

Single address space operating system
	https://en.wikipedia.org/wiki/Single_address_space_operating_system
		In computer science, a single address space operating system (or SASOS) is an operating system that provides only one globally shared address space for all processes.
		In a single address space operating system, numerically identical (virtual memory) logical addresses in different processes all refer to exactly the same byte of data.









































Computer performance
====================
https://en.wikipedia.org/wiki/Computer_performance

	Power consumption
	The amount of electric power used by the computer (power consumption).
	This becomes especially important for systems with limited power sources such as solar, batteries, human power.

	Performance per watt
	System designers building parallel computers, such as Google's hardware, pick CPUs based on their speed per watt of power, because the cost of powering the CPU outweighs the cost of the CPU itself.

	For spaceflight computers, the processing speed per watt ratio is a more useful performance criterion than raw processing speed.



Processor power dissipation
===========================
https://en.wikipedia.org/wiki/Processor_power_dissipation

	Processor power dissipation or processing unit power dissipation is the process in which 

	computer processors consume electrical energy, 

	and dissipate this energy in the form of heat due to the resistance in the electronic circuits.

	Power management
	----------------
	.
	.
	.
	
	There are a number of engineering reasons for this pattern:

	1.	
		For a given CPU core, energy usage will scale up as its clock rate increases. 

		Reducing the clock rate or undervolting usually reduces energy consumption; 
		it is also possible to undervolt the microprocessor while keeping the clock rate the same.

	2.
		New features generally require more transistors, each of which uses power. 

		Turning unused areas off saves energy, such as through clock gating.

	3.
		As a processor model's design matures, smaller transistors, lower-voltage structures, 

		and design experience may reduce energy consumption.


	Processor manufacturers usually release two power consumption numbers for a CPU:

	-	typical thermal power, which is measured under normal load (for instance, AMD's average CPU power)

	-	maximum thermal power, which is measured under a worst-case load


Computer performance
====================
https://en.wikipedia.org/wiki/Computer_performance	

	In computing, computer performance is the amount of useful work accomplished by a computer system. 
	Outside of specific contexts, computer performance is estimated in terms of accuracy, 
	efficiency and speed of executing computer program instructions. 

	When it comes to high computer performance, one or more of the following factors might be involved:

	-	Short response time for a given piece of work.
	-	High throughput (rate of processing work).
	-	Low utilization of computing resource(s).
		-	Fast (or highly compact) data compression and decompression.
	-	High availability of the computing system or application.
	-	High bandwidth.
	-	Short data transmission time.

	Technical and non-technical definitions
	---------------------------------------
	The performance of any computer system can be evaluated in measurable, technical terms, 
	using one or more of the metrics listed above. This way the performance can be

		-	Compared relative to other systems or the same system before/after changes

		-	In absolute terms, e.g. for fulfilling a contractual obligation

	As an aspect of software quality
	--------------------------------
	Computer software performance, particularly software application response time, 

	is an aspect of software quality that is important in human–computer interactions.

	Performance engineering
	-----------------------

	Application performance engineering
	-----------------------------------
	Application Performance Engineering (APE) is a specific methodology within performance engineering designed 
	to meet the challenges associated with application performance in increasingly distributed mobile, 
	cloud and terrestrial IT environments. 

	It includes the roles, skills, activities, practices, tools and deliverables applied 
	at every phase of the application lifecycle that ensure an application will be designed, 
	implemented and operationally supported to meet non-functional performance requirements.

	Aspects of performance
	----------------------
	Computer performance metrics (things to measure) include 

		availability, 
		response time, 
		channel capacity, 
		latency, 
		completion time, 
		service time, 
		bandwidth, 
		throughput, 
		relative efficiency, 
		scalability, 
		performance per watt, 
		compression ratio, 
		instruction path length and 
		speed up. 

	CPU benchmarks are available.

	Availability
	------------

	Response time
	-------------

	Processing speed
	----------------

	Channel capacity
	----------------

	Latency
	-------

	Bandwidth
	--------

	Throughput
	----------

	Relative efficiency
	-------------------

	Scalability
	----------

	Power consumption
	-----------------

	Performance per watt
	--------------------

	Compression ratio
	-----------------

	Size and weight
	---------------

	Environmental impact
	--------------------

	Transistor count
	----------------

	Software performance testing
	----------------------------

	Profiling (performance analysis)
	--------------------------------

	Performance tuning
	------------------


	See also
	--------
		Algorithmic efficiency
		Computer performance by orders of magnitude
		Network performance
		Latency oriented processor architecture
		Optimization (computer science)
		RAM update rate
		Complete instruction set
		Hardware acceleration
		Speedup
		Cache replacement policies
		Understanding Your PC Hardware








The 50 Most Popular Linux & Terminal Commands - Full Course for Beginners (5+ Hours)
===================================================================================
	https://www.youtube.com/watch?v=ZtqBQ68cfJc


=====================================
==> Sitemap - Eylenburg.github.io <==
=====================================
https://eylenburg.github.io/index.html

	
Operating Systems: Timeline and Family Tree
https://eylenburg.github.io/os_familytree.htm
	Includes about 1,130 operating systems since the beginning of computing!

Comparison of Operating Systems
https://eylenburg.github.io/os_comparison.htm

Comparison of Web Browsers
https://eylenburg.github.io/browser_comparison.htm

History of Web Browser Engines from 1990 until today
https://eylenburg.github.io/browser_engines.htm
	Many tried, few remain...

Comparison & List of Desktop Environments
https://eylenburg.github.io/de_comparison.htm

Default Desktop Environments for Linux and Unix
https://eylenburg.github.io/de_default.htm
	Timeline since 1990 showing the most important distributions

Comparison of Linux Distributions
https://eylenburg.github.io/linux_comparison.htm

Linux distributions over time
https://eylenburg.github.io/linux_distros_over_time.htm

Comparison of Android ROMs
https://eylenburg.github.io/android_comparison.htm

Comparison of Instant Messengers
https://eylenburg.github.io/im_comparison.htm

Comparison of Cloud, Sync & Email services
https://eylenburg.github.io/cloud_comparison.htm



















======================================================
Welcome to iximiuz Labs
https://labs.iximiuz.com
[The] Learning Platform to Master Cloud Native Craft
Welcoming Learning Environment for Everyone's Growth
======================================================

Step-by-Step Courses and Tutorials for Mastering Cloud Native Technologies

	Making Sense Out of Native Sidecar Containers in Kubernetes
		https://labs.iximiuz.com/tutorials/kubernetes-native-sidecars

	Docker Containers vs. Kubernetes Pods - Taking a Deeper Look
		https://labs.iximiuz.com/tutorials/containers-vs-pods

	Exploring Tetragon - A Security Observability Tool for Kubernetes, Docker, and Linux
		https://labs.iximiuz.com/tutorials/tetragon

	How Container Networking Works: a Docker Bridge Network From Scratch
		https://labs.iximiuz.com/tutorials/container-networking-from-scratch

	How (and Why) to Use containerd from the Command Line
		https://labs.iximiuz.com/courses/containerd-cli

Challenges
Pick a DevOps problem matching your skill level and interests

	Create and Start a Container Manually With runc
	Hard, on Containers
		https://labs.iximiuz.com/challenges/start-container-with-runc

	Containers 101: Start a Container With ctr
	Medium, on Containers
		https://labs.iximiuz.com/challenges/start-container-with-ctr

	Containers 101: Start a Container With contaiNERD CTL (nerdctl)
	Easy, on Containers
		https://labs.iximiuz.com/challenges/start-container-with-nerdctl

	Containers 101: Start a Container With Podman
	Easy, on Containers
		https://labs.iximiuz.com/challenges/start-container-with-podman

	Containers 101: Start a Container With Docker
	Easy, on Containers
		https://labs.iximiuz.com/challenges/start-container-with-docker

	Forward a Port Using the Hackers' Swiss Army Knife: netcat
	Medium, on Linux, Networking
		https://labs.iximiuz.com/challenges/port-forwarding-using-netcat

	Forward a Port Using The Multipurpose Relay Tool: socat
	Easy, on Linux, Networking
		https://labs.iximiuz.com/challenges/port-forwarding-using-socat

	Forward a Port Without Starting a Proxy Process
	Medium, on Linux, Networking
		https://labs.iximiuz.com/challenges/port-forwarding-without-proxy

	Reproduce a Docker Bridge Network Using Basic Linux Commands
	Hard, on Linux, Containers, Networking
		https://labs.iximiuz.com/challenges/reproduce-docker-bridge-network

	Connect Multiple Network Namespaces
	Hard, on Linux, Containers, Networking
		https://labs.iximiuz.com/challenges/connect-multiple-network-namespaces

	Connect Two Network Namespaces
	Medium, on Linux, Containers, Networking
		https://labs.iximiuz.com/challenges/connect-two-network-namespaces

	Set Up Network Address Translation (NAT) for a Container
	Medium, on Linux, Containers, Networking
		https://labs.iximiuz.com/challenges/set-up-nat-for-container

	Create a Linux Network Namespace
	Easy, on Linux, Containers, Networking
		https://labs.iximiuz.com/challenges/linux-network-namespace

	Network Access to a Container Started by ctr
	Hard, on Linux, Containers, Networking
		https://labs.iximiuz.com/challenges/access-containerd-container-with-no-published-ports

	Copying Files From Container Images Using ctr
	Hard, on Containers
		https://labs.iximiuz.com/challenges/copying-files-from-container-images-with-ctr

	Label a Container Image Using ctr
	Easy, on Containers
		https://labs.iximiuz.com/challenges/labeling-container-images-with-ctr

	Pulling Container Images Using ctr
	Easy, on Containers
		https://labs.iximiuz.com/challenges/pulling-container-images-with-ctr

	Tagging and Pushing Container Images Using ctr
	Easy, on Containers
		https://labs.iximiuz.com/challenges/pushing-container-images-with-ctr

	Reading Container Image Labels Using ctr
	Medium, on Containers
		https://labs.iximiuz.com/challenges/reading-image-labels-with-ctr

	Access a Docker Container With No Published Ports
	Medium, on Linux, Containers, Networking
		https://labs.iximiuz.com/challenges/access-docker-container-with-no-published-ports

	Execute a Command in a Docker Container Using ctr
	Medium, on Containers
		https://labs.iximiuz.com/challenges/containerd-docker-exec

	Working With containerd Namespaces
	Easy, on Containers
		https://labs.iximiuz.com/challenges/containerd-namespaces

	Kubernetes Pod With a Faulty Init Sequence
	Medium, on Kubernetes, Containers
		https://labs.iximiuz.com/challenges/kubernetes-pod-with-faulty-init-sequence

	Kubernetes Pod With a Sleepy Init Sequence
	Medium, on Kubernetes, Containers
		https://labs.iximiuz.com/challenges/kubernetes-pod-with-sleepy-init-sequence



Training Challenges for Building DevOps and SRE Skills
Solve fun problems and get ready for your next SRE/DevOps interview

	Set Up Network Address Translation (NAT) for a Container
		https://labs.iximiuz.com/challenges/set-up-nat-for-container

	Access a Docker Container With No Published Ports
		https://labs.iximiuz.com/challenges/access-docker-container-with-no-published-ports

	Containers 101: Start a Container With Podman
		https://labs.iximiuz.com/challenges/start-container-with-podman


Interactive Playgrounds for Docker, Kubernetes, Linux, Networking, and Security
Experiment in carefully crafted sandboxes right from your browser

	Kubernetes Cluster (K3s) Playground
	A multi-node K3s cluster with a load balancer, Helm, and more. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/k3s

	Lightweight Kubernetes Cluster (K3s) Playground
	A single-node cluster with most of the K3s bells and whistles disabled. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/k3s-bare

	Docker Playground
	A Linux server with Docker engine pre-installed. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/docker

	Lightweight Kubernetes Cluster (K0s) Playground
	A single-node K0s cluster. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/k0s

	contaiNERD CTL Playground
	nerdctl + containerd + BuildKit for true nerds... Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/nerdctl

	Podman Playground
	A Linux server with Podman, a daemonless Docker alternative, pre-installed. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/podman

	Go(lang) Playground
	A fresh Go version and a loaded VS Code (or Vim) is all you need. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/golang

	Node.js Playground
	The latest Node.js, NVM, Docker, VS Code, and a bunch of extensions. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/nodejs

	Zig Playground
	Get started with Zig in no time using an in-browser VS Code with handy addons preinstalled. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/zig

	Kubernetes Client (Go) Playground
	A collection of mini-programs demonstrating Kubernetes client-go usage and a loaded IDE. Handy if you need to write a controller or two. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/k8s-client-go

	Ubuntu Playground
	A vanilla Ubuntu server. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/ubuntu

	Debian Playground
	A vanilla Debian server Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/debian

	Rocky Linux Playground
	Rocky Linux - for RHEL fans. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/rockylinux

	AlmaLinux Playground
	AlmaLinux - for RHEL fans. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/almalinux

	Alpine Linux Playground
	A lightweight Alpine Linux server. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/alpine

	Kali Linux Playground
	Kali Linux - for all sorts of information security testing. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/kali-linux

	Arch Linux Playground
	Arch Linux - for minimalists. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/archlinux

	MiniLAN (Ubuntu) Playground
	Three refined Ubuntu VMs connected into a single network. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/mini-lan-ubuntu

	MiniLAN (Ubuntu, Docker) Playground
	Three Ubuntu servers with Docker pre-installed connected into a single network. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/mini-lan-ubuntu-docker

	Docker Swarm Playground
	A three-node swarm accompanied by an ephemeral registry for ease of experimentation. Batteries included! Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/docker-swarm

	Basecamp Kamal Playground
	Kamal is a simple but handy tool to deploy containerized web apps on good old VMs. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/kamal

	Tetragon Playground
	A 3-in-1 playground (Kubernetes, Docker, vanilla Linux) to experiment with an eBFP-powered security observability tool. Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/tetragon

	Slim(toolkit) Playground
	Don't change anything in your container image and minify it by up to 30x making it secure, too! Starts instantly. No paywall.
		https://labs.iximiuz.com/playgrounds/slimtoolkit














































































==========
Technology
==========
https://en.wikipedia.org/wiki/Technology

Technology is the application of conceptual knowledge for achieving practical goals, especially in a reproducible way.
The word technology can also mean the products resulting from such efforts, including both tangible tools such as utensils or machines, 
and intangible ones such as software. Technology plays a critical role in science, engineering, and everyday life.

---------------------------------------------------------------------------------------
The closest antonyms/opposite of technology are words like nontechnical and untechnical
---------------------------------------------------------------------------------------

19 Opposites of technology
--------------------------
https://simplicable.com/technology/technology-opposite

Art
Craft
Creativity
Culture
Emotion
Handmade
Human
Human Experience
Humanity
Imagination
Manual
Nature / Natural
Nontechnical
Planet Earth
Traditional
Universe
Unmechanical
Unsystematic
Untechnical

========
Software
========
https://en.wikipedia.org/wiki/Software

Software is a collection of programs and data that tell a computer how to perform specific tasks.
Software often includes associated software documentation.
This is in contrast to hardware, from which the system is built and which actually performs the work.

At the lowest programming level, executable code consists of machine language instructions supported by an 
individual processor—typically a central processing unit (CPU) or a graphics processing unit (GPU).
Machine language consists of groups of binary values signifying processor instructions that change the state of the computer from its preceding state.

As of 2024, most personal computers, smartphone devices, and servers 
have processors with multiple execution units, or multiple processors performing computation together, 
so computing has become a much more concurrent activity than in the past.

========
Hardware
========
https://en.wikipedia.org/wiki/Hardware

Hardware may refer to:

Technology
	Computing and electronics
		- Electronic hardware, interconnected electronic components which perform analog or logic operations
			- Digital electronics, electronics that operate on digital signals
				- Computer hardware, physical parts of a computer
				- Networking hardware, devices that enable use of a computer network
			- Electronic component, device in an electronic system used to affect electrons, usually industrial products







Types of Transmission Media
---------------------------
https://www.geeksforgeeks.org/types-transmission-media/

	1. Guided Media
	2. Unguided Media

Wired Communication Media
-------------------------
https://www.geeksforgeeks.org/wired-communication-media/

There are two types of Transmission media:
	1.	Wired communication media (Also Known as Guided media)
	2.	Wireless communication media (Also Known as Unguided media)


Transmission medium
-------------------
https://en.wikipedia.org/wiki/Transmission_medium

Electromagnetic spectrum
-------------------------
https://en.wikipedia.org/wiki/Electromagnetic_spectrum

Frequency allocation
--------------------
https://en.wikipedia.org/wiki/Frequency_allocation

UNITED STATES FREQUENCY ALLOCATIONS
-----------------------------------
https://upload.wikimedia.org/wikipedia/commons/c/c7/United_States_Frequency_Allocations_Chart_2016_-_The_Radio_Spectrum.pdf


















Futures and promises
--------------------
https://en.wikipedia.org/wiki/Futures_and_promises	

	In computer science, future, promise, delay, and deferred refer to constructs used for synchronizing program execution in some concurrent programming languages. 
	They describe an object that acts as a proxy for a result that is initially unknown, usually because the computation of its value is not yet complete.


Windows Subsystem for Linux
	https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux


==============
Android Brands
==============
https://www.android.com/intl/en_in/certified/partners/
	As of 21 Feb 2024, there are 115 Brands
		ACER, AT&T, DOCOMO, HONEYWELL, HONOR, HTC, HYUNDAI, JIO, LAVA, LENOVO, LOGICOM, MICROMAX, 
		MOTOROLA, NOKIA, ONEPLUS, OPPO, PHILIPS, REALME, SAMSUNG, SONY, T-MOBILE, VIVO, VODAFONE, ZEBRA  


========================================
Application / Software Application / App
========================================

app meaning
-----------
1.	COMPUTING
	an application, especially as downloaded by a user to a mobile device.
	"I've just installed the app on my phone"


Question : Are Apps Monolithic? like .dmg .exe executable files.
I need to check. 





Filename extension
------------------
	https://en.wikipedia.org/wiki/Filename_extension

List of file formats
--------------------
	https://en.wikipedia.org/wiki/List_of_file_formats

	Archive and compressed:

		ABB – Android App Bundle – is the Android (and Android TV) application publishing file format (required by Google Play) taking over from:
			APK – Android package: Applications installable on Android (also installable in derivatives and e.g. Windows 11); also a package format of the Alpine Linux distribution, see below under APK.

		APK – For Android see ABB/APK above (APK/Android apps also usable in Windows 11); The Alpine Linux distribution also use .apk files as a package format but then with un unrelated definition as in Andoid.
		They are often called "a-packs".

		APP – HarmonyOS APP Packs file format for HarmonyOS apps installable from AppGallery and third party OpenHarmony based app distribution stores.

		APPX – Microsoft Application Package (.appx)

		DEB – deb: Debian install package

		DMG – an Apple compressed/encrypted format

		FUN – A FUN file is a file that has been encrypted by Jigsaw ransomware, which is malware distributed by cybercriminals. It contains a file, such as a .JPG, .DOCX, .XLSX, .MP4, or .CSV file, that has been renamed and encrypted by the virus.

		RPM – Red Hat package/installer for Fedora, RHEL, and similar systems.

		SIS, SISX – SIS/SISX: Symbian Application Package

		XAP – Windows Phone Application Package


	Physical recordable media archiving:

		DMG – Macintosh disk image files


List of archive formats
-----------------------
	https://en.wikipedia.org/wiki/List_of_archive_formats

	Archiving and compression
		File extension(s)		MIME type									Official name		Creation platform		Restoration platform		Description
		.apk					application/vnd.android.package-archive		APK					Multiple				Multiple					Android application package (variant of JAR file format).
		.dmg					application/x-apple-diskimage				Apple Disk Image	macOS					macOS, Windows, Linux		Supports "Internet-enabled" disk images, which, once downloaded, are automatically decompressed, mounted, have the contents extracted, and thrown away. Currently, Safari is the only browser that supports this form of extraction; however, the images can be manually extracted as well. This format can also be password-protected or encrypted with 128-bit or 256-bit AES encryption.
		.ear																EAR					Multiple				Multiple					Enterprise Java Archive archive
		.jar					application/java-archive					JAR					Multiple				Multiple					Java archive, compatible with ZIP files

	Comparison
	Containers and compression

		Format								Filename extension
		Archive(ar)							.a, .ar
		Shell Archive (shar and makeself)	.shar, .run
		Tape Archive (tar)					.tar
		Macintosh Disk Image				.dmg
		RAR									.rar

	Software packaging and distribution
		Format								Filename extension
		Debian package (deb)				.deb
		Macintosh Installer					.pkg, .mpkg (metapackage)
		RPM Package Manager (RPM)			.rpm
		Slackware Package					.tgz
		Windows Installer (also MSI)		.msi
		Java Archive (JAR)					.jar
		Pacman								.pkg.tar.zst, .pkg.tar (no compression)


File system
-----------
	https://en.wikiversity.org/wiki/File_Systems

	In computing, a file system or filesystem (often abbreviated to fs) is a 
	METHOD and DATA STRUCTURE
	that the operating system uses to control how data is stored and retrieved.

	Without a file system, 

	DATA placed in a STORAGE MEDIUM 

	would be ONE LARGE BODY OF DATA with 

	no way to tell where one piece of data stopped and the next began, 

	or where any piece of data was located when it was time to retrieve it. 

	By separating the data into pieces and giving each piece a name, the data are easily isolated and identified. 

	 -----------------------------------------------------------------------------------------------------------------------
	|	TAKING ITS NAME FROM THE WAY A PAPER-BASED DATA MANAGEMENT SYSTEM IS NAMED, EACH GROUP OF DATA IS CALLED A "FILE".	|
	 -----------------------------------------------------------------------------------------------------------------------

	The structure and logic rules used to manage the groups of data and their names is called a "file system."


File system
-----------
	https://en.wikipedia.org/wiki/File_system

	In computing, a file system or filesystem (often abbreviated to FS or fs) governs file organization and access.
	A LOCAL FILE SYSTEM is a capability of an OPERATING SYSTEM that services the APPLICATIONS running on the same computer.
	A DISTRIBUTED FILE SYSTEM is a protocol that provides file access between networked computers.

	A file system provides a data storage service that allows applications to share mass storage.
	Without a file system, applications could access the storage in incompatible ways that lead to RESOURCE CONTENTION, DATA CORRUPTION and DATA LOSS.

	There are many file system designs and implementations – with various structure and features and various resulting characteristics such as SPEED, FLEXIBILITY, SECURITY, SIZE and more.

	Files systems have been developed for many types of storage devices, including HARD DISK DRIVES (HDDs), SOLID-STATE DRIVES (SSDs), MAGNETIC TAPES and OPTICAL DISCS.

	A portion of the computer main memory can be set up as a RAM disk that serves as a storage device for a file system. File systems such as tmpfs can store files in VIRTUAL MEMORY.

	A VIRTUAL FILE SYSTEM provides access to files that are either computed on request, called virtual files (see procfs and sysfs), or are mapping into another, backing storage.





Application software
	https://en.wikipedia.org/wiki/Application_software

	An application program (software application, or application, or app for short) is a computer program 
	designed to carry out a specific task other than one relating to the operation of the computer itself, typically to be used by end-users.

Mobile app
	https://en.wikipedia.org/wiki/Mobile_app

Web application
	https://en.wikipedia.org/wiki/Web_application

Server (computing)
	https://en.wikipedia.org/wiki/Server_(computing)

Super-app
	https://en.wikipedia.org/wiki/Super-app

How Many Apps are There in the World (Feb 2024) 
	https://www.bankmycell.com/blog/number-of-mobile-apps-worldwide

	Mobile App Statistics
	Did you know that app developers have created 8.93 million mobile apps and that there have already been 255 billion app downloads? 


How Many Websites Are There in the World?
	https://siteefy.com/how-many-websites-are-there/

	Currently, there are around 1.11 billion websites in the World. 18% of these websites are active, 82% are inactive.

Web App Development in 2022: A Detailed Guide
	https://jaydevs.com/web-app-development-a-detailed-guide/

	According to Statista, the current number of smartphone users is 6,567 billion.
	As of today (12 August 2022) there are almost 2 billion sites on the world wide web, and over 8.9 million mobile apps available.

Difference Between Web application and Website
	https://www.geeksforgeeks.org/difference-between-web-application-and-website/

	Web Application	-->	Web application is designed for interaction with end users.
	Website			-->	Website basically contains static content.


List of application servers
	https://en.wikipedia.org/wiki/List_of_application_servers
	https://en.wikipedia.org/wiki/List_of_application_servers#Java

Java

Main article: Web container
 -------------------------------------------------------------------------------------------
|						Product				|					Vendor						|
|-------------------------------------------|-----------------------------------------------|
|	ColdFusion								|	Adobe Systems								|
|	Enterprise Server						|	Borland										|
|	Geronimo								|	ASF											|
|	GlassFish								|	Eclipse Foundation							|
|	JBoss Enterprise Application Platform	|	Red Hat										|
|	Jetty									|	Eclipse Foundation							|
|	JEUS									|	TmaxSoft									|
|	JOnAS									|	OW2											|
|	JRun									|	Adobe Systems								|
|	Lucee (Formerly Railo)					|	Lucee Association Switzerland				|
|	NetWeaver Application Server			|	SAP AG										|
|	Oracle Containers for J2EE				|	Oracle Corporation							|
|	Orion Application Server				|	IronFlare									|
|	Payara									|	Payara										|
|	Resin Servlet Container (open source)	|	Caucho Technology							|
|	Resin Professional Application Server	|	Caucho Technology							|
|	Tomcat									|	ASF											|
|	TomEE									|	ASF											|
|	WebLogic Server							|	Oracle Corporation(formerly BEA Systems)	|
|	IBM WebSphere Application Server		|	IBM											|
|	WebSphere AS Community Edition			|	IBM											|
|	WildFly(formerly JBoss AS)				|	Red Hat(formerly JBoss)						|
|											|												|
 -------------------------------------------------------------------------------------------

	-	Apache MINA – an abstract event-driven asynchronous API over various transports such as TCP/IP and UDP/IP via Java NIO
	-	Netty – a non-blocking I/O client-server framework for the development of Java network applications similar in spirit to Node.js

Java virtual machine
	https://en.wikipedia.org/wiki/Java_virtual_machine









==================================
Integrated development environment
==================================
https://en.wikipedia.org/wiki/Integrated_development_environment

An integrated development environment (IDE) is a software application that provides comprehensive facilities for software development.
An IDE normally consists of at least a source-code editor, build automation tools, and a debugger.
Some IDEs, such as IntelliJ IDEA, Eclipse and Lazarus contain the necessary compiler, interpreter or both; others, such as SharpDevelop and NetBeans, do not.

The boundary between an IDE and other parts of the broader software development environment is not well-defined;
sometimes a version control system or various tools to simplify the construction of a graphical user interface (GUI) are integrated.
Many modern IDEs also have a class browser, an object browser, and a class hierarchy diagram for use in object-oriented software development.

 --------
| Topics |
 --------
Syntax highlighting
-------------------

Code completion
---------------
Code completion is an important IDE feature, intended to speed up programming. Modern IDEs even have intelligent code completion.

Intelligent code completion
---------------------------
Code completion is an autocompletion feature in many integrated development environments (IDEs) that speeds up the process of coding applications by fixing common mistakes and suggesting lines of code.
This usually happens through popups while typing, querying parameters of functions, and query hints related to syntax errors.
Modern code completion software typically uses generative artificial intelligence systems to predict lines of code.
Code completion and related tools serve as documentation and disambiguation for variable names, functions, and methods, using static analysis.

The feature appears in many programming environments.
Implementations include IntelliSense in Visual Studio Code.
The term was originally popularized as "picklist" and some implementations still refer to it as such.

Refactoring
-----------
Advanced IDEs provide support for automated refactoring.

Version control
---------------
An IDE is expected to provide integrated version control, in order to interact with source repositories.

Debugging
---------
IDEs are also used for debugging, using an integrated debugger, with support for setting breakpoints in the editor, visual rendering of steps, etc.

Code search
-----------

Visual programming
------------------

Language support
----------------
Some IDEs support multiple languages, such as GNU Emacs, IntelliJ IDEA, Eclipse, MyEclipse, NetBeans, MonoDevelop, or PlayCode.

Support for alternative languages is often provided by plugins, allowing them to be installed on the same IDE at the same time.
For example, Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs 24 with support for 39 languages.
Another example is JDoodle, an online cloud-based IDE that supports over 76 languages.
Eclipse, and Netbeans have plugins for C/C++, Ada, GNAT (for example AdaGIDE), Perl, Python, Ruby, and PHP, which are selected between automatically based on file extension, environment or project settings.

Implementation
--------------
IDEs can be implemented in various languages, for example:
	-	GNU Emacs using Emacs Lisp and C;
	-	IntelliJ IDEA, Eclipse and NetBeans, using Java;
	-	MonoDevelop using C#.

Online
------
A web integrated development environment (Web IDE), also known as an Online IDE or Cloud IDE, is a browser based IDE that allows for software development or web development. 
A web IDE can be accessed from a web browser allowing for a portable work environment.
A web IDE does not usually contain all of the same features as a traditional, or desktop, IDE, although all of the basic IDE features, such as syntax highlighting, are typically present.

A Mobile-Based Integrated Development Environment (IDE) is a software application that provides a comprehensive suite of tools for software development on mobile platforms.
Unlike traditional desktop IDEs, mobile-based IDEs are designed to run on smartphones and tablets, allowing developers to write, debug, and deploy code directly from their mobile devices.

Online integrated development environment
-----------------------------------------
https://en.wikipedia.org/wiki/Online_integrated_development_environment





=====================
<=>	IntelliJ IDEA <=>
=====================
https://en.wikipedia.org/wiki/IntelliJ_IDEA

System requirements for IntelliJ IDEA 2023.3

 -------------------------------------------------------------------------------------------------------------------
|					|			Windows					|	macOS		|					Linux					|
|-------------------|-----------------------------------|---------------|-------------------------------------------|
| Operating system 	| 64-bit Windows 10, version 1809	| macOS Big		| A Linux distribution with glibc 2.27 or	|
|	version 		| (or Windows Server 2019) or later	| Sur or later	| later that supports GNOME, KDE or Unity	|
|-------------------|----------------------------------- --------------- -------------------------------------------|
|		RAM			|		2 GB RAM minimum; 8 GB RAM recommended													|
|-------------------|-----------------------------------------------------------------------------------------------|
|	Disk space		|		3.5 GB required; a solid-state drive with at least 5 GB of free space is recommended	|
|-------------------|-----------------------------------------------------------------------------------------------|
|	JDK version		|		JDK 7 to 21 supported																	|
|-------------------|-----------------------------------------------------------------------------------------------|
|	JRE version		|		Bundled with Java 17																	|
|-------------------|-----------------------------------------------------------------------------------------------|
| Screen resolution	|		At least 1024×768 is required; at least 1920×1080 is recommended						|
 ------------------- -----------------------------------------------------------------------------------------------


 ================
||	Features	||
 ================

Coding assistance
-----------------
The IDE provides certain features like code completion by analyzing the context, code navigation which allows jumping to a class or declaration in the code directly, code refactoring, code debugging , linting and options to fix inconsistencies via suggestions.

Built in tools and integration
------------------------------

Plugin ecosystem
----------------

 ------------------------
||	Supported languages	||
 ------------------------
The Community and Ultimate editions differ in their support for various programming languages as shown in the following table.

Supported in both Community and Ultimate Edition:
-------------------------------------------------

CSS, Sass, SCSS, Less, Stylus
Groovy
HTML, XML, JSON, YAML
Java
Kotlin
Markdown
XSL, XPATH

Supported in both Community and Ultimate Edition via plugins:
-------------------------------------------------------------

Clojure
CloudSlang
Dart
Elm
Erlang
Gosu
Haskell
Haxe
Julia
Lua
Perl
Python
R
Rust
Scala

Supported only in Ultimate Edition:
-----------------------------------

CoffeeScript, ActionScript
JavaScript, TypeScript
SQL

Supported only in Ultimate Edition via plugins:
-----------------------------------------------

Cython
Go
PHP
Ruby and JRuby


 --------------------------------
||	Technologies and frameworks	||
 --------------------------------

Supported in both Community and Ultimate Edition:
-------------------------------------------------

Android (includes the Android Studio's functionality)
Ant
Gradle
Test runners (JUnit, TestNG, Spock, Cucumber, ScalaTest, spec2, etc.)
JavaFX
Maven

Supported only in Ultimate Edition:
-----------------------------------

Django
Thymeleaf, FreeMarker, Velocity
Grails
Jakarta EE (Jakarta Faces, JAX-RS, CDI, JPA, etc.)
Micronaut, Quarkus, Helidon
Node.js, React, Vue.js, Angular
AspectJ, JBoss Seam, OSGi
Play
Ruby on Rails
sbt
Spring


There was a free plugin from Atlassian for IntelliJ available to integrate with JIRA, Bamboo, Crucible and FishEye.
However, the software, called IDE-Connector, was discontinued on June 1, 2015.


 ------------------------------------------------
||	Software versioning and revision control	||
 ------------------------------------------------

The two editions also differ in their support for software versioning and revision control systems.

Supported in both Community and Ultimate Edition:
-------------------------------------------------

Git
Mercurial
Subversion
Azure DevOps (formerly TFS/VSTS; via plug-in)


Supported only in Ultimate Edition:
-----------------------------------
Perforce











































====================
PROGRAMMING LANGUAGE
====================

Most Used Programming languages among Developers worldwide as of 2023
	https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/
	
	JavaScript						63%
	HTML/CSS						52%
	Python							49%
	SQL								48%
	TypeScript						38%
	Bash/Shell (all shells)			32%
	Java							30%
	C#								27%
	C++								22%
	C								19%

Lists of programming languages
	https://en.wikipedia.org/wiki/Lists_of_programming_languages

	There are 650+ PROGRAMMING LANGUAGES in above wiki URL.

List of programming languages
	https://en.wikipedia.org/wiki/List_of_programming_languages

List of programming languages by type
	https://en.wikipedia.org/wiki/List_of_programming_languages_by_type

Comparison of programming languages
	https://en.wikipedia.org/wiki/Comparison_of_programming_languages

Non-English-based programming languages
	https://en.wikipedia.org/wiki/Non-English-based_programming_languages



List of programming languages for artificial intelligence
	https://en.wikipedia.org/wiki/List_of_programming_languages_for_artificial_intelligence


Syntax (programming languages)
==============================
	https://en.wikipedia.org/wiki/Syntax_(programming_languages)

	In computer science, the syntax of a computer language is the rules that define the combinations of symbols that are considered to be correctly structured statements or expressions in that language.
	-	This applies both to programming languages, where the document represents source code, 
	-	and to markup languages, where the document represents data.

	1.	Text-based computer languages are based on sequences of characters, 
	2.	While visual programming languages are based on the spatial layout and connections between symbols (which may be textual or graphical). 

	Levels of syntax
	----------------
	Computer language syntax is generally distinguished into three levels:

		1.	Words – the lexical level, determining how characters form tokens;
		2.	Phrases – the grammar level, narrowly speaking, determining how tokens form phrases;
		3.	Context – determining what objects or variables names refer to, if types are valid, etc.

	Distinguishing in this way yields modularity, allowing each level to be described and processed separately and often independently. 

	-	First, a lexer turns the linear sequence of characters into a linear sequence of tokens; this is known as "lexical analysis" or "lexing". 
	-	Second, the parser turns the linear sequence of tokens into a hierarchical syntax tree; this is known as "parsing" narrowly speaking. 
	-	Thirdly, the contextual analysis resolves names and checks types. 

		This modularity is sometimes possible, but in many real-world languages an earlier step depends on a later step – for example, the lexer hack in C is because tokenization depends on context. 
		Even in these cases, syntactical analysis is often seen as approximating this ideal model.

============
DATA CENTERS	
============

Number of Data Centers worldwide in 2023, by country
	https://www.statista.com/statistics/1228433/data-centers-worldwide-by-country/

	U.S. ->		5300+ Data Centers
	India ->	150+ Data Centers

105 Data Center Stats You Should Know In 2024
	https://brightlio.com/data-center-stats/

	1.	There are approximately 10,978 data center locations worldwide as of December 2023. (Various: Cloudscene, Datacentermap, Statista)
	2.	The top 20 countries with the most data centers are the United States (5,388), Germany (522), the U.K. (517), China (449), Canada (336), France (315), Australia (306), Netherlands (300), Russia (255), Japan (219), Italy (168), Mexico (166), Brazil (163), India (152), Poland (143), Hong Kong (122), Singapore (99) New Zealand (81), Spain (81), Indonesia (79). (Various: Cloudscene, Datacentermap, Statista)

Data Center Map

	https://www.datacentermap.com

	https://www.datacentermap.com/datacenters/

		We currently have 5628 data centers listed, from all over the world.
		Click on a country below, to explore its data center locations.
		Our database contains lists of data center operators and service providers, offering colocation, cloud and connectivity.

			USA				2137
			Germany			273
			France			179
			Australia		159
			United Kingdom	294
			India			173
	
Top 250 Data Center Companies in the World as of 2024
	https://dgtlinfra.com/top-data-center-companies/

What is a Data Center?
	https://aws.amazon.com/what-is/data-center/

	A data center is a physical location that stores computing machines and their related hardware equipment.
	It contains the computing infrastructure that IT systems require, such as servers, data storage drives, and network equipment.
	It is the physical facility that stores any company’s digital data.




================
COMPUTER NETWORK
================
https://en.wikipedia.org/wiki/Computer_network

	A computer network is a set of computers sharing resources located on or provided by network nodes.
	Computers use common communication protocols over digital interconnections to communicate with each other.
	These interconnections are made up of telecommunication network technologies based on physically wired, optical, and wireless radio-frequency methods that may be arranged in a variety of network topologies. 

	The nodes of a computer network can include personal computers, servers, networking hardware, or other specialized or general-purpose hosts.
	They are identified by network addresses and may have hostnames. Hostnames serve as memorable labels for the nodes and are rarely changed after initial assignment.
	Network addresses serve for locating and identifying the nodes by communication protocols such as the Internet Protocol.

	Computer networks may be classified by many criteria, including the transmission medium used to carry signals, bandwidth, communications protocols to organize network traffic, the network size, the topology, traffic control mechanisms, and organizational intent.
	
	Computer networks support many applications and services, such as access to the World Wide Web, digital video and audio, shared use of application and storage servers, printers and fax machines, and use of email and instant messaging applications. 

	Network packet
	--------------

	Network topology
	----------------
	Bus Network
	Star Network
	Ring Network
	Mesh Network
	Fully Connected Network
	Tree Network

	Network links
	-------------
	Wired
		Coaxial cable
		ITU-T G.hn
		Twisted pair
		Optical Fiber

	Wireless
		Terrestrial microwave
		Communications satellites
		Cellular networks 
		Radio and spread spectrum technologies
		Free-space optical communication 
		IP over Avian Carriers

	Network nodes
	-------------
	Network interfaces
	Repeaters and hubs
	Bridges and switches
	Routers
	Modem
	Firewalls

	Communication protocols
	-----------------------
	Common protocols
		Internet protocol suite
		IEEE 802
		Ethernet
		Wireless LAN
		SONET/SDH
		Asynchronous Transfer Mode
		Cellular standards
	Routing

	Geographic scale
	----------------
	Nanoscale network
	Personal area network
	Local area network
	Home area network
	Storage area network
	Campus area network
	Backbone network
	Metropolitan area network
	Wide area network
	Enterprise private network
	Virtual private network
	Global area network

	Organizational scope
	--------------------
	Intranet
	Extranet
	Internet
	Darknet

	Network service
	---------------

	Network performance
	-------------------
	Bandwidth
	Network delay
	Performance metrics
	Network congestion
	Network resilience

	Security
	--------
	Network security
	Network surveillance
	End to end encryption
	SSL/TLS

	Views of networks
	-----------------


Glitch
------
https://en.wikipedia.org/wiki/Glitch
	A glitch is a short-lived fault in a system, such as a transient fault that corrects itself, making it difficult to troubleshoot.
	The term is particularly common in the computing and electronics industries, in circuit bending, as well as among players of video games.
	More generally, all types of systems including human organizations and nature experience glitches.

	Electronics glitch

	Computer glitch
		A computer glitch is the failure of a system, usually containing a computing device, to complete its functions or to perform them properly.
		It frequently refers to an error which is not detected at the time it occurs but shows up later in data errors or incorrect human decisions.
		Situations which are frequently called computer glitches are incorrectly written software (software bugs), 
		incorrect instructions given by the operator (operator errors, and a failure to account for this possibility might also be considered a software bug),
		undetected invalid input data (this might also be considered a software bug), undetected communications errors, computer viruses, Trojan attacks and computer exploiting (sometimes called "hacking").

	Video game glitches

9 most common network issues and how to solve them
--------------------------------------------------
https://www.techtarget.com/searchnetworking/answer/What-are-the-3-most-common-network-issues-to-troubleshoot
	1. Slow network
	2. Weak Wi-Fi signal
	3. Physical connectivity issues
	4. Excessive CPU usage
	5. Slow DNS lookups
	6. Duplicate and static IP addresses
	7. Exhausted IP addresses
	8. Can't connect to printer
	9. VLAN and VPN problems


================
<=>	Internet <=>
================
https://en.wikipedia.org/wiki/Internet

The Internet (or internet) is the global system of interconnected computer networks that uses the Internet protocol suite (TCP/IP) to communicate between networks and devices.
It is a network of networks that consists of private, public, academic, business, and government networks of local to global scope, linked by a broad array of electronic, wireless, and optical networking technologies.
The Internet carries a vast range of information resources and services, such as the interlinked hypertext documents and applications of the World Wide Web (WWW), electronic mail, telephony, and file sharing.


								 --------------------------
								| Worldwide Internet users |
								 --------------------------
 ----------------------------------------------------------------------------------------------
|		Users			|	2005	  |		2010	|	 2017	  |		2019	 |	   2021	   |
|-----------------------|-------------|-------------|-------------|--------------|-------------|
| World population		| 6.5 billion | 6.9 billion | 7.4 billion | 7.75 billion | 7.9 billion |
|-----------------------|-------------|-------------|-------------|--------------|-------------|
| Worldwide				|	  16%	  |		30%		|	  48%	  |		53.6%	 |	   63%	   |
|-----------------------|-------------|-------------|-------------|--------------|-------------|
| In developing world	|	  8%	  |		21%		|	  41.3%	  |		47%		 |	   57%	   |
|-----------------------|-------------|-------------|-------------|--------------|-------------|
| In developed world	|	  51%	  |		67%		|	  81%	  |		86.6%	 |	   90%	   |
 ----------------------------------------------------------------------------------------------

 ----------------
| INFRASTRUCTURE |
 ----------------
https://en.wikipedia.org/wiki/Internet#/media/File:World_map_of_submarine_cables.png

The communications infrastructure of the Internet consists of its hardware components and a system of software layers that control various aspects of the architecture.
As with any computer network, the Internet physically consists of routers, media (such as cabling and radio links), repeaters, modems etc.
However, as an example of internetworking, many of the network nodes are not necessarily Internet equipment per se, 
the internet packets are carried by other full-fledged networking protocols with the Internet acting as a homogeneous networking standard, 
running across HETEROGENEOUS HARDWARE, with the packets guided to their destinations by IP routers.

Service tiers
-------------
Internet service providers (ISPs) establish the worldwide connectivity between individual networks at various levels of scope.
End-users who only access the Internet when needed to perform a function or obtain information, represent the bottom of the routing hierarchy.

At the top of the routing hierarchy are the TIER 1 NETWORKS, 
large telecommunication companies that exchange traffic directly with each other via very high speed fiber-optic cables and governed by peering agreements. 
TIER 2 and lower-level networks buy Internet transit from other providers to reach at least some parties on the global Internet, though they may also engage in peering. 
An ISP may use a single upstream provider for connectivity, or implement multihoming to achieve REDUNDANCY and LOAD BALANCING.
Internet exchange points are major traffic exchanges with physical connections to multiple ISPs. Large organizations, such as academic institutions, 
large enterprises, and governments, may perform the same function as ISPs, engaging in peering and purchasing transit on behalf of their internal networks.

Access
------
Common methods of INTERNET access by users include DIAL-UP with a COMPUTER MODEM via TELEPHONE CIRCUITS, BROADBAND over 
COAXIAL CABLE, FIBER OPTICS or COPPER WIRES, Wi-Fi, SATELLITE, and CELLULAR TELEPHONE TECHNOLOGY (e.g. 3G, 4G).
The Internet may often be accessed from computers in libraries and Internet cafés.
Internet access points exist in many public places such as airport halls and coffee shops. 
Various terms are used, such as public Internet kiosk, public access terminal, and Web payphone.
Many hotels also have public terminals that are usually fee-based.
These terminals are widely accessed for various usages, such as ticket booking, bank deposit, or online payment.
Wi-Fi provides wireless access to the Internet via local computer networks.
Hotspots providing such access include Wi-Fi cafés, where users need to bring their own wireless devices, such as a laptop or PDA.
These services may be free to all, free to customers only, or fee-based.

Mobile communication
--------------------
Number of mobile cellular subscriptions 2012–2016

 ----
| -- |
|	 |		3.89 billions in 2012
|-__-|
 ----

 ----
| -- |
|	 |		4.83 billions in 2016
|-__-|
 ----
 
 ----
| -- |
|	 |		5.69 billions in 2020
|-__-|
 ----

 -------------------------
| INTERNET PROTOCOL SUITE |
 -------------------------

Internet protocol
-----------------

IP Addresses
------------

IPv4
----

IPv6
----

Subnetwork
----------

Routing
-------

IETF
----

 ---------------------------
| APPLICATIONS AND SERVICES |
 ---------------------------

World Wide Web
--------------

Communication
-------------

Data transfer
-------------
Digital media streaming increases the demand for network bandwidth. For example, standard image quality needs 1 Mbit/s link speed for SD 480p, HD 720p quality requires 2.5 Mbit/s, and the top-of-the-line HDX quality needs 4.5 Mbit/s for 1080p.

 ---------------
| SOCIAL IMPACT |
 ---------------

Users
-----
As of 2022, it was estimated that 5.4 billion people use the Internet, more than two-thirds of the world's population.

Internet users by language
https://en.wikipedia.org/wiki/Internet#/media/File:InternetUsersByLanguagePieChart.svg

Website content languages
https://en.wikipedia.org/wiki/Internet#/media/File:WebsitesByLanguagePieChart.svg

Usage
-----
Main articles: Global digital divide and Digital divide

The Internet allows greater flexibility in working hours and location, especially with the spread of unmetered high-speed connections.
The Internet can be accessed almost anywhere by numerous means, including through mobile Internet devices. Mobile phones, datacards, handheld game consoles and cellular routers allow users to connect to the Internet wirelessly. 

Social networking and entertainment
-----------------------------------

Electronic business
-------------------

===============
= REMOTE WORK =
===============
REMOTE WORK IS FACILITATED BY TOOLS SUCH AS GROUPWARE, VIRTUAL PRIVATE NETWORKS, CONFERENCE CALLING, VIDEOTELEPHONY, AND VoIP SO THAT WORK MAY BE PERFORMED FROM ANY LOCATION, MOST CONVENIENTLY THE WORKER'S HOME.

It can be efficient and useful for companies as it allows workers to communicate over long distances, saving significant amounts of travel time and cost.
More workers have adequate BANDWIDTH at home to use these tools to link their HOME to their CORPORATE INTRANET and INTERNAL COMMUNICATION NETWORKS.

Collaborative publishing
------------------------

Politics and political revolutions
----------------------------------

Philanthropy
------------

 ----------
| SECURITY |
 ----------
Main article: Internet security

INTERNET RESOURCES, HARDWARE, and SOFTWARE components are the target of criminal or malicious attempts to gain unauthorized control to cause interruptions, 
commit fraud, engage in blackmail or access private information.

Malware
-------

Surveillance
------------

Censorship
----------

 -------------
| PERFORMANCE |
 -------------
 
Traffic volume
--------------
The volume of Internet traffic is difficult to measure because no single point of measurement exists in the multi-tiered, non-hierarchical topology.
Traffic data may be estimated from the aggregate volume through the peering points of the Tier 1 network providers, but traffic that 
stays local in large provider networks may not be accounted for.
 
Outages
-------
 
Energy use
----------
 
 
 
 
 

==============================
Languages used on the Internet
==============================
https://en.wikipedia.org/wiki/Languages_used_on_the_Internet

Slightly over half of the homepages of the most visited websites on the World Wide Web are in English, with varying amounts of information available in many other languages.
Other top languages are Chinese, Spanish, Russian, Persian, French, German and Japanese.

Of the more than 7,000 existing languages, only a few hundred are recognized as being in use for Web pages on the World Wide Web.

Usage statistics of content languages for websites
--------------------------------------------------
W3Techs estimated percentages of the top 10 million websites on the World Wide Web using various content languages as of 22 February 2024:
 
 --------------------------------------------------
| Rank | Language | 16 May 2023 | 22 February 2024 |
|------|----------|-------------|------------------|
|  1   | English  |	   55.5%	|		51.2%	   |
|------|----------|-------------|------------------|
|  2   | Spanish  |	   5.0%		|		5.6%	   |
|------|----------|-------------|------------------|
|  3   | Russian  |	   4.9%		|		4.4%	   |
|------|----------|-------------|------------------|
|	   |		  |				|				   |
|------|----------|-------------|------------------|
|  39  | Hindi	  |	   0.1% 	|		0.1%	   |
 --------------------------------------------------

Wikipedia page views by language
--------------------------------
Wikimedia Statistics gives the number of page views of each edition of Wikipedia by language.

 ------------------------------------
| Rank | Language | Daily page views |
|------|----------|------------------|
|  1   | English  |	257,705,129		 |
|------|----------|------------------|
|  2   | Japanese |	37,286,466   	 |
|------|----------|------------------|
|  3   | Spanish  |	37,018,505   	 |
|------|----------|------------------|
|	   |		  |					 |
|------|----------|------------------|
|  15  | Turkish  |	  3,382,454  	 |
 ------------------------------------

Daily page views	-->		(average during the last year with "Agent"="User" on 4 January 2021)












Global digital divide
	https://en.wikipedia.org/wiki/Global_digital_divide

	The global digital divide describes global disparities, primarily between developed and developing countries,
	in regards to access to computing and information resources such as the Internet and the opportunities derived from such access.

Digital divide
	https://en.wikipedia.org/wiki/Digital_divide

	The digital divide is the unequal access to digital technology, including smartphones, tablets, laptops, and the internet.
	The digital divide creates a division and inequality around access to information and resources.
	In the Information Age in which information and communication technologies (ICTs) have eclipsed manufacturing technologies as the basis for world economies and social connectivity, 
	people without access to the Internet and other ICTs are at a socio-economic disadvantage, for they are unable or less able to find and apply for jobs, shop and learn.




================================
<==>	Computer security	<==>
================================
https://en.wikipedia.org/wiki/Computer_security

Computer security, cybersecurity, digital security or information technology security (IT security) is the protection of computer systems and networks from attacks by 
malicious actors that may result in unauthorized information disclosure, theft of, or damage to hardware, software, or data, as well as from the disruption or misdirection of the services they provide.

Vulnerabilities and attacks
	A vulnerability is a weakness in the design, implementation, operation, or internal control of a computer or system.

Backdoor
	A backdoor in a computer system, a cryptosystem, or an algorithm, is any secret method of bypassing normal authentication or security controls. These weaknesses may exist for many reasons, including original design or poor configuration.

Denial-of-service attack
	Denial-of-service attacks (DoS) are designed to make a machine or network resource unavailable to its intended users.
	Attackers can deny service to individual victims, such as by deliberately entering a wrong password enough consecutive times 
	to cause the victim's account to be locked, or they may overload the capabilities of a machine or network and block all users at once.

Direct-access attacks
	A direct-access attack is when an unauthorized user (an attacker) gains physical access to a computer, most likely to directly copy data from it or to steal information.

Eavesdropping
	Eavesdropping is the act of surreptitiously listening to a private computer conversation (communication), usually between hosts on a network.
	It typically occurs when a user connects to a network where traffic is not secured or encrypted and sends sensitive business data to a colleague, 
	which, when listened to by an attacker, could be exploited.
	Data transmitted across an "open network" allows an attacker to exploit a vulnerability and intercept it via various methods.

Malware
	Malicious software (malware) is any software code or computer program "intentionally written to harm a computer system or its users."
	Types of malware include some of the following:
		Viruses
		Worms
		Trojan horses
		Spyware
		Scareware

Multi-vector, polymorphic attacks
	Surfacing in 2017, a new class of multi-vector, polymorphic cyber threats combine several types of attacks and change form to avoid cybersecurity controls as they spread.

Phishing
	Phishing is the attempt of acquiring sensitive information such as usernames, passwords, and credit card details directly from users by deceiving the users.

Privilege escalation
	Privilege escalation describes a situation where an attacker with some level of restricted access is able to, without authorization, elevate their privileges or access level.
	For example, a standard computer user may be able to exploit a vulnerability in the system to gain access to restricted data; or even become root and have full unrestricted access to a system.
	The severity of attacks can range from attacks simply sending an unsolicited email to a ransomware attack on large amounts of data. Privilege escalation usually starts with social engineering techniques, often phishing.

Side-channel attack
	Any computational system affects its environment in some form.
	This effect it has on its environment includes a wide range of criteria, which can range from electromagnetic radiation to residual effect on RAM cells which as a consequence make a Cold boot attack possible, 
	to hardware implementation faults that allow for access and or guessing of other values that normally should be inaccessible.
	In Side-channel attack scenarios, the attacker would gather such information about a system or network to guess its internal state and as a result access the information which is assumed by the victim to be secure.

Social engineering
	Social engineering, in the context of computer security, aims to convince a user to disclose secrets such as passwords, card numbers, etc. or grant physical access by, for example, impersonating a senior executive, bank, a contractor, or a customer.

Spoofing
	Spoofing is an act of pretending to be a valid entity through the falsification of data (such as an IP address or username), in order to gain access to information or resources that one is otherwise unauthorized to obtain.
	Spoofing is closely related to phishing. 
	There are several types of spoofing, including:
		-	Email spoofing, is where an attacker forges the sending (From, or source) address of an email.
		-	IP address spoofing, where an attacker alters the source IP address in a network packet to hide their identity or impersonate another computing system.
		-	MAC spoofing, where an attacker modifies the Media Access Control (MAC) address of their network interface controller to obscure their identity, or to pose as another.
		-	Biometric spoofing, where an attacker produces a fake biometric sample to pose as another user.
		-	Address Resolution Protocol (ARP) spoofing, where an attacker sends spoofed address resolution protocol onto a local area network to associate their Media Access Control address with a different host's IP address.
			This causes data to be sent to the attacker rather than the intended host.

Tampering
	Tampering describes a malicious modification or alteration of data.

HTML smuggling
	HTML smuggling allows an attacker to "smuggle" a malicious code inside a particular HTML or web page.

Information security practices

Computer protection (countermeasures)

Security by design

Security architecture

Security measures

	Today, computer security consists mainly of preventive measures, like firewalls or an exit procedure.
	A firewall can be defined as a way of filtering network data between a host or a network and another network, such as the Internet.
	 ===========================================================================================================================================================================================================================================================
	|	THEY CAN BE IMPLEMENTED AS SOFTWARE RUNNING ON THE MACHINE, HOOKING INTO THE NETWORK STACK (OR, IN THE CASE OF MOST UNIX-BASED OPERATING SYSTEMS SUCH AS LINUX, BUILT INTO THE OPERATING SYSTEM KERNEL) TO PROVIDE REAL-TIME FILTERING AND BLOCKING.	|
	 ===========================================================================================================================================================================================================================================================
	Another implementation is a so-called physical firewall, which consists of a separate machine filtering network traffic.
	Firewalls are common amongst machines that are permanently connected to the Internet.

Vulnerability management
	Vulnerability management is the cycle of identifying, fixing or mitigating vulnerabilities, especially in software and firmware.
	Vulnerability management is integral to computer security and network security.


Reducing vulnerabilities

Hardware protection mechanisms

Secure operating systems

Secure coding

 ============================================
||	Capabilities and Access Control Lists	||
 ============================================
	
	Main articles: Access control list, Role-based access control, and Capability-based security

	Within computer systems, two of the main security models capable of enforcing privilege separation are 
	Access Control Lists (ACLs) and 
	Role-Based Access Control (RBAC).

	An access-control list (ACL), with respect to a computer file system, is a list of permissions associated with an object.
	An ACL specifies which users or system processes are granted access to objects, as well as what operations are allowed on given objects.

	Role-based access control is an approach to restricting system access to authorized users, used by the majority of enterprises with more than 500 employees, and can implement mandatory access control (MAC) or discretionary access control (DAC).

	A further approach, 
	Capability-Based Security 
	has been mostly restricted to research operating systems. Capabilities can, however, also be implemented at the language level, leading to a style of programming that is essentially a refinement of standard object-oriented design.
	An open-source project in the area is the E language.

User security training

Digital hygiene

Difficulty of responding to breaches
====================================
Types of security and privacy
Access control
Anti-keyloggers
Anti-malware
Anti-spyware
Anti-subversion software
Anti-tamper software
Anti-theft
Antivirus software
Cryptographic software
Computer-aided dispatch (CAD)
Firewall
Intrusion detection system (IDS)
Intrusion prevention system (IPS)
Log management software
Parental control
Records management
Sandbox
Security information management
Security information and event management (SIEM)
Software and operating system updating
Vulnerability Management




Computer security incident management
	Computer security incident management is an organized approach to addressing and managing the aftermath of a computer security incident or compromise with the goal of preventing a breach or thwarting a cyberattack.
	An incident that is not identified and managed at the time of intrusion typically escalates to a more damaging event such as a data breach or system failure.











===========================
<==> Internet security <==>
===========================
https://en.wikipedia.org/wiki/Internet_security

Internet security – Branch of computer security

Internet security is a branch of computer security. It encompasses the Internet, browser security, web site security, and network security as it applies to other applications or operating systems as a whole.
Its objective is to establish rules and measures to use against attacks over the Internet.
The Internet is an inherently insecure channel for information exchange, with high risk of intrusion or fraud, such as phishing, online viruses, trojans, ransomware and worms.

Many methods are used to combat these threats, including encryption and ground-up engineering

 ---------
| THREATS |
 ---------

Malicious software
	Malicious software comes in many forms, such as viruses, Trojan horses, spyware, and worms.

Denial-of-service attacks
	A denial-of-service attack (DoS) or distributed denial-of-service attack (DDoS) is an attempt to make a computer resource unavailable to its intended users.

Phishing
	Phishing targets online users in an attempt to extract sensitive information such as passwords and financial information.

Man in the middle
	A man-in-the-middle (MITM) attack is a type of cyber attack. Cybercriminals can intercept data sent between people to steal, eavesdrop or modify data for certain malicious purposes, such as extorting money and identity theft.
	Public WiFi is often insecure because monitoring or intercepting Web traffic is unknown. 

Application vulnerabilities
	Applications used to access Internet resources may contain security vulnerabilities such as memory safety bugs or flawed authentication checks. Such bugs can give network attackers full control over the computer.

 -----------------
| COUNTERMEASURES |
 -----------------

Network layer security
	TCP/IP protocols may be secured with cryptographic methods and security protocols.
	These protocols include Secure Sockets Layer (SSL), succeeded by Transport Layer Security (TLS) for web traffic, Pretty Good Privacy (PGP) for email, and IPsec for network layer security.

Internet Protocol Security (IPsec)
	Main article: IPsec

	IPsec is designed to protect TCP/IP communication in a secure manner.
	It is a set of security extensions developed by the Internet Engineering Task Force (IETF). It provides security and authentication at the IP layer by transforming data using encryption.
	Two main types of transformation form the basis of IPsec: the Authentication Header (AH) and ESP(Encapsulating Security Payload) .

Threat modeling
	Threat Modeling tools helps you to proactively analyze the cyber security posture of a system or system of systems and in that way prevent security threats.

Multi-factor authentication
	Multi-factor authentication (MFA) is an access control method in which a user is granted access only after successfully presenting separate pieces of evidence to an authentication mechanism
	 – two or more from the following categories: knowledge (something they know), possession (something they have), and inference (something they are).
	 Internet resources, such as websites and email, may be secured using this technique.

Security token
	Main article: Security token (https://en.wikipedia.org/wiki/Security_token)
	Some online sites offer customers the ability to use a six-digit code which randomly changes every 30–60 seconds on a physical security token.
	The token has built-in computations and manipulates numbers based on the current time.
	This means that every thirty seconds only a certain array of numbers validate access.
	The website is made aware of that device's serial number and knows the computation and correct time to verify the number.
	After 30–60 seconds the device presents a new random six-digit number to log into the website.

Electronic mail security

Pretty Good Privacy (PGP)
	Pretty Good Privacy provides confidentiality by encrypting messages to be transmitted or data files to be stored using an encryption algorithm such as Triple DES or CAST-128.

Message Authentication Code
	A Message authentication code (MAC) is a cryptography method that uses a secret key to digitally sign a message.
	This method outputs a MAC value that can be decrypted by the receiver, using the same secret key used by the sender.
	The Message Authentication Code protects both a message's data integrity as well as its authenticity.

Firewalls
	A computer firewall controls access to a single computer.
	A network firewall controls access to an entire network.
	A firewall is a security device — COMPUTER HARDWARE or SOFTWARE — that filters traffic and blocks outsiders.
	It generally consists of gateways and filters. Firewalls can also screen network traffic and block traffic deemed unauthorized.

Web security
	Firewalls restrict incoming and outgoing network packets.
	Only authorized traffic is allowed to pass through it.
	Firewalls create checkpoints between networks and computers.
	Firewalls can block traffic based on IP source and TCP port number.
	They can also serve as the platform for IPsec.
	Using tunnel mode, firewalls can implement VPNs.
	Firewalls can also limit network exposure by hiding the internal network from the public Internet.

Types of firewall
-----------------

Packet filter
	A packet filter processes network traffic on a packet-by-packet basis.
	Its main job is to filter traffic from a remote IP host, so a router is needed to connect the internal network to the Internet. The router is known as a screening router, which screens packets leaving and entering the network.	

Stateful packet inspection
	In a stateful firewall the circuit-level gateway is a proxy server that operates at the network level of an Open Systems Interconnect (OSI) model and statically defines what traffic will be allowed.
	Circuit proxies forward network packets (formatted data) containing a given port number, if the port is permitted by the algorithm.
	The main advantage of a proxy server is its ability to provide Network Address Translation (NAT), which can hide the user's IP address from the Internet, effectively protecting internal information from the outside.

Application-level gateway
	An application-level firewall is a third-generation firewall where a proxy server operates at the very top of the OSI model, the IP suite application level.
	A network packet is forwarded only if a connection is established using a known protocol. Application-level gateways are notable for analyzing entire messages rather than individual packets.

Browser choice
	Main article: Browser security
	Web browser market share predicts the share of hacker attacks. For example, Internet Explorer 6, which used to lead the market,[19] was heavily attacked.



 -------------
| PROTECTIONS |
 -------------
 
Antivirus
	Main article: Antivirus software
	Antivirus software can protect a programmable device by detecting and eliminating malware.
	A variety of techniques are used, such as signature-based, heuristics, rootkit, and real-time.

Password managers
	Main article: Password manager
	A password manager is a software application that creates, stores and provides passwords to applications.
	Password managers encrypt passwords.
	The user only needs to remember a single master password to access the store.

Security suites

Wireless Sensor Networks (WSNs)


 
 
 
 
 

=================================
<==> Outline of the Internet <==> 
=================================
https://en.wikipedia.org/wiki/Outline_of_the_Internet

See also: Index of Internet-related articles and Outline of search engines

The following outline is provided as an overview of and topical guide to the Internet.

Internet – worldwide, publicly accessible network of interconnected computer networks that transmit data by packet switching using the standard Internet Protocol (IP).
It is a "network of networks" that consists of millions of interconnected smaller domestic, academic, business, and government networks, which together carry various information and services,
such as electronic mail, online chat, file transfer, and the interlinked Web pages and other documents of the World Wide Web.





Browser security
================
https://en.wikipedia.org/wiki/Browser_security

Browser security is the application of Internet security to web browsers in order to protect networked data and computer systems from breaches of privacy or malware.
Security exploits of browsers often use JavaScript, sometimes with cross-site scripting (XSS) with a secondary payload using Adobe Flash.
Security exploits can also take advantage of vulnerabilities (security holes) that are commonly exploited in all browsers (including Google Chrome, Microsoft Internet Explorer, Mozilla Firefox, Opera, and Safari).

Security
--------
Web browsers can be breached in one or more of the following ways:
	-	Operating system is breached and malware is reading/modifying the browser memory space in privilege mode
	-	Operating system has a malware running as a background process, which is reading/modifying the browser memory space in privileged mode
	-	Main browser executable can be hacked
	-	Browser components may be hacked
	-	Browser plugins can be hacked
	-	Browser network communications could be intercepted outside the machine

The browser may not be aware of any of the breaches above and may show user a safe connection is made.





















====================================
<==>	Information security	<==>
====================================
https://en.wikipedia.org/wiki/Information_security

Information security, sometimes shortened to infosec, is the practice of protecting information by mitigating information risks. 
It is part of information risk management. 
It typically involves preventing or reducing the probability of unauthorized or inappropriate access to data or the unlawful use, disclosure, disruption, deletion, corruption, modification, inspection, recording, or devaluation of information. 
It also involves actions intended to reduce the adverse impacts of such incidents.

History
-------
The end of the twentieth century and the early years of the twenty-first century saw rapid advancements in telecommunications, computing hardware and software, and data encryption.
The availability of smaller, more powerful, and less expensive computing equipment made electronic data processing within the reach of small business and home users.
The establishment of Transfer Control Protocol/Internetwork Protocol (TCP/IP) in the early 1980s enabled different types of computers to communicate. 
THESE COMPUTERS QUICKLY BECAME INTERCONNECTED THROUGH THE INTERNET.


https://en.wikipedia.org/wiki/Template:SecurityType
or
Check 'External links' at the End of Webpage	-->		https://en.wikipedia.org/wiki/Information_security


 ----------------------------------------------------------------------------------------------------------- 
|																											|
|	V.T.E									SECURITY TYPE											[hide]	|
|																											|
|-----------------------------------------------------------------------------------------------------------|
|	Application security , Biosecurity , Collective security , Computer security 							|
|																											|
|	Control system security , Corporate security , Economic security , Emotional security 					|
|																											|
|	Energy security , Event security , Food security , Health security , Information security 				|
|																											|
|	Internal security , International security , Job security , National security 							|
|																											|
|	Operations security , Physical security , Public security , Social security								|
|																											|
|-----------------------------------------------------------------------------------------------------------|
|																											|
|											Security engineering											|
|																											|
 -----------------------------------------------------------------------------------------------------------


https://en.wikipedia.org/wiki/Template:Information_security
or
Check 'External links' at the End of Webpage	-->		https://en.wikipedia.org/wiki/Information_security


 ----------------------------------------------------------------------------------------------------------- 
|																											|
|	V.T.E									INFORMATION SECURITY									[hide]	|
|																											|
|-----------------------------------------------------------------------------------------------------------|
|					|																						|
|	 				|	Computer security , Automotive security , Cybercrime (Cybersex trafficking 			|
|					|																						|
|					|	Computer fraud) , Cybergeddon , Cyberterrorism , Cyberwarfare 						|
|	Related			|																						|
|	security		|	Electromagnetic warfare , Information warfare , Internet security , Mobile security |
|	categories		|																						|
|					|	Network security , Copy protection , Digital rights management						|
|					|																						|
|-------------------|---------------------------------------------------------------------------------------|
|					|																						|
|					|	Adware , Advanced persistent threat , Arbitrary code execution , Backdoors 			|
|					|																						|
|					|	Hardware backdoors , Code injection , Crimeware , Cross-site scripting 				|
|					|																						|
|					|	Cross-site leaks , DOM clobbering , History sniffing , Cryptojacking 				|
|					|																						|
|					|	Botnets , Data breach , Drive-by download , Browser Helper Objects , Viruses 		|
|					|																						|
|					|	Data scraping , Denial-of-service attack , Eavesdropping , Email fraud 				|
|					|																						|
|					|	Email spoofing , Exploits , Hacktivism , Insecure direct object reference 			|
|		Threats		|																						|
|					|	Keystroke loggers , Logic bombs , Time bombs , Fork bombs , Zip bombs 				|
|					|																						|
|					|	Fraudulent dialers , Malware , Payload , Phishing (Voice) , Polymorphic engine 		|
|					|																						|
|					|	Privilege escalation , Ransomware , Rootkits , Scareware , Shellcode , Spamming 	|
|					|																						|
|					|	Social engineering , Spyware , Software bugs , Trojan horses , Hardware Trojans 	|
|					|																						|
|					|	Remote access trojans , Vulnerability , Web shells , Wiper , Worms 					|
|					|																						|
|					|	SQL injection , Rogue security software , Zombie									|
|					|																						|
|-------------------|---------------------------------------------------------------------------------------|
|					|	Application security (Secure coding , Secure by default , Secure by design 			|
|					|																						|
|					|	(Misuse case)) 																		|
|					|																						|
|					|	Computer access control (Authentication (Multi-factor authentication) 				|
|					|																						|
|					|	Authorization) , Computer security software (Antivirus software 					|
|					|																						|
|	Defenses		|	Security-focused operating system) , Data-centric security , Obfuscation (software) |
|					|																						|
|					|	Data masking , Encryption , Firewall , Intrusion detection system 					|
|					|																						|
|					|	(Host-based intrusion detection system (HIDS) , Anomaly detection) 					|
|					|																						|
|					|	Security information and event management (SIEM) , Mobile secure gateway 			|
|					|																						|
|					|	Runtime application self-protection , Site isolation								|
|					|																						|
 -----------------------------------------------------------------------------------------------------------












======================
<==> Localization <==>
======================
https://en.wikipedia.org/wiki/Localization

	Localization or localisation may refer to:

	Adaptation to language, etc.
	---------------------------
		- Language localization, translating a product into different languages or adapting a product to a country or region
		- Internationalization and localization, the adaptation of computer software for non-native environments, especially other nations and cultures
		- Video game localization, preparation of video games for other locales
		- Dub localization, the adaptation of a movie or television series for another audience

Internationalization and localization
-------------------------------------
https://en.wikipedia.org/wiki/Internationalization_and_localization

	In computing, internationalization and localization (American) or internationalisation and localisation (British), 
	often abbreviated i18n and l10n respectively, are means of adapting computer software to different languages, regional peculiarities and technical requirements of a target locale.

	Internationalization is the process of designing a software application so that it can be adapted to various languages and regions without engineering changes.
	Localization is the process of adapting internationalized software for a specific region or language by translating text and adding locale-specific components.

	Localization (which is potentially performed multiple times, for different locales) uses the infrastructure or flexibility provided by 
	internationalization (which is ideally performed only once before localization, or as an integral part of ongoing development).

	Naming
	------

	The terms are frequently abbreviated to the numeronyms i18n (where 18 stands for the number of letters between the first i and the last n in the word internationalization,
	a usage coined at Digital Equipment Corporation in the 1970s or 1980s) and l10n for localization, due to the length of the words.
	Some writers have the latter term capitalized (L10n) to help distinguish the two.

	Some companies, like IBM and Oracle, use the term GLOBALIZATION, g11n, for the combination of internationalization and localization.

	Microsoft defines internationalization as a combination of world-readiness and localization. World-readiness is a developer task,
	which enables a product to be used with multiple scripts and cultures (globalization) and separates user interface resources in a localizable format (localizability, abbreviated to L12y).

	Hewlett-Packard and HP-UX created a system called "NATIONAL LANGUAGE SUPPORT" or "NATIVE LANGUAGE SUPPORT" (NLS) to produce localizable software.

	Scope
	-----

	According to Software without frontiers, the design aspects to consider when internationalizing a product are "data encoding, data and documentation, software construction, hardware device support, and user interaction";
	while the key design areas to consider when making a fully internationalized product from scratch are "user interaction, algorithm design and data formats, software services, and documentation".

	Translation is typically the most time-consuming component of language localization. This may involve:

		- For film, video, and audio, translation of spoken words or music lyrics, often using either dubbing or subtitles
		- Text translation for printed materials, and digital media (possibly including error messages and documentation)
		- Potentially altering images and logos containing text to contain translations or generic icons
		- Different translation lengths and differences in character sizes (e.g. between Latin alphabet letters and Chinese characters) can cause layouts that work well in one language to work poorly in others
		- Consideration of differences in dialect, register or variety
		- Writing conventions like:
			- Formatting of numbers (especially decimal separator and digit grouping)
			- Date and time format, possibly including the use of different calendars (e.g. the Islamic or the Japanese calendar)


The INTERNATIONALIZATION and LOCALIZATION process (based on a chart from the LISA (Localization Industry Standards Association) website)

 ------------------------------------------------------------------
|						Globalisation Process					   |
|  --------------------------------------------------------------  |
| |	 Internationalisation						  				 | |
| |  ----------------------------------------------------------	 | |
| | | Product --> product  -->  product  	--> product testing| | |	
| | |			  design		development		and quality	   | | |
| | |											assurance (QA) | | |
| |  -------------------------------------------------|--------  | |
| |													  |			 | |
| |	 Localisation									  |			 | | 
| |	 -------------------------------------------------\/-------  | |
| |	| local		<----	local product		 <---  product	   | | |
| | | product			testing and quality		   localisation| | |
| | | marketing			assurance (QA)						   | | |
| |  ----------------------------------------------------------  | |
|  --------------------------------------------------------------  |
 ------------------------------------------------------------------

Language localisation
---------------------
https://en.wikipedia.org/wiki/Language_localisation

	Language localisation (or language localization) is the process of adapting a product's translation to a specific country or region.
	It is the second phase of a larger process of product translation and cultural adaptation (for specific countries, regions, cultures or groups) to account for differences in distinct markets, a process known as internationalisation and localisation.

	The localisation process is most generally related to the cultural adaptation and translation of software, video games, websites, and technical communication, as well as audio/voiceover, video, writing system, script or other multimedia content,
	and less frequently to any written translation (which may also involve cultural adaptation processes). Localisation can be done for regions or countries where people speak different languages or where the same language is spoken.
	For instance, different dialects of German, with different idioms, are spoken in Germany, Austria, Switzerland, and Belgium.

	The overall process: internationalisation, globalisation, and localisation
	--------------------------------------------------------------------------
	The former Localization Industry Standards Association (LISA) said that globalisation "can best be thought of as a cycle rather than a single process".
	.
	.
	There are two primary technical processes that comprise globalisation: internationalisation and localisation.

Video game localization
-----------------------
https://en.wikipedia.org/wiki/Video_game_localization
	Video game localization (or computer game localisation), is the process of preparing a video game for a market outside of where it was originally published.
	The game's name, art assets, packaging, manuals, and cultural and legal differences are typically altered.


Dubbing (Redirected from Dub localization)
------------------------------------------
https://en.wikipedia.org/wiki/Dubbing

	Dubbing (re-recording and mixing) is a post-production process used in filmmaking and video production, often in concert with sound design, 
	in which additional or supplementary recordings (doubles) are lip-synced and "mixed" with original production sound to create the finished soundtrack.


Website localization
--------------------
https://en.wikipedia.org/wiki/Website_localization

Website localization is the process of adapting an existing website to local language and culture in the target market.
It is the process of adapting a website into a different linguistic and cultural context— involving much more than the simple translation of text.
This modification process must reflect specific language and cultural preferences in the content, images and overall design and requirements of the site – all while maintaining the integrity of the website.




Localization
------------
https://developer.apple.com/localization/

The App Store is available in 175 regions and 40 languages to make it easy for users around the world to discover and download your app. 

In iPhone
	Settings -> Languages & Region -> Preferred Languages -> Add Language


Mobile Apps Localization Emphasis
---------------------------------
https://chat.openai.com/share/83b4a5b9-7336-40d0-ac2d-e630579a879f

can you list how many languages across world this companies support

1.	Google: Google typically supports a wide range of languages across its products and services. 
			For example, Android supports over 100 languages, and many of Google's apps, such as Google Search, Gmail, and Google Maps, are available in dozens of languages.

2.	Apple: 	Apple also supports numerous languages across its platforms and apps.
			iOS, for instance, supports over 40 languages, and Apple's native apps like Safari, Messages, and Siri are available in multiple languages as well.

.
.

can you list the number of apps this companies support for localization

1.	Google: Google supports localization for numerous apps across various categories, including productivity (e.g., Gmail, Google Docs, Google Sheets), 
			communication (e.g., Google Meet, Google Hangouts), navigation (e.g., Google Maps, Waze), entertainment (e.g., YouTube, Google Play Movies & TV), and more. 
			Google's suite of apps is extensive, covering a wide range of functionalities and services.

2.	Apple: 	Apple supports localization for its native apps pre-installed on iOS devices, such as Safari, Messages, Photos, Maps, and Mail.
			Additionally, Apple's App Store features a vast ecosystem of third-party apps developed by various companies worldwide, many of which also prioritize localization efforts.



Is there any company providing mobile app localization services besides translations?
-------------------------------------------------------------------------------------
https://www.quora.com/Is-there-any-company-providing-mobile-app-localization-services-besides-translations

Translation is just one part of 'mobile app localization'

Localization includes translation, app store optimization, multimedia localization, adapting dates, currencies and numbers and much much more

For a truly localized app, you need a native translator and user who can adapt every aspect of your app. The point of app localization is to make a user feel like it was made just for them.

Most translation agencies/companies provide full localization services for a range of languages



Which translation company or companies handle the localization of Apple products?
---------------------------------------------------------------------------------
Apple typically works with various professional translation and localization companies to handle the translation of its products into different languages. Apple's localization efforts are extensive, covering a wide range of languages to ensure their products are accessible and user-friendly for a global audience.

While specific details about the companies Apple partners with for localization may not be publicly disclosed due to confidentiality agreements, there are many reputable localization and translation service providers that work with technology companies, including Apple. Some well-known localization companies in the industry include:

Lionbridge: Lionbridge is a global company that provides translation and localization services. It has experience working with technology companies and ensuring their products are adapted for diverse markets.
Moravia: Moravia is another major player in the localization industry, offering services to technology and software companies. They specialize in adapting content for global audiences.
Welocalize: Welocalize is a localization and translation company that caters to technology, software, and other industries. They offer services to help businesses expand their reach in international markets.
SDL: SDL provides translation and localization services, with a focus on technology, business, and content management. They work with companies to adapt content for various markets.
TransPerfect: TransPerfect is a global provider of language and business services, including translation and localization. They have experience working with technology companies to make their products linguistically and culturally appropriate for different regions.

These companies are examples, and the actual list of service providers that Apple may collaborate with can change over time. Apple likely engages multiple vendors to handle the diverse language requirements for its products. Keep in mind that specific details about Apple's partnerships are generally not publicly disclosed due to the proprietary nature of such arrangements.

Change the language and region on iPhone
----------------------------------------	
https://support.apple.com/en-in/guide/iphone/iphce20717a3/ios

Change the language on your iPhone or iPad
------------------------------------------
https://support.apple.com/en-us/109358



























============================
<==> Lists of languages <==>
============================
https://en.wikipedia.org/wiki/Lists_of_languages

	Comprehensive lists
	-------------------
Lists which are global in scope (all living natural languages would classify for inclusion):
-	by country:
	-	List of official languages by country and territory
	-	Number of languages by country
-	by name: List of language names (native names)
.
.
-	by number of speakers:
	-	List of languages by total number of speakers
	-	List of languages by number of native speakers
-	List of languages by number of words according to authoritative dictionaries


List of language names
----------------------
https://en.wikipedia.org/wiki/List_of_language_names

	Required fonts
	--------------
	Many languages require special fonts in order to display correctly.
	Most use fonts from the font family Noto, created by Google. They can be downloaded here.

=================================================
<==> List of dictionaries by number of words <==>
=================================================
https://en.wikipedia.org/wiki/List_of_dictionaries_by_number_of_words

This is a list of dictionaries considered authoritative or complete by approximate number of total words, or headwords, included.
Figures do not take account of entries with senses for different word classes (such as noun and adjective) and homographs.
Although it is possible to count the number of entries in a dictionary, it is not possible to count the number of words in a language.
In compiling a dictionary, a lexicographer decides whether the evidence of use is sufficient to justify an entry in the dictionary.
This decision is not the same as determining whether the word exists.

 -------------------------------------------------------------------------------------------------------------------------------------------
| Language 	 | Approx. no. of headwords | Approx. no. of definitions | 				Dictionary 			|				Notes				|
|------------|--------------------------|----------------------------|----------------------------------|-----------------------------------|
| Tamil	   	 |	1,516,952				|							 | Sorkuvai	  						|									|
|------------|--------------------------|----------------------------|----------------------------------|-----------------------------------|
| Korean	 |	1,149,538			  	|							 | Urimalsaem 						|									|
|------------|--------------------------|----------------------------|----------------------------------|-----------------------------------|
| Portuguese |	818,000				  	|							 | Aulete Digital			  		|									|
|------------|--------------------------|----------------------------|----------------------------------|-----------------------------------|
| Finnish	 |	800,000				  	|							 | RedFox Pro			  			|									|
|------------|--------------------------|----------------------------|----------------------------------|-----------------------------------|
| English	 |	739,313				  	|	1,439,188				 | English Wiktionary			  	|									|
|------------|--------------------------|----------------------------|----------------------------------|-----------------------------------|
| 			 |						  	|							 |			  						|									|
|------------|--------------------------|----------------------------|----------------------------------|-----------------------------------|
| 	 		 |					  		|							 | 									| A later dictionary added 17 words,|
| Toki Pona	 |	120						|							 | Toki Pona: The Language of Good	| bring the total number of official| 
|			 |							|							 |									| words to 137.						|
 -------------------------------------------------------------------------------------------------------------------------------------------





===================================
<==> Typeface (or font family) <==>
===================================
https://en.wikipedia.org/wiki/Typeface

A typeface (or font family) is a design of letters, numbers and other symbols, to be used in printing or for electronic display.
Most typefaces include variations in size (e.g., 24 point), weight (e.g., light, bold), slope (e.g., italic), width (e.g., condensed), and so on.
Each of these variations of the typeface is a font.

There are thousands of different typefaces in existence, with new ones being developed constantly.

List of typefaces
-----------------
https://en.wikipedia.org/wiki/List_of_typefaces

This is a list of typefaces, which are separated into groups by distinct artistic differences. The list includes typefaces that have articles or that are referenced.


==============================================
Google Fonts	Noto: A typeface for the world
==============================================
https://fonts.google.com/noto

 ----------------------
|Fonts for all languages|
 ----------------------

What is Noto?
-------------
Noto is a collection of high-quality fonts with multiple weights and widths in sans, serif, mono, and other styles. The Noto fonts are perfect for harmonious, aesthetic, and typographically correct global communication, in more than 1,000 languages and over 150 writing systems.

"Noto" means "I write, I mark, I note" in Latin. The name is also short for "no tofu", as the project aims to eliminate 'tofu': blank rectangles shown when no font is available for your text.

Read and write text in any language
-----------------------------------
Nearly half of the 6,000 languages spoken in the world are endangered. Noto includes fonts for nearly all of the world's writing systems (scripts): from Latin, Chinese, Arabic, Hebrew, and all Indic scripts, to Egyptian hieroglyphs and emoji.

The designs are harmonious across scripts but retain the authentic flavors that make each script special. The fonts use Unicode and OpenType (ISO Open Font) international standards for accurate, professional-quality rendering of all orthographies.

Learn more
----------
World scripts are as diverse as humans, they have different proportions and writing directions. One font file could not fit them all, so Noto includes 100s of font files in several formats.


Google Fonts Files (This repository contains the binary font files served by Google Fonts)
------------------------------------------------------------------------------------------
https://github.com/google/fonts

Each family subdirectory contains the .ttf font files served by Google Fonts, plus a METADATA.pb file with metadata for the family (such as information on the project designer(s),
genre category, and license - learn more) and a DESCRIPTION.en_us.html with a description of the family in US English.









========================
<==>	algorithm	<==>
========================
	https://www.techtarget.com/whatis/definition/algorithm
	
		An algorithm is a procedure used for solving a problem or performing a computation. 
		Algorithms act as an exact list of instructions that conduct specified actions step by step in either HARDWARE or SOFTWARE based routines.













































































IPv4 Unicast, Multicast, and Broadcast
	https://www.youtube.com/watch?v=aDdArElVJvQ

	Multicast Transmission
	The Multicast Address range: 224.0.0.0 to 239.255.255.255

	Link local - 224.0.0.0 to 224.0.0.255 (Example: routing information exchanged by routing protocols)		

	Globally scoped addresses - 224.0.1.0 to 238.255.255.255 (Example: 224.0.1.1 has been reserved for Network Time Protocol)

	First Address = Network Address
	Last Address = Broadcast Address




Understanding IP Addressing and CIDR Charts
	https://www.ripe.net/about-us/press-centre/understanding-ip-addressing


Classless Inter-Domain Routing
	https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing


Service set (802.11 network)
	https://en.wikipedia.org/wiki/Service_set_(802.11_network)


Automatic Private IP Addressing
	https://study-ccna.com/apipa-automatic-private-ip-addressing/


	
Bootstrap Protocol (BOOTP)
	https://www.geeksforgeeks.org/bootstrap-protocol-bootp/amp/

Difference between BOOTP and DHCP
	https://www.geeksforgeeks.org/difference-between-bootp-and-dhcp/amp/







Default Adminsitrative Distances
Route Type							Administrative Distance
----------							-----------------------
Connected							0
Static								1
BGP (external routes [eBGP])		20
EIGRP (internal routes)				90
IGRP								100
OSPF								110
IS-IS								115
RIP									120
EIGRP (external routes)				170
BGP (internal routes[iBGP])			200
DHCP default route					254
Unusable							255



Cisco Packet Tracer
Wireshark
GNS3
VIRL Workbench
EVE-NG
Physical Equipment










root@ac1a707f580d:/usr/lib/python3/dist-packages/dbus# uptime
04:01:10 up 1 day, 21:17,  0 users,  load average: 0.10, 0.06, 0.01
root@ac1a707f580d:/usr/lib/python3/dist-packages/dbus#

(base) yathvi@Madan-MacBook-Pro-175 ~ % uptime
 9:31  up 11 days, 21:15, 10 users, load averages: 2.51 3.66 6.15
(base) yathvi@Madan-MacBook-Pro-175 ~ % 

root@ac1a707f580d:/usr/lib/python3/dist-packages/dbus# cat /proc/loadavg 
0.00 0.02 0.00 1/465 8843
root@ac1a707f580d:/usr/lib/python3/dist-packages/dbus# 

root@ac1a707f580d:/usr/lib/python3/dist-packages/dbus# cat /proc/stat
cpu  359335 0 359842 30564934 4586 0 73922 0 0 0
cpu0 137837 0 181669 15364505 2523 0 54684 0 0 0
cpu1 221497 0 178172 15200429 2063 0 19237 0 0 0
intr 38137963 105 0 0 93 50321 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 956 0 74774 0 2100615 1081463 0 1860328 1388728 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
ctxt 58420635
btime 1704869050
processes 14266
procs_running 1
procs_blocked 0
softirq 14198917 0 2284427 126 5179226 70801 0 67 5012258 0 1652012
root@ac1a707f580d:/usr/lib/python3/dist-packages/dbus# 



mpstat is a command-line utility on Unix-like operating systems, including Linux, that is used to display and monitor detailed processor statistics. The name "mpstat" stands for "multiple processor statistics," and it is part of the sysstat package, which includes several tools for system performance monitoring.

/bin # mpstat
Linux 5.10.76-linuxkit (48ebf4410a18)	01/17/24	_x86_64_	(2 CPU)

05:34:45     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle
05:34:45     all    0.94    0.00    1.92    0.45    0.00    0.13    0.00    0.00   96.55
/bin # 

what is MWAIT in BIOS SETUP

	MWAIT (Monitor Wait) is an instruction used in Intel processors, and it is related to power management features, specifically in the context of the Advanced Configuration and Power Interface (ACPI). MWAIT is often mentioned in the BIOS (Basic Input/Output System) setup or configuration because it can be used to control certain aspects of a system's power management behavior.

	Here's a brief overview:

	1.	Power Management States:
			Modern processors support various power management states, often denoted as C-states. These states represent different levels of power consumption and performance.
	2.	MWAIT Instruction:
			The MWAIT instruction is used by the processor to enter a specific low-power state. It allows the processor to "wait" for an event to occur while consuming minimal power.
			MWAIT is often used in conjunction with ACPI to enable the operating system to manage power efficiently. The operating system or firmware (BIOS/UEFI) can use MWAIT to put the processor in a low-power state when there is no immediate processing to be done.
	3.	BIOS Setup:
			In the BIOS setup or configuration, there might be options related to power management, and MWAIT could be mentioned in the context of configuring how the system handles low-power states.
			Users might find settings related to C-states or MWAIT in the BIOS, allowing them to customize how the system behaves in terms of power consumption and performance.
	4.	System Performance vs. Power Consumption:
			Adjusting MWAIT or C-state settings in the BIOS can have an impact on system performance and power consumption. Users might be able to choose between performance-oriented settings (which keep the processor in higher-power states for faster response) and power-saving settings (which allow the processor to enter lower-power states to conserve energy).
			Keep in mind that the availability and specific options related to MWAIT or C-states can vary between different motherboard manufacturers and BIOS versions. Users interested in optimizing power management settings should refer to their system's documentation or consult the manufacturer's support resources for guidance on configuring MWAIT or related settings in the BIOS setup.




Lock-free and wait-free algorithms
Non-blocking algorithm
(Redirected from Lock-free and wait-free algorithms)
	https://en.wikipedia.org/wiki/Non-blocking_algorithm
	
	Not to be confused with non-blocking I/O.







































Event-driven architecture
	https://en.wikipedia.org/wiki/Event-driven_architecture

Architectural pattern
	https://en.wikipedia.org/wiki/Architectural_pattern

Software design pattern
	https://en.wikipedia.org/wiki/Software_design_pattern



=================================================
List of software architecture styles and patterns
=================================================
https://en.wikipedia.org/wiki/List_of_software_architecture_styles_and_patterns

Architectural patterns are often documented as software design patterns.
An architectural pattern often uses the same description as a general, reusable solution to a commonly occurring problem in software architecture within a given context.

The separation of what is architectural and what is design is not commonly agreed, nor are the patterns catalogued in any accepted form.

Software Architecture is an ambiguous term which not only relates to the discipline of software architecture itself, but also structure and connections between components.

An Introduction to Software Architecture describes it as such "We are still far from having a well-accepted taxonomy of such architectural paradigms, let alone a fully-developed theory of software architecture.
But we can now clearly identify a number of architectural patterns, or styles, that currently form the basic repertoire of a software architect."


Catalog of architectural patterns
---------------------------------
	-	Asynchronous messaging
	-	Blackboard
	-	Blackboard pattern
	-	Client-server (multitier architecture exhibits this style)
	-	Cloud computing patterns
	-	Component-based
	-	Database-centric
	-	Domain-driven designing
	-	Event-driven aka implicit invocation
	-	Layered
	-	Microkernel
	-	Model–view–controller
	-	Monolithic application
	-	Object request broker
	-	Peer-to-peer
	-	Pipes and filters
	-	Presentation–abstraction–control
	-	Publish-subscribe
	-	Reflection
	-	Representational state transfer (REST)
	-	Rule-based
	-	Sensor–controller–actuator
	-	Service-oriented
	-	Shared nothing architecture
	-	Space-based architecture
	-	Strangler fig pattern





Loose coupling
	https://en.wikipedia.org/wiki/Loose_coupling

Granularity
	https://en.wikipedia.org/wiki/Granularity

Lightweight protocol
	https://en.wikipedia.org/wiki/Lightweight_protocol

Hexagonal architecture (software)
	https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)

Monolithic system
	https://en.wikipedia.org/wiki/Monolithic_system

Monolithic application
	https://en.wikipedia.org/wiki/Monolithic_application

Multitier architecture
	https://en.wikipedia.org/wiki/Multitier_architecture

Distributed computing
	https://en.wikipedia.org/wiki/Distributed_computing

	Not to be confused with Decentralized computing.

Decentralized computing
	https://en.wikipedia.org/wiki/Decentralized_computing

Massively multiplayer online game
	https://en.wikipedia.org/wiki/Massively_multiplayer_online_game

Peer-to-peer
	https://en.wikipedia.org/wiki/Peer-to-peer

DevOps
	https://en.wikipedia.org/wiki/DevOps

Serverless computing
	https://en.wikipedia.org/wiki/Serverless_computing

Web-oriented architecture
	https://en.wikipedia.org/wiki/Web-oriented_architecture

Resource-oriented architecture
	https://en.wikipedia.org/wiki/Resource-oriented_architecture

Software industry
	https://en.wikipedia.org/wiki/Software_industry

IPv4 Multicast Address Space Registry
	https://www.iana.org/assignments/multicast-addresses/multicast-addresses.xhtml

Hashing in Java
	https://www.geeksforgeeks.org/hashing-in-java/

Java HashMap Load Factor
	https://www.baeldung.com/java-hashmap-load-factor

Types of Encryption: Symmetric or Asymmetric? RSA or AES?
	https://preyproject.com/blog/types-of-encryption-symmetric-or-asymmetric-rsa-or-aes

Difference Between Symmetric and Asymmetric Key Encryption
	https://www.geeksforgeeks.org/difference-between-symmetric-and-asymmetric-key-encryption/

Basic Router Commands and Tasks	
	https://www.cisco.com/E-Learning/bulk/public/tac/cim/cib/using_cisco_ios_software/07_basic_commands_tasks.htm

Difference between Fast Ethernet and Gigabit Ethernet
	https://www.javatpoint.com/difference-between-fast-ethernet-and-gigabit-ethernet

Storing Internet Data
=====================
https://chat.openai.com/share/c04306cc-3637-4210-9e68-0ebdb213e9d7
	Internet data is stored on various types of servers and data storage devices distributed around the world.
	The data storage infrastructure of the internet is made up of interconnected data centers,
	cloud servers, and other computing resources. Here's a simplified explanation of how internet data is stored:
		1.	Servers and Data Centers
		2.	Distributed Storage
		3.	File Systems and Databases
		4.	Content Delivery Networks (CDNs)
		5.	Caching
		6.	Virtualization and Cloud Computing
		7.	Data Replication and Backup
		8.	Data Compression and Encryption
		
	Overall, the storage of internet data involves a complex network of servers, data centers, technologies, 
	and protocols designed to ensure data availability, reliability, and security while meeting the demands of a global user base.


===================================================================
Software Architecture Types
https://chat.openai.com/share/60e2b0d9-6b39-4cee-8b93-ce936142b2ea
===================================================================

	1.	Monolithic Architecture
	2.	Client-Server Architecture
	3.	Microservices Architecture
	4.	Service-Oriented Architecture (SOA)
	5.	Layered Architecture
	6.	Event-Driven Architecture
	7.	Pipeline Architecture
	8.	Component-Based Architecture
	9.	Space-Based Architecture
			Space-based architecture distributes application components across a network of interconnected nodes.
			Each node, often referred to as a "space," can store and process data.
			This approach is particularly useful for handling large volumes of data and supporting high scalability.
			Components can communicate through spaces, allowing for a dynamic and flexible system.
	10.	Data-Centric Architecture
	11.	Event Sourcing Architecture
	12.	CQRS (Command Query Responsibility Segregation)
	13.	N-Tier Architecture
	14.	Hexagonal Architecture (Ports and Adapters)
	15.	Clean Architecture
	16.	Onion Architecture
	17.	Serverless Architecture
	18.	Peer-to-Peer (P2P) Architecture
	9.	Space-Based Architecture (SpatialOS)
			SpatialOS is a distributed computing platform that enables the creation of large-scale simulations or virtual worlds.
			It uses a "space-based" model to handle dynamic, interactive, and data-intensive applications.
	19.	Component-Based Development (CBD)


	Can you give real time examples for all this 20 types


	Absolutely, here are real-time examples for each of the 20 software architecture types we discussed:

	1.	Monolithic Architecture:
		An example would be a simple to-do list application where all features, like adding, editing, and deleting tasks, are contained within a single executable.
	2.	Client-Server Architecture:
		Websites like Amazon, where users interact with a web browser (client) to browse products, while the server handles inventory, payments, and order processing.
	3.	Microservices Architecture:
		Netflix is a classic example. It uses microservices for various functions like user authentication, recommendation engine, streaming, and payments, each as a separate service.
	4.	Service-Oriented Architecture (SOA):
		An airline booking system might use SOA to manage different services like flight booking, hotel reservations, and car rentals, which can be integrated to create a complete travel package.
	5.	Layered Architecture:
		An online banking application might have a presentation layer (web interface), a business logic layer (transaction processing), and a data storage layer (database) that communicate seamlessly.
	6.	Event-Driven Architecture:
		IoT (Internet of Things) systems like smart homes, where various devices send events to a central hub that triggers actions, like turning off lights when no motion is detected.
	7.	Pipeline Architecture:
		Image and video processing applications often use pipeline architecture. For instance, video editing software applies a sequence of filters and effects to transform raw footage into a polished video.
	8.	Component-Based Architecture:
		Content management systems (CMS) like WordPress use components for various features such as user authentication, content creation, and media management.
	9.	Space-Based Architecture:
		Games like "Minecraft" use space-based architecture to manage the complex interactions between players, the environment, and dynamic elements like blocks and entities.
	10.	Data-Centric Architecture:
		Google Analytics processes and presents data collected from websites, focusing on efficiently storing and analyzing data to provide insights to website owners.
	11.	Event Sourcing Architecture:
		Financial systems, like trading platforms, can benefit from event sourcing to track all transactions and changes over time, ensuring a complete audit trail.
	12.	CQRS (Command Query Responsibility Segregation):
		E-commerce platforms use CQRS to separate data updates (commands) from data retrievals (queries), optimizing performance for high-traffic scenarios.
	13.	N-Tier Architecture:
		An e-learning platform might have distinct tiers for the web interface, user management, course content, and database management.
	14.	Hexagonal Architecture (Ports and Adapters):
		An online shopping platform can use hexagonal architecture to isolate the core shopping logic from various interfaces like web, mobile, and APIs.
	15.	Clean Architecture:
		Enterprise resource planning (ERP) systems often adopt clean architecture to ensure that core business rules remain separate from the technical implementation.
	16.	Onion Architecture:
		Healthcare applications can use onion architecture to ensure core patient data and medical logic are isolated from external concerns like user interfaces.
	17.	Serverless Architecture:
		AWS Lambda functions can be used to process and respond to image uploads in a photo-sharing application, triggered whenever a user uploads a photo.
	18.	Peer-to-Peer (P2P) Architecture:
		BitTorrent is a P2P application where users share files directly with each other, without a central server.
	19.	Space-Based Architecture (SpatialOS):
		Multiplayer online games like "Worlds Adrift" use SpatialOS to create massive, persistent worlds that can handle a large number of players simultaneously.
	20.	Component-Based Development (CBD):
		Large-scale applications like enterprise resource planning (ERP) systems can use CBD by developing individual components like HR management, inventory, and financial modules.

	These real-time examples showcase how each architecture type can be applied to various domains and industries, addressing specific needs and challenges within those contexts.


	Can you group this types in hierarchical 


	Certainly! I can group the types of software architectures into different tiers based on their characteristics and relationships. Keep in mind that some architectures can fit into multiple groups, and the hierarchy might vary based on interpretation. Here's one way to group them hierarchically:

	Tier 1: Foundational Architectures
		1.	Monolithic Architecture

	Tier 2: Client-Server Paradigm
		2.	Client-Server Architecture
		1.	Microservices Architecture
		2.	Service-Oriented Architecture (SOA)

	Tier 3: Layered Approaches
		5.	Layered Architecture
		1.	N-Tier Architecture

	Tier 4: Event-Driven and Interaction Patterns
		7.	Event-Driven Architecture
		1.	Pipeline Architecture
		2.	Peer-to-Peer (P2P) Architecture
		3.	Space-Based Architecture (SpatialOS)

	Tier 5: Architectural Styles Emphasizing Separation of Concerns
		11. Hexagonal Architecture (Ports and Adapters)
		1.	Clean Architecture
		2.	Onion Architecture

	Tier 6: Data-Centric and Processing-Oriented
		14. Data-Centric Architecture
		1.	Event Sourcing Architecture
		2.	CQRS (Command Query Responsibility Segregation)
		3.	Component-Based Architecture
		4.	Component-Based Development (CBD)

	Tier 7: Modern Cloud-Centric and Specialized
		19. Serverless Architecture


	Please note that this hierarchical grouping is just one way to organize the architecture types.
	The divisions between tiers are not rigid, and some architectures can span multiple tiers based on their characteristics.
	The right architecture for a project depends on its specific requirements and goals.










































































===============
<=>	Static	<=>
===============
https://en.wikipedia.org/wiki/Static

Computing
---------
	-	Static build, a compiled version of a program which has been statically linked against libraries
	-	Static logic, digital logic which does not use a clock signal; See Dynamic logic
		-	Static core, a CPU entirely implemented in static logic
	-	Static library, or statically-linked library, a set of routines, external functions and variables which are resolved in a caller at compile-time
	-	Static method, a method of a class that does not need an explicit object reference
	-	Static IP, an IP address
	-	Static route, a network route specified by local configuration, rather than being automatically determined by protocols that automatically assign routes
	-	Static random-access memory, a type of semiconductor memory which retains its contents as long as power is applied
	-	Static type checking, where type checking is applied at compile-time, not run-time
	-	Static variable, a variable whose lifetime is the entire run of the program
		-	Static (keyword)
	-	Static web page
	-	Static web design, a web design which offers a layout that cannot adapt to viewer needs


===============
<=>	Dynamic	<=>
===============
https://en.wikipedia.org/wiki/Dynamics

Computer science and mathematics
--------------------------------
	-	Dynamical energy analysis, a numerical method modelling structure borne sound and vibration in complex structures
	-	Dynamic program analysis, a set of methods for analyzing computer software
	-	Dynamic programming, a mathematical optimization method, and a computer programming paradigm

	Internet
	--------
		-	Dynamic HTML, technologies for creating interactive and animated web sites
		-	Dynamic IP, an IP address that changes every time the computer is turned on
		-	Dynamic web page, a web page with content that varies

	Mathematics
	-----------
		-	Dynamical system, a concept describing a point's time dependency
			-	Topological dynamics, the study of dynamical systems from the viewpoint of general topology
		-	Symbolic dynamics, a method to model dynamical systems





RFC -> Request for Comments

CISCO IOS INTERIOR ROUTING PROTOCOLS
https://d3gvvapon6fqzo.cloudfront.net/pdf_viewer/web/viewer.html?file=https://www.filepicker.io/api/file/T2rIoZLQyOyJkn3ztya5

Unicast Routing Protocols Comparison
						RIP					EIGRP							OSPF				IS-IS					BGP
Type					Distance Vector		Distance Vector					Link State			Link state				Path Vector
Algorithm				Bellman-Ford		DUAL							Dijkstra			Dijkstra				Path Selection
Admin Distance			120					90/170 (external)/5 (summary)	110					115						20/200 (IBGP)
Standard				RFCs 2080, 2453		Cisco proprietary				RFCs 2328, 5340		ISO 10589, RFC 1142		RFC 4271
Supported Protocols		IPv4, IPv6			IPv4, IPv6, IPX, Appletalk		IPv4, IPv6			IPv4, IPv6, CLNP		IPv4, IPv6
Transport				UDP/520				IP/88							IP/89				Layer 2					TCP/179
Authentication			Plain, MD5			MD5								Plain, MD5, AH (v3)	Plain, MD5				MD5
Multicast Address		224.0.0.9			224.0.0.10						224.0.0.5-6			N/A						N/A


Address Resolution Protocol (ARP)
https://en.wikipedia.org/wiki/Address_Resolution_Protocol

Reverse Address Resolution Protocol (RARP)
https://en.wikipedia.org/wiki/Reverse_Address_Resolution_Protocol
	The Reverse Address Resolution Protocol (RARP) is an obsolete computer communication protocol used by a client computer to request its Internet Protocol (IPv4) address from a computer network,
	when all it has available is its link layer or hardware address, such as a MAC address.
	The client broadcasts the request and does not need prior knowledge of the network topology or the identities of servers capable of fulfilling its request.

Asynchronous Transfer Mode (ATM)
https://en.wikipedia.org/wiki/Asynchronous_Transfer_Mode

Gateway (telecommunications)
https://en.wikipedia.org/wiki/Gateway_(telecommunications)
	A gateway is a piece of networking hardware or software used in telecommunications networks that allows data to flow from one discrete network to another.
	Gateways are distinct from routers or switches in that they communicate using more than one protocol to connect multiple networks and can operate at any of the seven layers of the OSI model.

Border Gateway Protocol (BGP)
	https://en.wikipedia.org/wiki/Border_Gateway_Protocol
		Border Gateway Protocol (BGP) is a standardized exterior gateway protocol designed to exchange routing and reachability information among autonomous systems (AS) on the Internet.
		BGP is classified as a path-vector routing protocol, and it makes routing decisions based on paths, network policies, or rule-sets configured by a network administrator.

Dynamic Host Configuration Protocol (DHCP)
	https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol
		The Dynamic Host Configuration Protocol (DHCP) is a network management protocol used on Internet Protocol (IP) networks for automatically assigning IP addresses and other communication parameters to devices connected to the network using a client–server architecture.

Enhanced Interior Gateway Routing Protocol (EIGRP)
	https://en.wikipedia.org/wiki/Enhanced_Interior_Gateway_Routing_Protocol
		Enhanced Interior Gateway Routing Protocol (EIGRP) is an advanced distance-vector routing protocol that is used on a computer network for automating routing decisions and configuration. 
		
Hot Standby Router Protocol
	https://en.wikipedia.org/wiki/Hot_Standby_Router_Protocol
		In computer networking, the Hot Standby Router Protocol (HSRP) is a Cisco proprietary redundancy protocol for establishing a fault-tolerant default gateway. 
		Version 1 of the protocol was described in RFC 2281 in 1998.
		Version 2 of the protocol includes improvements and supports IPv6 but there is no corresponding RFC published for this version.

Internet Control Message Protocol
	https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol
		The Internet Control Message Protocol (ICMP) is a supporting protocol in the Internet protocol suite.
		It is used by network devices, including routers, to send error messages and operational information indicating success or failure when communicating with another IP address, for example, an error is indicated when a requested service is not available or that a host or router could not be reached.
		ICMP differs from transport protocols such as TCP and UDP in that it is not typically used to exchange data between systems, nor is it regularly employed by end-user network applications (with the exception of some diagnostic tools like ping and traceroute).

Open Shortest Path First
	https://en.wikipedia.org/wiki/Open_Shortest_Path_First
		Open Shortest Path First (OSPF) is a routing protocol for Internet Protocol (IP) networks. It uses a link state routing (LSR) algorithm and falls into the group of interior gateway protocols (IGPs), operating within a single autonomous system (AS).
		
Routing Information Protocol
	https://en.wikipedia.org/wiki/Routing_Information_Protocol
		The Routing Information Protocol (RIP) is one of the oldest distance-vector routing protocols which employs the hop count as a routing metric.
		RIP prevents routing loops by implementing a limit on the number of hops allowed in a path from source to destination.
		The largest number of hops allowed for RIP is 15, which limits the size of networks that RIP can support.




Service-oriented architecture
	https://en.wikipedia.org/wiki/Service-oriented_architecture
	
REST
	https://en.wikipedia.org/wiki/REST
	
Web application
	https://en.wikipedia.org/wiki/Web_application



OpenGL (Open Graphics Library)
	https://en.wikipedia.org/wiki/OpenGL
		OpenGL (Open Graphics Library[3]) is a cross-language, cross-platform application programming interface (API) for rendering 2D and 3D vector graphics.
		The API is typically used to interact with a graphics processing unit (GPU), to achieve hardware-accelerated rendering.



Here's Where the Internet Actually Lives
	https://www.voanews.com/a/usa_all-about-america_heres-where-internet-actually-lives/6184090.html

Ansible
	Agent less architecture - No need to install any agent on Ansible Clients/Nodes
	It is a free open source Automation tool and simple
	Using Existing OpenSSH
	Python / YAML based
	Highly flexible and configuration management of systems.
	Large number of ready to use modules for system management
	Custom modules can be added if needed


3 tier architecture

Structured Data Storage / Unstructured Data Storage

HTTP cache , Session cache , Object cache

CDN (Content Delivery Network)

C10k problem
https://en.wikipedia.org/wiki/C10k_problem















 ============================================================================
||	Static vs Dynamic Load													||
||	https://chat.openai.com/share/6bf7c217-ec03-47ba-88a3-db87db06a64d		||
 ============================================================================


Least Connections (LC):
The least connections algorithm directs traffic to the server with the fewest active connections.
This approach aims to distribute traffic more evenly among servers, preventing overloading of any single server.
However, it might not consider the actual workload or processing capacity of each connection.

Weighted Least Connections:
This algorithm is an extension of the least connections algorithm.
Servers are assigned different weights based on their processing capacity.
The server with the least connections and the highest weight is selected for the next request.
This helps account for the server's capabilities while distributing traffic.

Least Response Time (LRT):
In the least response time algorithm, traffic is directed to the server with the lowest response time.
This ensures that requests are sent to the server that can process them the fastest.
However, this algorithm requires continuous monitoring of response times and might not handle sudden load spikes well.

Weighted Round Robin with Dynamic Weight Adjustment:
An advanced version of the weighted round robin algorithm, this approach adjusts server weights dynamically based on 
their performance metrics like response time, error rate, and current load.
Servers that perform well receive higher weights, increasing their chances of receiving requests.

Content-based Load Balancing:
This algorithm routes requests based on the content or type of the request.
For example, a request for images might be directed to a server optimized for image delivery, 
while requests for dynamic content might be sent to another server. This approach optimizes server resources based on 
their strengths.

Geographic Load Balancing:
This algorithm routes requests based on the geographical location of the client.
Requests are directed to the server that is physically closest to the client, reducing latency and improving performance.
This is especially useful for global applications with distributed server infrastructure.

Anycast:
Anycast is a network routing technique where multiple servers are assigned the same IP address.
Requests are routed to the nearest server with that IP address. 
Anycast is often used for DNS servers, content distribution networks, and other scenarios where low latency is crucial.

Adaptive Load Balancing:
Adaptive algorithms continuously learn from the system's behavior and adapt their load balancing decisions accordingly.
They take into account historical data, current workloads, and even predictive analytics to optimize resource allocation.

Machine Learning-based Load Balancing:
Using machine learning techniques, load balancers can predict future workload patterns and allocate resources accordingly.
These algorithms learn from historical data and adapt to changing conditions in real-time, making them well-suited for 
complex and dynamic environments.




ADN (application delivery networking)

Global Load Balancing

File/Storage Virtualization

Application Delivery Controller

Server Load Balancer


Monolithic Application

Multitier Architectures



Microservices
	variant of the service-oriented architecture
	It is an architectural pattern
	loosely coupled, fine-grained services, communicating through lightweight protocols.

	There is no single commonly agreed definition of microservices. The following characteristics and principles can be found in the literature:

		fine-grained interfaces (to independently deployable services),
		business-driven development (e.g. domain-driven design),
		IDEAL cloud application architectures,
		polyglot programming and persistence,
		lightweight container deployment,
		decentralized continuous delivery, and
		DevOps with holistic service monitoring.

	There is no single definition for microservices. A consensus view has evolved over time in the industry. Some of the defining characteristics that are frequently cited include:
	
		Services in a microservice architecture are often processes that communicate over a network to fulfill a goal using technology-agnostic protocols such as HTTP.
		Services are organized around business capabilities.
		Services can be implemented using different programming languages, databases, hardware and software environments, depending on what fits best.
		Services are small in size, messaging-enabled, bounded by contexts, autonomously developed, independently deployable, decentralized and built and released with automated processes.

	Lends itself to a continuous delivery software development process. A change to a small part of the application only requires rebuilding and redeploying only one or a small number of services.
	Adheres to principles such as fine-grained interfaces (to independently deployable services), business-driven development (e.g. domain-driven design).

	Benefits
		Modularity
		Scalability
		Integration
		Distributed development
			Microservice-based architectures facilitate continuous integration, continuous delivery and deployment.


Architectural pattern




Software design pattern






Resource-oriented architecture
	In software engineering, a resource-oriented architecture (ROA) is a style of software architecture and programming paradigm 
	for supportive designing and developing software in the form of Internetworking of resources with "RESTful" interfaces.
	These resources are software components (discrete pieces of code and/or data structures) which can be reused for different purposes.

Service-oriented architecture
	is an architectural style that focuses on discrete services instead of a monolithic design.
	The related buzzword service-orientation promotes loose coupling between services.
	
	Service-oriented architecture can be implemented with web services or Microservices.
	
	Can be implemented using a wide range of technologies:
		Web services based on WSDL and SOAP
		Messaging, e.g., with ActiveMQ, JMS, RabbitMQ
		RESTful HTTP, with Representational state transfer (REST) constituting its own constraints-based architectural style
		OPC-UA
		Internet Communications Engine
		WCF (Microsoft's implementation of Web services, forming a part of WCF)
		Apache Thrift
		gRPC
		SORCER
		Jini
		CORBA
		Internet Communications Engine
	
	SOA-based systems can therefore function independently of development technologies and platforms (such as Java, .NET, etc.).


Event-driven architecture


Message-driven architecture


Web-oriented architecture
	Web-oriented architecture (WOA) was coined in 2006 by Nick Gall of Gartner.
	It is a software architecture style that extends service-oriented architecture (SOA) to web-based applications.
	WOA was originally created by many web applications and sites, such as social websites and personal websites.

	WOA = SOA + WWW + REST

	The WOA stack
		Distribution (HTTP, feeds)
		Composition (Hypermedia, Mashups)
		Security (OpenID, SSL)
		Data Portability (XML, RDF)
		Data Representation (ATOM, JSON)
		Transfer Methods (REST, HTTP, BitTorrent)

Software design pattern
	In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem 
	within a given context in software design. It is not a finished design that can be transformed directly into source or machine code.
	Rather, it is a description or template for how to solve a problem that can be used in many different situations. 

	Design patterns had originally been categorized into 3 sub-classifications based on what kind of problem they solve.
		Creational patterns provide the capability to create objects based on a required criterion and in a controlled way.
		Structural patterns are about organizing different classes and objects to form larger structures and provide new functionality.
		Finally, behavioral patterns are about identifying common communication patterns between objects and realizing these patterns.






Distributed database
--------------------
	https://en.wikipedia.org/wiki/Distributed_database

	A distributed database is a database in which data is stored across different physical locations. 
	It may be stored in multiple computers located in the same physical location (e.g. a data centre); or maybe dispersed over a network of interconnected computers.
	Unlike parallel systems, in which the processors are tightly coupled and constitute a single database system, a distributed database system consists of loosely coupled sites that share no physical components.

	System administrators can distribute collections of data (e.g. in a database) across multiple physical locations.
	A distributed database can reside on organised network servers or decentralised independent computers on the Internet, on corporate intranets or extranets, or on other organisation networks. 
	Because distributed databases store data across multiple computers, distributed databases may improve performance at end-user worksites by allowing transactions to be processed on many machines, instead of being limited to one.

Distributed database management system / Database
-------------------------------------------------
	https://en.wikipedia.org/wiki/Database

	Database Management System (DBMS)
	In computing, a database is an organized collection of data or a type of data store based on the use of a database management system (DBMS), 
	the software that interacts with end users, applications, and the database itself to capture and analyze the data.

	Small databases can be stored on a file system, while large databases are hosted on computer clusters or cloud storage.
	The design of databases spans formal techniques and practical considerations, including data modeling, 
	efficient data representation and storage, query languages, security and privacy of sensitive data, 
	and distributed computing issues, including supporting concurrent access and fault tolerance.












How to create a Linux Virtual Machine on macOS
	https://medium.com/@thehippieandtheboss/how-to-create-a-linux-virtual-machine-on-macos-1278ec1ef327

mesosphere/marathon
	https://hub.docker.com/r/mesosphere/marathon

Choose a provider and install DC/OS
	https://dcos.io/install/#marathon

D2IQ BLOG
	https://d2iq.com/blog

	TOPICS:
		Everything, Air-Gapped Deployments, Application Modernization, Artificial Intelligence, AWS, CI, CI/CD, Cloud Native, CNCF,
		Community, Company, Competitive Comparison, Container Management, Cost Management, Customer Stories, DC/OS, DevOps, 
		DKP, Edge/IoT, Enterprise Kubernetes, Events, Fast Data Pipelines, Federal IT Events, GitOps, Hybrid Cloud, Kaptain,
		Kommander, Konvoy, Kubeflow, Kubernetes, Kubernetes Adoption, Kubernetes Events, Kubernetes Governance, Kubernetes Management,
		KUDO, Machine Learning, Marathon, mesosphere, ML, AI/ML, Multi-Cloud, Multi-cluster Management, Multi-tenancy, Multi-tenant,
		Partners, Platform Engineering, Product, Public Cloud, Public Sector, Public Sector Technology, Security,
		Smart Cloud Native, Training, Tutorials, Universe, Use Cases

	Failing in the Cloud–How to Turn It Around (Kubernetes Cloud Native)
		https://d2iq.com/blog/failing-in-the-cloud

	How to Gain the Advantages of an Immutable and Self-Healing Infrastructure (Kubernetes Container Management)
		https://d2iq.com/blog/immutable-self-healing-infrastructure-advantages

	DKP 2.6 Features New AI Navigator to Bridge the Kubernetes Skills Gap (Kubernetes Multi-Cloud)
		https://d2iq.com/blog/dkp-2-6-features-new-ai-navigator

	Next-Gen Defense: Unleashing the Power of Kubernetes (Security Kubernetes)
		https://d2iq.com/blog/next-gen-defense-kubernetes-webinar

	Modernizing Cybersecurity: New Challenges, New Practices (Security Kubernetes)
		https://d2iq.com/blog/modernizing-cybersecurity-new-challenges-new-practices

	Air-Gapping Should Be Head-Slappingly Obvious (Security Kubernetes)
		https://d2iq.com/blog/air-gapping-head-slappingly-obvious

	Modernizing the Air Force: DAFITC 2023 (Container Management)
		https://d2iq.com/blog/dafitc-2023

	DZone Survey 2023 Tracks Range of Container Experiences ((Security Kubernetes))
		https://d2iq.com/blog/dzone-containers-trend-report-2023


Getting a Process’ Child Processes
	https://www.baeldung.com/linux/get-process-child-processes

Introduction to the OverlayFS
	https://linuxconfig.org/introduction-to-the-overlayfs

Overlay Filesystem
	https://docs.kernel.org/filesystems/overlayfs.html

How to remove intermediate images from a build after the build?
	https://stackoverflow.com/questions/50126741/how-to-remove-intermediate-images-from-a-build-after-the-build

Install and Set Up kubectl on macOS
	https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/

Hello Minikube
	https://kubernetes.io/docs/tutorials/hello-minikube/

Install Tools
	https://kubernetes.io/docs/tasks/tools/

kind
	https://kind.sigs.k8s.io/docs/user/quick-start/

kubectl Quick Reference
	https://kubernetes.io/docs/reference/kubectl/quick-reference/

List of Commands example for working with containerd using ctr
	https://www.devopsschool.com/blog/list-of-commands-example-for-working-with-containerd-using-ctr/




Difference Between Cloud and Data Center
	https://www.geeksforgeeks.org/difference-between-cloud-and-data-center/amp/

Route Mobile
	https://en.wikipedia.org/wiki/Route_Mobile

Difference between Asymmetric and Symmetric Multiprocessing
	https://www.geeksforgeeks.org/difference-between-asymmetric-and-symmetric-multiprocessing/

algorithmica-org/algorithmica
	https://github.com/algorithmica-org/algorithmica/tree/master/content/english/hpc/external-memory

hardware algorithm (Google Search)

iphone sdk (Google Serach)

jlink java (Google Search)

Guide to jlink
	https://www.baeldung.com/jlink

jdeps (Google Search)

Dynamic Java Bytecode Manipulation Framework Comparision
	https://stackoverflow.com/questions/9167436/dynamic-java-bytecode-manipulation-framework-comparison

Data privacy: anonymization and pseudonymization — Part 1
	https://medium.com/mercedes-benz-techinnovation-blog/data-privacy-anonymization-and-pseudonymization-part-1-6b145459a3bf

pseudonymization vs anonymization (Google Search)

How to Get the Number of Threads in a Java Process
	https://www.baeldung.com/java-get-number-of-threads

simultaneous process (Google Serach)

Processing
	https://en.wikipedia.org/wiki/Processing






==============================================
Time Of India (Friday, February 16, 2024)
Times Techies (Page 21)
Glossary of In-Groups Terms Used ON THIS PAGE
==============================================

Firmware
	Firmware is a type of software that is embedded directly in a hardware device to provide low-level control and functionality.
	Firmware, such as the BIOS of a personal computer, may contain basic functions of a device, and may provide hardware abstraction services to higher-level software such as 
	operating systems.
	It is often stored in non-volatile memory devices such as ROM, EPROM, EEPROM, and flash memory.
	It can also be updated to fix bugs or add features, but this requires a special procedure and may involve some risks.
	Firmware is sometimes called "software for hardware"

Hyperscalers
	Hyperscalers refer to a category of service providers in the cloud computing industry that can scale their services to large levels, handling massive amounts of operations and serving millions of users simultaneously.
	These companies have the infrastructure and capabilities to deploy vast amounts of resources on-demand, enabling them to support the extensive computing and storage requirements of large-scale internet platforms,
	big data analytics, and cloud services.
	Key characteristics of hyperscalers include massive scale and high levels of energy and operational efficiency through advanced data centre management technologies and economies of scale. 
	Examples of companies often categorized as hyperscalers include Amazon Web Services (AWS), Google Cloud, Microsoft Azure, and Alibaba Cloud.


















=============
<=> Books <=>	
=============

Internet Architecture : An Introduction to IP Protocols - Uyless Black
======================================================================

Page No: 301



									 -----------				 ---------------
									|	Sender	|				|	Receiver	|
				 					 -----------				 ---------------

									------------				 ------------
							-------| Clear Text |				| Clear Text |-------
						   |		------------				 ------------		 |
						   |				|					  /\				 |
						   \/				|		 			  |					 \/
					1.	Hash Ops			|					  |			8.	Hash Ops
						   |				|					  |					 |
						   |				|					  |					 |
						   \/				|					  |					 \/
					 ----------------		|					  |			 ----------------
					| Message Digest |		|					  |			| Message Digest |
					 ----------------		|					  |			 ----------------
						   |				|					  |					 /\
 ----------				   |				|					  |					 |					 -----------
| Sender's |			   \/				|					  |					 |					| Sender's	|
| Private  |------> 2.	Encryption Ops		|					  |			7.	Decryption Ops <--------| Public	|
| Key	   |			   |				|					  |					 /\					| Key		|
 ----------				   |				|					  |					 |					 -----------
						   \/				|					  |					 |
					 -------------------	|					  |			 -------------------
					| Digital Signature |	|					  |			| Digital Signature |
					 -------------------	|					  |			 -------------------
						   |				|					  |					 /\
 -----------			   |				|					  |					 |					 -----------
| One-time	|			   \/				|					  |					 |					| One-time	|
| Symmetric	|----->	3.	Encryption Ops <----					   <------- 6.	Decryption Ops <--------| Symmetric	|
| Key		|			 			|												 |					| Key		|
 -----------						|												 |					 -----------
	  |								|								 ----------------						  /\
	   ---------------------		|								|										  |
							|		|								|				  ------------------------
 -----------				|		|								|				 |				 -----------
| Receiver's|				\/		|								|				 |				| Receiver's|
| Public	|----->	4.	Encryption 	|								|		5.	Decryption Ops <----| Private	|
| Key		|				Ops		|								|				 /\				| Key		|
 -----------			   	|		|								|				 |				 -----------
 							OTK	   CM								|				OTK
							|		|								CM				 |
							\/		\/								|				 |
						 ---------------------------------------------------------------
						| Encrypted One-Time Key (OTK) & Ciphered Message (CM)			|
						 ---------------------------------------------------------------

								Figure 9-11	Using One-Time Key (Session Key)






=============
<=> Books <=>	
=============

Practical MLOps		Operationalizing Machine Learning Models	-	Noah Gift & Alfredo Deza
============================================================================================

Page No: 276

Figure 9-10. Kubernetes hello world

									http://127.0.0.1:8080/change/1/34
													|
													|
					 -------------------------------|-------------------------------
					|								|								|
					|								\/								|
					|						 ---------------						|
					|			 -----------| Load balance	|----------				|
					|			|			 ---------------		   |			|
					|			|					|				   |			|
					|			\/					\/				   \/			|
					|	 ----------------	 ---------------	 ---------------	|
					|	| Flask node	 |	| Flask node	|	| Flask node	|	|
					|	| 10.1.0.27:8080 |	|10.1.0.28:8080	|	| 10.1.0.29:8080|	|
					|	 ----------------	 ---------------	 ---------------	|
					|						Kubernetes cluster						|
					 ---------------------------------------------------------------










 -----------------------
|	List of Wikipedias	|
 -----------------------
https://meta.m.wikimedia.org/wiki/List_of_Wikipedias

	This page contains information about all 339 languages for which official Wikipedias have been created under the auspices of the Wikimedia Foundation.
	The table below, however, excludes 13 Wikipedias that were closed and moved to the Wikimedia Incubator for further development, leaving a current total of 326 active Wikipedias.
	Content in other languages is being developed at the Wikimedia Incubator; languages which meet certain criteria can get their own wikis.

	More lists of Wikipedias by various criteria:
	
	-	List of Wikipedias by article count, users, file count and depth and its source (both updated every 6 hours)


	 As of 21 Feb 2024 (11.00 AM IST)

		No	Language	Language (local)	Wiki	Articles	All pages	Edits			Admins	Users		Active users	Files		Depth
		1	English		English				en		6,786,554	60,041,172	1,204,385,694	869		46,974,423	125,427			914,385		1,235
		.
		.	Hindi
		.	Kannada
		.	Telugu

 ========================
||	===================	||
||	<==> wikistats <==>	||
||	===================	||
 ========================

1.	https://wikistats.wmcloud.org/display.php?t=wp

2.	https://wikistats.wmcloud.org/display.php

invalid project key or still needs to be created.

wp (wikipedias)
wt (wiktionaries)
ws (wikisources)
mw (mediawikis)
wi (wikia)
wx (wmspecials)
un (uncyclomedias)
wn (wikinews)
mt (metapedias)
wb (wikibooks)
wq (wikiquotes)
et (editthis)
si (wikisite)
sw (shoutwiki)
wr (wikitravel)
ne (neoseeker)
wv (wikiversity)
sc (scoutwiki)
wf (wikifur)
an (anarchopedias)
w3 (w3c)
ga (gamepedias)
sf (sourceforge)

3. 	Replace t= to_any_value_from_2. in URL (https://wikistats.wmcloud.org/display.php?t=wp)
	So you get the stats of wikipedias(wp) or wiktionaries(wt) or wikisources(ws), ....

API
---
https://www.mediawiki.org/wiki/API
	
	MediaWiki has several application programming interfaces (APIs).
	
	The three most important APIs of MediaWiki are:
		- the MediaWiki Action API (api.php), which is a web API that lets you read and write content of a MediaWiki wiki
		- the MediaWiki PHP API, which can be used to develop extensions for MediaWiki in PHP
		- the MediaWiki JavaScript API (mw), which can be used to develop user scripts and gadgets to extend the MediaWiki user interface


API:Client code
---------------
https://www.mediawiki.org/wiki/API:Client_code
	
	Client libraries contain code that developers can use to help with common and basic tasks, 
	so that they don't have to write the code from scratch when their projects interact with an API.
	
	This page contains a set of lists, by language, of several recommended client libraries that can be used with the MediaWiki Action API.
	The recommendations are based on evaluations using API:Client code/Gold standard.


	JAVA

	 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	|			Name			|							Description								|		Last release		|		Release date		|		Last activity	|
	|---------------------------|-------------------------------------------------------------------|---------------------------|---------------------------|-----------------------|
	| JavaWikiBotFramework		|	A library to retrieve data from and maintain MediaWiki-based 	|			4.0.0			|	13 September 2016		|	15 February 2019	|
	|							|	wikis such as Wikipedia.										|							|							|						|
	|---------------------------|-------------------------------------------------------------------|---------------------------|---------------------------|-----------------------|
	|		jwiki				|	A library for effortlessly interacting with Wikipedia/MediaWiki.|			1.8.0			|	14 April 2022			|	6 May 2020			|
	|---------------------------|-------------------------------------------------------------------|---------------------------|---------------------------|-----------------------|
	|		Bliki Engine		|	Can convert wikicode to HTML, DocBook or PDF. 					|							|							|	27 April 2019		|
	|							|	Has a helper library for API calls.								|							|							|						|
	 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










(base) yathvi@Madan-MacBook-Pro-175 ~ % brew list
==> Formulae
adns				gnu-sed				libpng				open-completion			pyyaml
ansible				gnu-tar				libsodium			openblas			r
ansifilter			gnu-which			libssh2				openldap			readline
asciidoctor			gnupg				libtasn1			openssl@1.1			ripgrep
autoconf			gnutls				libtermkey			openssl@3			rsync
automake			go				libtiff				p11-kit				rtmpdump
bash				go-bindata			libtool				packer-completion		ruby
bash-completion			gobject-introspection		libunistring			pcre				rust
bat				gradle				libusb				pcre2				sgit
bdw-gc				gradle-completion		libuv				perl				shellcheck
berkeley-db			graphite2			libvterm			pinentry			six
berkeley-db@5			grep				libx11				pinentry-mac			sonar-completion
bfg				groovy				libxau				pip-completion			sphinx-doc
binutils			grunt-completion		libxcb				pixman				sqlite
bison				guile				libxdmcp			pkg-config			ssh-copy-id
boost				gzip				libxext				pkgdiff				stormssh
brew-cask-completion		hadolint			libxml2				popt				stormssh-completion
brotli				harfbuzz			libxrender			proctools			swig
c-ares				highlight			libyaml				psgrep				tcl-tk
ca-certificates			hub				little-cms2			pwgen				telnet
cairo				hyperkit			llvm				pycparser			terraform
cassandra			icu4c				logrotate			pygments			tmuxinator-completion
cffi				isl				lpeg				python-certifi			tree
cmake				jemalloc			lua				python-charset-normalizer	tree-sitter
coreutils			jenkins				luajit				python-cryptography		unbound
cql				jfrog-cli			luajit-openresty		python-dateutil			unibilium
csshx				jfrog-cli-go			luarocks			python-flit-core		util-macros
curl				jid				luv				python-hatchling		v
cython				jpeg				lz4				python-idna			vagrant-completion
dict				jpeg-turbo			lzo				python-jinja			vegeta
diffutils			jq				m4				python-lxml			vim
docker-completion		jsonlint			maven				python-markupsafe		wdiff
docker-compose			kind				maven-completion		python-packaging		wget
docutils			kubernetes-cli			meson				python-pathspec			xcb-proto
fd				launchctl-completion		minikube			python-pluggy			xorgproto
ffind				less				mkcert				python-pyparsing		xtrans
findutils			libassuan			mpdecimal			python-pytz			xxhash
fontconfig			libev				mpfr				python-requests			xz
freetype			libevent			msgpack				python-setuptools		z
gawk				libffi				ncdu				python-setuptools-scm		z3
gcc				libgcrypt			ncurses				python-tabulate			zsh
gdbm				libgit2				neovim				python-trove-classifiers	zsh-autosuggestions
gem-completion			libgpg-error			nettle				python-typing-extensions	zsh-completions
gettext				libidn2				nghttp2				python-urllib3			zsh-git-prompt
giflib				libksba				ninja				python@3.10			zsh-history-substring-search
git				liblinear			nmap				python@3.11			zsh-syntax-highlighting
git-extras			libmaa				node				python@3.12			zstd
glib				libmpc				npth				python@3.8
gmp				libnghttp2			oniguruma			python@3.9

==> Casks
atom		iterm2		rstudio		spectacle	vagrant		virtualbox
(base) yathvi@Madan-MacBook-Pro-175 ~ % 










































All 4 Udemy Operating System courses explain about CPU 

1.	Didn't explain about power
	since cpu clock consumes power


	Processor power dissipation
	===========================
	https://en.wikipedia.org/wiki/Processor_power_dissipation
		
		For a given CPU core, energy usage will scale up as its clock rate increases.

2.
	user time and kernel time not explained , need to check.



=================
Some other things
=================

1.

is there any java api or java library or java function which will check all possible values in a class and print in System.out.println

There isn't a built-in Java API or library that can automatically check all possible values in a class and print them.

However, you can achieve similar functionality using reflection, which allows you to inspect the fields and methods of a class at runtime.



import java.lang.reflect.Field;
import java.lang.reflect.Method;


2.
	you can spin up any server in any datacenter and find the implementation of datacenter (abstract details) not detailed one






The unsolved math problem which could be worth a billion dollars.
=================================================================
	https://www.youtube.com/watch?v=8COArd_EREw

		Total World-Wide Bitcoin Mining Hashrate
		60 Quintillion (60,000,000,000,000,000,000) per second 

			Using 58 TWh / year > Switzerland

		1.	THE SHA 256 HASH FUNCTION	The World's Most Popular Algorithm?

		2.	The SHA 256 algorithm is a deterministic one-way hash function.

		3.	HASH FUNCTION : A mathematical function that takes any size input but has an output of a fixed size.

		4.	When ever you start with same Input , you always get same Output.

		5.	ONE-WAY FUNCTION - Hard to do backwards.

		5.	SHA 265 stands for Secure Hash Algorithm and its Outputs 256 bits

		6.	It takes any kind of digital input and any length of input and always outputs exactly 256 bits. (256 bits ones and zeros)

		7.	256 bits ones and zeros (binary) = 64 Hex digits

		8.	Total number of possible different SHA 256 hashes = 2 pow 256

		9.	Let me show you an example, Here's a picture I took.

			1000 x 1000 pixels = 1,000,000 pixels
			3 bytes per pixel (red, green, blue) + 56-byte header = 3,000,056 bytes = 24,000,448 bits


			When I run this through the SHA-256 algorithm it outputs SHA 256 hash

			When you change 1 single bit in the Input,
			I'm going to zoom in to this pixel on the telephone pole and change
			the green value by changing this zero to a one

			From:
			-----
			Red : 	0111 0100 (74)
			Green:	1000 0001 (81)
			Blue:	0111 1100 (7C)

			To:
			--
			Red : 	0111 0100 (74)
			Green:	1001 0001 (91)
			Blue:	0111 1100 (7C)

			Rerun the algorithm you get completely different output.

		10.	Philosophical Consequences:
				- It's possible to see a number that no one has ever seen before.
				- No one has ever figured out how to reverse the algorithm.





Hardware/software architecture of an algorithm for vision-based real-time vehicle detection in dark environments
	https://dl.acm.org/doi/10.1145/1403375.1403419












==============================================================================
Brian Cox explains quantum mechanics in 60 seconds - BBC News	||	(1 minute)
==============================================================================
	https://www.youtube.com/watch?v=fcfQkxwz4Oo

Brian Cox without hesitation repetition or deviation can you please explain for us as succinctly as possible 

I have a timer here 
the rules of quantum mechanics 
your time starts now 

well the most basic version I know of is is Feynman's version which uh essentially says particles are particles
and they hop from place to place with a particular probability and the probability that a particle that's at
some place will be at some different place later is given by a very simple rule um it uses a quantity called the
action which is to do with the mass of the particle and the time and the distance uh and you so you basically
calculate these little uh quantities which to do with something called the action and you add them up 

so if I if I start with an electron in one corner of the room and I say what's the probability at sometime later it'll be
somewhere else then at every point in the room you can assign a probability that it will be there at a later point
with one simple Rule and that's it now this is called a path integral formulation of quantum mechanics 

THAT UNDERLIES EVERYTHING ELSE YOU CAN YOU CAN GET THE REST FROM THERE

so it's a simple rule says what's the probability of particle move from A to B that's it

I'll I'll stop the timer then very good well under a minute
